{"version":3,"sources":["redux/actions/routing/route.actions.js","redux/router/routePaths.js","redux/router/router.js","redux/actions/game/gameState.actions.js","redux/reducers/game/gameState.reducer.js","redux/actions/game/roster.actions.js","utils/helper.js","constants/RACES.js","constants/ITEMS.js","utils/itemHelper.js","utils/entityHelper.js","constants/HEROES.js","redux/reducers/game/roster.reducer.js","redux/actions/game/resources.actions.js","redux/reducers/game/resources.reducer.js","redux/actions/game/inventory.actions.js","redux/reducers/game/inventory.reducer.js","redux/actions/game/squad.actions.js","redux/reducers/game/squad.reducer.js","redux/actions/game/equipment.actions.js","redux/reducers/game/equipment.reducer.js","redux/actions/game/actor.actions.js","redux/reducers/game/actor.reducer.js","redux/actions/game/activeTime.actions.js","redux/reducers/game/activeTime.reducer.js","redux/actions/game/battle.actions.js","redux/reducers/game/battle.reducer.js","redux/actions/game/battleLog.actions.js","redux/reducers/game/battleLog.reducer.js","redux/actions/game/targetActor.actions.js","redux/reducers/game/targetActor.reducer.js","redux/actions/game/progression.actions.js","redux/reducers/game/progression.reducer.js","redux/reducers/routing/battleStage.reducer.js","redux/reducers/routing/unitID.reducer.js","redux/actions/initGame.actions.js","constants/MANIFEST.js","redux/reducers/initGame.reducer.js","redux/reducers/rootReducer.js","redux/middleware/initGame.middleware.js","redux/middleware/core/throttle.middleware.js","redux/middleware/core/debounce.middleware.js","utils/localStorage.js","redux/middleware/core/index.js","redux/middleware/core/measure.middleware.js","redux/middleware/core/localStorage.middleware.js","redux/middleware/game/routingCheck.middleware.js","redux/middleware/game/gameState.middleware.js","redux/middleware/game/roster.middleware.js","redux/selectors/getEquipment.js","redux/middleware/game/equipment.middleware.js","redux/middleware/game/battle.middleware.js","utils/calculateAction.js","redux/middleware/game/battleCalculation.middleware.js","redux/middleware/game/targetActor.middleware.js","constants/STAGES.js","redux/middleware/game/index.js","redux/middleware/game/progression.middleware.js","redux/middleware/index.js","redux/store.js","redux/redux-devtools-extension.js","components/frame/SimpleFrame.jsx","scenes/Home.jsx","constants/UI.js","components/ui/other/TopBarDefault.jsx","components/frame/DefaultFrame.jsx","redux/selectors/getPreviousPage.js","components/ui/navigation/BackLink.jsx","scenes/Settings.jsx","components/entity/UnitCard.jsx","components/entity/SquadMonitor.jsx","redux/selectors/getSquadWithEquipment.js","redux/selectors/getStagesFromProgression.js","scenes/Adventure.jsx","components/entity/RosterMonitor.jsx","redux/selectors/getAvailableUnitsFromRoster.js","scenes/Squad.jsx","components/entity/ItemCard.jsx","components/entity/UnitDisplay.jsx","components/entity/InventoryDisplay.jsx","redux/selectors/getInventory.js","scenes/UnitPage.jsx","components/frame/BattleFrame.jsx","components/entity/ActorCard.jsx","components/stage/BattleStage.jsx","components/ui/atf/InteractiveActionBar.jsx","components/ui/chat/BattleLogEntry.jsx","components/ui/chat/BattleLog.jsx","redux/selectors/getStoryFromStage.js","components/ui/other/StoryMode.jsx","redux/selectors/getBattleData.js","components/ui/atf/TurnCounter.jsx","redux/selectors/getFactions.js","redux/selectors/getNextActors.js","scenes/Battle.jsx","redux/selectors/getBattleResult.js","constants/ADVICE.js","components/other/AdviceBox.jsx","constants/ITEMGROUPS.js","constants/REWARDS.js","utils/rewardHelper.js","components/other/RewardBox.jsx","scenes/BattleResult.jsx","scenes/index.jsx","App.jsx","index.jsx"],"names":["ROUTING","GOTO_HOME","concat","GOTO_SETTINGS","GOTO_ADVENTURE","GOTO_SQUAD","GOTO_UNIT","GOTO_BATTLE","GOTO_BATTLE_RESULT","goToHome","type","meta","gameState","goToSettings","goToAdventure","goToBattle","stage","payload","battleStage","routePaths","_routePaths","Object","defineProperty","routes","path","confirmLeave","connectRoutes","initialDispatch","reducer","middleware","enhancer","routerMiddleware","routerEnhancer","initDispatch","locationReducer","RESET_GAME_STATE","ADD_PAGE_STATE","SET_BATTLE_RESULT_STATE","initialState","page","battleResult","undefined","gameStateReducer","state","arguments","length","action","oldPage","oldPageIndex","findIndex","i","newPage","toConsumableArray","objectSpread","cloneDeep","slicedPage","slice","INIT_ROSTER","ADD_TO_ROSTER","createUniqueId","time","Date","getTime","randomNumber","random","Math","floor","min","pow","max","randomFixedInt","groupBy","objectArray","property","reduce","acc","obj","key","push","sortBy","arr","attribute","sort","a","b","mergeObjects","objA","objB","sumObjects","mergedObj","keys","map","oldValue","newValue","valueTypesDiffer","oldValueIsUndefined","newValueIsUndefined","keyObject","values","numA","numB","apply","textA","textB","mergeMixedValues","RACES","HUMAN","ID","name","avatar","male","female","stats","hp","attack","defense","rate","ELF","FAIRY","ORC","GOBLIN","GHOST","status","undead","SKELETON","DRAGON","VAMPIRE","GENIE","ZOMBIE","ITEMS","SWORD_001","icon","range","slots","slot","damage","category","element","tier","1","2","3","4","5","SWORD_011","MACE_001","DAGGER_001","BOW_001","SHIELD_001","protection","SHIELD_011","TORSO_001","TROUSERS_001","BOOTS_001","GLOVES_001","HELMET_001","itemHelper","itemSource","modifiers","source","itemBase","assign","getItemData","getValueForTier","currentTier","array","entry","value","getEquippedItemEffects","effects","item","entityHelper","faction","gender","mods","baseUnit","equipment","race","_calculateEffectiveDa","baseStats","_mods$stats","modStats","moddedStats","equippedItemEffects","mergeEffects","accumulator","effect","offenseEffects","defenseEffects","statsEffects","equippedStats","calculateEffectiveData","timeframe","initialTimeframe","createBaseUnit","HEROES","XY001","sourceID","XY002","XY003","XY004","XY005","XY006","initialRoster","getUnitsWithIDs","baseUnits","unit","rosterReducer","roster","newUnits","INCREASE_RESOURCES","INIT_RESOURCES","GOLD","CRYST","initialResources","resourcesReducer","resources","ADD_INVENTORY_ITEMS","DELETE_INVENTORY_ITEMS","UPDATE_INVENTORY_ITEM","INIT_INVENTORY","createItemBase","initialInventory","newItems","items","ADD_SQUAD_MEMBERS","DELETE_SQUAD_MEMBERS","addSquadMembers","units","persisted","squadReducer","filter","member","includes","ADD_TO_EQUIPMENT","REMOVE_FROM_EQUIPMENT","removeFromEquipment","checkEquipment","unitID","newEquipment","itemID","newState","ACTOR","ADD_ACTORS","DELETE_ACTORS","UPDATE_ACTORS","DELAY_ACTOR","RESET_ACTORS_DELAY","RESET_ACTORS","addActors","actors","getUnitData","actorReducer","newActors","targets","actor","target","changedStatus","newStatus","delay","ATF","ADVANCE_TURN","RESET_ATF","turn","tick","activeTimeReducer","INIT_BATTLE","PROGRESS_BATTLE","SET_BATTLE_BANNER","RESET_BATTLE","progressBattle","battleReducer","squadUnits","currentStep","currentPhase","currentStatus","currentBanner","step","phase","banner","LOG_BATTLE","RESET_LOG","logBattle","_ref","logID","timestamp","now","SELECT_ACTOR","CHECK_SELECTED_ACTOR","selectTargetActor","targetActor","targetActorReducer","ADD_TO_PROGRESS","addToProgress","progress","checkProgress","nextStage","stages","progressionReducer","chapter","section","newNextStage","oldNextStage","updatedStages","_newNextStage$split","split","_newNextStage$split2","slicedToArray","nextChapterString","nextSectionString","nextChapter","parseInt","nextSection","battleStage_reducer","unitID_reducer","INIT_GAME","MANIFEST","version","author","studio","initGameReducer","combineReducers","gameInitialised","gameReducer","routingReducer","location","initGameMiddleware","dispatch","getState","next","initGameAction","_getState$gameInitial","checkRoster","throttled","pending","loadState","serializedState","localStorage","getItem","JSON","parse","err","core","throttle","setTimeout","debounce","clearTimeout","measure","console","timeEnd","store","previousState","nextState","localStorageState","stringify","setItem","_unused","saveState","routingCheckMiddleware","goHomeYouAreDrunk","log","battleMiddleware","rosterMiddleware","getEquipedItemIDs","createSelector","getEquipedItems","inventory","equippedItemIDs","equipmentMiddleware","equipedItems","getEquipment","usedSlots","itemsToRemove","filteredItems","invItem","IDsToRemove","things","thing","newAction","_getState$battle","battle","current","stageID","outcome","nextPhase","player","story","enemies","_getState","_groupBy","good","bad","calculateDamage","actorStats","targetStats","offenceArray","defenseArray","attackSum","attackAcc","defenseSum","defenseAcc","getActionEffect","round","getNextAction","enemyFaction","getPossibleEnemies","enemy","getTargetedEnemy","getRandomEnemy","calculateAction","getNextActor","battleStatusMiddleware","processBattle","nextAction","updateActors","actorsToCheck","deadActors","el","actorsToDelete","realityCheck","targetActorMiddleware","oldTargetActorState","_getState2","targetActorState","STAGES","1-1","title","side","text","reward","first","repeat","lost","1-2","1-3","1-4","2-1","game","gameStateMiddleware","battleCalculationMiddleware","_payload$progress","_stageID$split","_stageID$split2","chapterString","sectionString","progression","calculatedProgress","redux_middleware","coreMiddleware","gameMiddleware","persistedState","composeEnhancers","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","rootReducer","SimpleFrame","props","children","react_default","createElement","className","React","Children","child","Home","frame_SimpleFrame","role","aria-label","redux_first_router_link_dist_default","to","UI","POOP","RESOURCES","GEMS","MENU","MORE","CASINO","GAMBLE","SHOP","INVENTORY","MISC","QUESTION_MARK_1","QUESTION_MARK_2","EXCLAMATION_MARK_1","EXCLAMATION_MARK_2","SKIP","REPEAT","CHECK","MULTIPLY","DIVISION","PLUS","MINUS","CORRECT","WRONG","STATS","BELIEVE","PHYSICAL","MAGIC","ELEMENTS","AIR","FIRE","EARTH","WATER","connect","resourceElements","_UI$RESOURCES$type","DefaultFrame","other_TopBarDefault","getPreviousPage","previousPage","previousPageAction","Settings","frame_DefaultFrame","navigation_BackLink","UnitCard","inSquad","clickAdd","clickEdit","clickDelete","_getUnitData","handlerButton","label","handler","onClick","clickAddHandler","enabled","clickEditHandler","clickDeleteHandler","SquadMonitor","handleEdit","handleDelete","entity_UnitCard","defaultProps","getSquadFromRoster","squad","getSquadWithEquipment","itemList","getStagesFromProgression","progStages","_stage$ID$split","_stage$ID$split2","stageSelection","stageCount","stageTitle","StageBadge","entity_SquadMonitor","RosterMonitor","rosterUnits","handleAdd","getAvailableUnitsFromRoster","editUnit","addMember","deleteMember","entity_RosterMonitor","ItemCard","clickEquip","clickUnequip","clickEquipHandler","clickUnequipHandler","UnitDisplay","showEquipment","showStats","handleEquip","handleUnequip","dataBox","data","attributes","react","entity_ItemCard","InventoryDisplay","getAllEquipedItemIDs","getAvailableItems","allEquipedItemIDs","getInventory","equipItemWithTarget","addToEquipment","unequipItem","entity_UnitDisplay","entity_InventoryDisplay","fn","dispatchWithTarget","BattleFrame","ActorCard","isSelected","clickHandler","displayFactionBoard","selectedActor","unitClickHandler","entity_ActorCard","BattleStage","factions","goodGuys","badGuys","InteractiveActionBar","nextActors","index","selectedClass","BattleLogEntry","_ref2","formatedTimestamp","dayjs","format","targetFaction","targetName","Fragment","actorName","actorFaction","getActionTemplate","BattleLog","eventLog","_useState","useState","_useState2","scrollMaxed","setScrollMaxed","chatLogDOMNode","useRef","getCurrentScroll","chatLog","scrollHeight","clientHeight","height","scrollTop","maxScrollTop","useEffect","_getCurrentScroll","scrollToBottom","updateScrolledToMax","_getCurrentScroll2","isScrolledToMax","debouncedUserScroll","ref","onScroll","chat_BattleLogEntry","getStoryFromStage","progressAfterStory","storyStep","setStoryStep","storyTemplate","handleClick","_story$storyStep","showStory","getBattleData","currentTitle","activeTime","battleData","advance","advanceTurn","tickSubscription","timer","subscribe","unsubscribe","getFactions","getNextActors","flat","getNextActorsByRate","battleLog","initialiseStage","initBattle","clearStage","selectActor","stageData","stageHeaderClass","setStageHeaderClass","frame_BattleFrame","stage_BattleStage","atf_TurnCounter","atf_InteractiveActionBar","chat_BattleLog","other_StoryMode","getBattleResult","ADVICE","global","AdviceBox","listOfAdvice","adviceCount","currentAdviceIndex","setCurrentAdviceIndex","_useState3","_useState4","currentAdviceText","setCurrentAdviceText","increaseAdviceIndex","ITEMGROUPS","WEAPON","ARMOR","SET","REWARDS","HERO","createRewardBase","rewardString","_rewardString$split","_rewardString$split2","identifier","details","_REWARDS$identifier","getRewardData","addUnits","addToRoster","addItems","baseItems","addResources","addToResources","rewards","rewardItems","rewardData","detail","newHero","newItemSelection","newItem","itemPreview","result","_resultHeader","headerText","headerClass","resultHeader","other_RewardBox","other_AdviceBox","scenes","_scenes","scenes_Home","scenes_Settings","scenes_Adventure","scenes_Squad","scenes_UnitPage","scenes_Battle","scenes_BattleResult","gameOuterDOMNode","rootElement","document","documentElement","width","gameDimensions","setGameDimensions","adjustScreen","_getWindowDimensions","_window","innerWidth","innerHeight","getWindowDimensions","vw","vh","fontSize","style","debouncedResizeHandler","addEventListener","removeEventListener","gameWidth","gameHeight","locationType","homeLink","render","es","src_App_0","getElementById"],"mappings":"0yBAAaA,EAAU,YACVC,EAAS,GAAAC,OAAMF,EAAN,oBACTG,EAAa,GAAAD,OAAMF,EAAN,wBACbI,EAAc,GAAAF,OAAMF,EAAN,yBACdK,EAAU,GAAAH,OAAMF,EAAN,qBACVM,EAAS,GAAAJ,OAAMF,EAAN,oBACTO,EAAW,GAAAL,OAAMF,EAAN,sBACXQ,EAAkB,GAAAN,OAAMF,EAAN,6BAElBS,EAAW,iBAAO,CAC3BC,KAAMT,EACNU,KAAM,CACFC,UAAW,aAGNC,EAAe,iBAAO,CAC/BH,KAAMP,EACNQ,KAAM,CACFC,UAAW,aAGNE,EAAgB,iBAAO,CAChCJ,KAAMN,EACNO,KAAM,CACFC,UAAW,aAkBNG,EAAa,SAAAC,GAAK,MAAK,CAChCN,KAAMH,EACNU,QAAS,CACLC,YAAaF,GAEjBL,KAAM,CACFC,UAAW,aC9CbO,GAAUC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACXG,EAAmB,KADRF,OAAAC,EAAA,EAAAD,CAAAD,EAEXG,EAAuB,aAFZF,OAAAC,EAAA,EAAAD,CAAAD,EAGXG,EAAwB,cAHbF,OAAAC,EAAA,EAAAD,CAAAD,EAIXG,EAAoB,UAJTF,OAAAC,EAAA,EAAAD,CAAAD,EAKXG,EAAmB,iBALRF,OAAAC,EAAA,EAAAD,CAAAD,EAMXG,EAAqB,CAClBC,KAAM,uBACNC,aAAc,WACV,MAAO,kFATHJ,OAAAC,EAAA,EAAAD,CAAAD,EAYXG,EAA4B,iBAZjBH,GAeDD,MCTXO,wBAAcP,EAAY,CAAEQ,iBAAiB,IAJ7CC,YACAC,eACAC,aACAH,oBAGSI,EAAmBF,EACnBG,EAAiBF,EACjBG,EAAeN,EACfO,EAAkBN,kBCZlBO,EAAgB,GAAAjC,OADJ,cACI,qBAChBkC,EAAc,GAAAlC,OAFF,cAEE,mCACdmC,EAAuB,GAAAnC,OAHX,cAGW,4CCC9BoC,EAAe,CACjBC,KAAM,CAACtC,GACPuC,kBAAcC,GAoCHC,EAjCU,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,EAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC/CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKyB,EACD,OAAOG,EAGX,KAAKF,EAAgB,IACTG,EAAStB,EAATsB,KACMQ,EAAYJ,EAAlBJ,KAEFS,EAAeD,EAAQE,UAAU,SAAAC,GAAC,OAAIA,IAAMX,IAElD,IAAsB,IAAlBS,EAAqB,CACrB,IAAMG,EAAO,GAAAjD,OAAAmB,OAAA+B,EAAA,EAAA/B,CAAO0B,GAAP,CAAgBR,IAC7B,OAAOlB,OAAAgC,EAAA,EAAAhC,CAAA,GAAKiC,IAAUX,GAAtB,CAA8BJ,KAAMY,IAExC,IAAMI,EAAUlC,OAAA+B,EAAA,EAAA/B,CAAO0B,EAAQS,MAAM,EAAGR,EAAe,IACvD,OAAO3B,OAAAgC,EAAA,EAAAhC,CAAA,GAAKiC,IAAUX,GAAtB,CAA8BJ,KAAMgB,IAGxC,KAAKlB,EAAyB,IAClBG,EAAiBvB,EAAjBuB,aACR,OAAOnB,OAAAgC,EAAA,EAAAhC,CAAA,GAAKiC,IAAUX,GAAtB,CAA8BH,iBAGlC,QACI,OAAOG,ICpCNc,EAAW,GAAAvD,OADF,WACE,+BACXwD,EAAa,GAAAxD,OAFJ,WAEI,2BCKbyD,EAAiB,WAC1B,IACMC,GADO,IAAIC,MACCC,UACZC,EAVoB,SAAClB,GAAW,IAC9BmB,EAAkBC,KAAlBD,OAAQE,EAAUD,KAAVC,MACVC,EAAGF,KAAAG,IAAG,GAAOvB,EAAS,GACtBwB,EAAY,EAANF,EACZ,OAAOD,EAAMC,EAAMH,IAAWK,GAMTC,CAAe,GACpC,SAAApE,OAAU0D,EAAV,KAAA1D,OAAkB+D,KAAKC,MAAMN,EAAOG,KAG3BQ,EAAU,SAACC,EAAaC,GAAd,OAA2BD,EAAYE,OAAO,SAACC,EAAKC,GACvE,IAAMC,EAAMD,EAAIH,GAKhB,OAJKE,EAAIE,KACLF,EAAIE,GAAO,IAEfF,EAAIE,GAAKC,KAAKF,GACPD,GACR,KAEUI,EAAS,SAACC,EAAKC,GAMxB,MAAO,GAAG/E,OAAO8E,GAAKE,KALN,SAACC,EAAGC,GAChB,OAAID,EAAEF,GAAaG,EAAEH,IAAsB,EACvCE,EAAEF,GAAaG,EAAEH,GAAqB,EACnC,KA2BFI,EAAe,SAACC,EAAMC,GAC/B,IAAMC,EAAa,GACbC,EAASpE,OAAAgC,EAAA,EAAAhC,CAAA,GACRiE,EACAC,GAyBP,OAvBAlE,OAAOqE,KAAKD,GAAWE,IAAI,SAACd,GACxB,IAAMe,EAAWN,EAAKT,GAChBgB,EAAWN,EAAKV,GAChBiB,SAA0BF,WAAoBC,EAC9CE,EAA0C,qBAAbH,EAC7BI,EAA0C,qBAAbH,EAEnC,OAAiB,IAAbA,IAIAL,EAAWX,GADXkB,EACkBF,EAElBG,EACkBJ,EAElBE,EACkBD,EAvCL,SAACI,EAAWC,GACjC,cAAeD,GACX,IAAK,SACD,OATS,SAACE,EAAMC,GAGxB,OAFgBD,GAAQ,IACRC,GAAQ,IAOGC,WAAZ,EAAAhF,OAAA+B,EAAA,EAAA/B,CAAgB6E,IAE3B,IAAK,SACD,OAPS,SAACI,EAAOC,GAAR,OAAkBA,GAASD,GAOjBD,WAAZ,EAAAhF,OAAA+B,EAAA,EAAA/B,CAAgB6E,IAE3B,IAAK,SACD,OAAOb,EAAYgB,WAAZ,EAAAhF,OAAA+B,EAAA,EAAA/B,CAAgB6E,IAE3B,QACI,QA6BkBM,CAAiBf,EAAUZ,GAAM,CAACe,EAAUC,KAE3D,KAEJL,GCkCIiB,EArHD,CACVC,MAAO,CACHC,GAAI,QACJC,KAAM,QACNC,OAAQ,CAAEC,KAAM,eAAMC,OAAQ,gBAC9BC,MAAO,CACHC,GAAI,IAAKC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAGhDC,IAAK,CACDV,GAAI,MACJC,KAAM,MACNC,OAAQ,CAAEC,KAAM,iCAASC,OAAQ,kCACjCC,MAAO,CACHC,GAAI,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAG/CE,MAAO,CACHX,GAAI,QACJC,KAAM,QACNC,OAAQ,CACJC,KAAM,iCAASC,OAAQ,kCAE3BC,MAAO,CACHC,GAAI,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAG/CG,IAAK,CACDZ,GAAI,MACJC,KAAM,MACNC,OAAQ,CAAEC,KAAM,eAAMC,OAAQ,gBAC9BC,MAAO,CACHC,GAAI,IAAKC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAGhDI,OAAQ,CACJb,GAAI,SACJC,KAAM,SACNC,OAAQ,CAAEC,KAAM,eAAMC,OAAQ,gBAC9BC,MAAO,CACHC,GAAI,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAG/CK,MAAO,CACHd,GAAI,QACJC,KAAM,QACNC,OAAQ,CACJC,KAAM,eAAMC,OAAQ,gBAExBC,MAAO,CACHC,GAAI,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,IAE3CM,OAAQ,CACJC,QAAQ,IAGhBC,SAAU,CACNjB,GAAI,WACJC,KAAM,WACNC,OAAQ,CACJC,KAAM,eAAMC,OAAQ,gBAExBC,MAAO,CACHC,GAAI,GAAIC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,IAE3CM,OAAQ,CACJC,QAAQ,IAGhBE,OAAQ,CACJlB,GAAI,SACJC,KAAM,WACNC,OAAQ,CACJC,KAAM,eAAMC,OAAQ,gBAExBC,MAAO,CACHC,GAAI,KAAMC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,MAGjDU,QAAS,CACLnB,GAAI,UACJC,KAAM,UACNC,OAAQ,CACJC,KAAM,iCAASC,OAAQ,kCAE3BC,MAAO,CACHC,GAAI,IAAKC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,IAE5CM,OAAQ,CACJC,QAAQ,IAGhBI,MAAO,CACHpB,GAAI,QACJC,KAAM,QACNC,OAAQ,CACJC,KAAM,iCAASC,OAAQ,kCAE3BC,MAAO,CACHC,GAAI,IAAKC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,KAGhDY,OAAQ,CACJrB,GAAI,SACJC,KAAM,SACNC,OAAQ,CACJC,KAAM,iCAASC,OAAQ,kCAE3BC,MAAO,CACHC,GAAI,IAAKC,OAAQ,GAAIC,QAAS,GAAIC,KAAM,MAGhDM,OAAQ,CACJC,QAAQ,ICmLDM,EApSD,CACVC,UAAW,CACPvB,GAAI,YACJC,KAAM,UACNlG,KAAM,QACNyH,KAAM,eACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,OACNC,OAAQ,CACJ,CACIC,SAAU,WACVC,QAAS,WACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBC,UAAW,CACPrC,GAAI,MACJC,KAAM,cACNlG,KAAM,QACNyH,KAAM,2BACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,OACNC,OAAQ,CACJ,CACIC,SAAU,WACVC,QAAS,WACTC,KAAM,CACFC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,KAGX,CACIP,SAAU,UACVC,QAAS,OACTC,KAAM,CACFC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,MAIf/B,MAAO,CACHI,MAAO,KAGf6B,SAAU,CACNtC,GAAI,WACJC,KAAM,SACNlG,KAAM,OACNyH,KAAM,eACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,OACNC,OAAQ,CACJ,CACIC,SAAU,WACVC,QAAS,QACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBG,WAAY,CACRvC,GAAI,aACJC,KAAM,gBACNlG,KAAM,SACNyH,KAAM,eACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,OACNC,OAAQ,CACJ,CACIC,SAAU,WACVC,QAAS,WACTC,KAAM,CACFC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBI,QAAS,CACLxC,GAAI,UACJC,KAAM,aACNlG,KAAM,MACNyH,KAAM,eACNC,MAAO,IACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,YACNC,OAAQ,CACJ,CACIC,SAAU,WACVC,QAAS,WACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBK,WAAY,CACRzC,GAAI,aACJC,KAAM,gBACNlG,KAAM,SACNyH,KAAM,eACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,UACNe,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBO,WAAY,CACR3C,GAAI,aACJC,KAAM,eACNlG,KAAM,SACNyH,KAAM,2BACNC,MAAO,GACPhB,KAAM,GACNiB,MAAO,EACPC,KAAM,UACNe,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,KAGX,CACIP,SAAU,UACVC,QAAS,QACTC,KAAM,CACFC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,MAIf/B,MAAO,CACHC,GAAI,KAGZsC,UAAW,CACP5C,GAAI,YACJC,KAAM,mBACNlG,KAAM,oBACN4H,KAAM,QACNH,KAAM,eACNkB,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBS,aAAc,CACV7C,GAAI,eACJC,KAAM,mBACNlG,KAAM,mBACN4H,KAAM,OACNH,KAAM,eACNkB,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBU,UAAW,CACP9C,GAAI,YACJC,KAAM,mBACNlG,KAAM,mBACN4H,KAAM,OACNH,KAAM,eACNkB,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBW,WAAY,CACR/C,GAAI,aACJC,KAAM,uBACNlG,KAAM,oBACN4H,KAAM,QACNH,KAAM,eACNkB,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,OAKnBY,WAAY,CACRhD,GAAI,aACJC,KAAM,oBACNlG,KAAM,qBACN4H,KAAM,OACNH,KAAM,SACNkB,WAAY,CACR,CACIb,SAAU,WACVC,QAAS,MACTC,KAAM,CACFC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,QC7QRa,EAbQ,SAACC,EAAYnB,EAAMoB,EAAWlD,GAA9B,MAAwC,CAC3DD,GAAE,QAAAzG,OAAUyD,KACZoG,OAAQF,EACRnB,KAAMA,GAAQ,EACdoB,UAAWA,QAAarH,EACxBmE,KAAMA,GAAQqB,EAAM4B,GAAYjD,OAQrBgD,GALK,SAACI,GAAa,IACtBD,EAAWC,EAAXD,OACR,OAAO1I,OAAO4I,OAAO,GAAIhC,EAAM8B,GAASC,ICTpCE,GAAgBN,GAWlBO,GAAkB,SAACC,EAAaC,GAAd,OAAwBA,EAAM1E,IAAI,SAAC2E,GAEvD,MAAO,CAAE9B,SAD2B8B,EAA5B9B,SACWC,QADiB6B,EAAlB7B,QACU8B,MADQD,EAAT5B,KACa0B,OAGtCI,GAAyB,SAACC,EAASC,GAAS,IAE1ChC,EACAgC,EADAhC,KAAMH,EACNmC,EADMnC,OAAQc,EACdqB,EADcrB,WAAYrC,EAC1B0D,EAD0B1D,MAK9B,OAHIuB,GAAUkC,EAAQlC,OAAOzD,KAAKqF,GAAgBzB,EAAMH,IACpDc,GAAcoB,EAAQpB,WAAWvE,KAAKqF,GAAgBzB,EAAMW,IAC5DrC,GAASyD,EAAQzD,MAAMlC,KAAKkC,GACzByD,GA8DIE,GAnFQ,SAACC,EAASlK,EAAMkG,EAAMiE,EAAQC,GAA9B,MAAwC,CAC3DnE,GAAE,QAAAzG,OAAUyD,KACZiD,OACAlG,OACAmK,SACAD,UACAE,SA6EWH,GA7BK,SAACI,GAAa,IAE1BrK,EACAqK,EADArK,KAAMmK,EACNE,EADMF,OAAQC,EACdC,EADcD,KAAME,EACpBD,EADoBC,UAElBC,EAAOxE,EAAM/F,GAAMkG,KACnBC,EAASJ,EAAM/F,GAAMmG,OAAOgE,GALJK,EA9BH,SAACC,GAAoC,IAAzBL,EAAyBlI,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAlB,GAAIoI,EAAcpI,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAAA2I,EAC/BN,EAAzB9D,MAAOqE,OADiD,IAAAD,EACtC,GADsCA,EAE1DE,EAAcD,EAASxI,OAASwC,EAAa8F,EAAWE,GAAYF,EAE1E,IAAKH,GAAkC,IAArBA,EAAUnI,OACxB,MAAO,CAAEyI,eAGb,IACMC,EADQP,EAAUrF,IAAI,SAAA+E,GAAI,OAAIR,GAAYQ,KACdhG,OAC9B8F,GACA,CAAEjC,OAAQ,GAAIc,WAAY,GAAIrC,MAAO,KAGnCwE,EAAe,SAACC,EAAaC,GAAd,OAA0BrG,EAAaoG,EAAaC,IAEnEC,EAAiBJ,EAAoBhD,OAAO7D,OAAO8G,EAAc,IACjEI,EAAiBL,EAAoBlC,WAAW3E,OAAO8G,EAAc,IACrEK,EAAeN,EAAoBvE,MAAMtC,OAAO8G,EAAc,IAIpE,MAAO,CACHF,cACAQ,cAJkBzG,EAAaiG,EAAaO,GAK5CF,iBACAC,kBAgBAG,CANctF,EAAM/F,GAAMsG,MAMQ8D,EAAME,GAJxCM,EAR0BJ,EAQ1BI,YACAQ,EAT0BZ,EAS1BY,cACAH,EAV0BT,EAU1BS,eACAC,EAX0BV,EAW1BU,eAEEI,EAAalB,GAAQA,EAAKkB,WAAcV,EAAYlE,KAE1D,OAAO/F,OAAAgC,EAAA,EAAAhC,CAAA,GACA0J,EADP,CAEIlE,SACAoE,OACAjE,MAAO8E,GAAiBR,EACxBH,UAAWG,EACX5D,OAAQjB,EAAM/F,GAAMgH,QAAU,GAC9BiE,iBACAC,iBACAI,YACAC,iBAAkBD,KClFlBE,GAAmBvB,GA6BZwB,GA3BA,CACXC,MAAM/K,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMC,MAAMC,GAAI,OAAQ,OAAQ,CAAEqF,UAAW,MAE3EM,MAAMjL,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMC,MAAMC,GAAI,OAAQ,SAAU,CAAEqF,UAAW,GAAIhF,MAAO,CAAEC,IAAK,GAAIC,OAAQ,GAAIE,MAAO,MAEtHmF,MAAMlL,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMY,IAAIV,GAAI,SAAU,OAAQ,CAAEqF,UAAW,MAE3EQ,MAAMnL,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMY,IAAIV,GAAI,QAAS,SAAU,CAAEqF,UAAW,MAE5ES,MAAMpL,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMa,MAAMX,GAAI,QAAS,OAAQ,CAAEqF,UAAW,KAE5EU,MAAMrL,OAAAgC,EAAA,EAAAhC,CAAA,CACFgL,SAAU,SACPH,GAAe,OAAQzF,EAAMa,MAAMX,GAAI,OAAQ,SAAU,CAAEqF,UAAW,MCxB3E1J,GAAe,GACfqK,GAAgB,CAClBR,GAAOC,OAGLQ,GAAkB,SAAAC,GAAS,OAC7BA,EAAUlH,IAAI,SAAAmH,GAAI,OAAAzL,OAAAC,EAAA,EAAAD,CAAA,GACbyL,EAAKnG,GAAKmG,MAwBJC,GApBO,WAAkC,IAAjCpK,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC5CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAK+C,EACD,IAAMuJ,EAASJ,GAAgBD,IAC/B,OAAOtL,OAAO4I,OAAP5D,MAAAhF,OAAM,CAAQ,IAARnB,OAAAmB,OAAA+B,EAAA,EAAA/B,CAAe2L,KAEhC,KAAKtJ,EAAe,IACRmJ,EAAc5L,EAAd4L,UACFI,EAAWL,GAAgBC,GACjC,OAAOxL,OAAO4I,OAAP5D,MAAAhF,OAAM,CAAQiC,IAAUX,IAAlBzC,OAAAmB,OAAA+B,EAAA,EAAA/B,CAA6B4L,KAG9C,QACI,OAAOtK,IC7BNuK,GAAkB,GAAAhN,OADN,cACM,iCAClBiN,GAAc,GAAAjN,OAFF,cAEE,oCCErBoC,GAAe,CACjB8K,KAAM,EACNC,MAAO,GAELC,GAAmB,CACrBF,KAAM,IACNC,MAAO,GAsBIE,GAnBU,WAAkC,IAAjC5K,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC/CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKyM,GACD,OAAOG,GAGX,KAAKJ,GAAoB,IACbM,EAAcvM,EAAduM,UACR,OAAOnI,EAAa/B,IAAUX,GAAQ6K,GAG1C,QACI,OAAO7K,IC1BN8K,GAAmB,GAAAvN,OADP,cACO,2BACnBwN,GAAsB,GAAAxN,OAFV,cAEU,gCACtByN,GAAqB,GAAAzN,OAHT,cAGS,6BACrB0N,GAAc,GAAA1N,OAJF,cAIE,kCCEnB2N,GAAmBjE,EAErBtH,GAAe,GACfwL,GAAmB,CACrBD,GAAe,eA+BJd,GA5BO,WAAkC,IAAjCpK,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC5CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAK+M,GAAqB,IAEhBM,EADY9M,EAAV+M,MACerI,IAAI,SAAA+E,GAAI,OAAKmD,GAAenD,KACnD,SAAAxK,OAAAmB,OAAA+B,EAAA,EAAA/B,CAAWiC,IAAUX,IAArBtB,OAAA+B,EAAA,EAAA/B,CAAgC0M,IAGpC,KAAKL,GAIL,KAAKC,GACD,OAAOhL,EAGX,KAAKiL,GACD,OAAOE,GAGX,QACI,OAAOnL,ICnCNsL,GAAiB,GAAA/N,OADT,UACS,sBACjBgO,GAAoB,GAAAhO,OAFZ,UAEY,yBAEpBiO,GAAkB,SAAAC,GAAK,MAAK,CACrC1N,KAAMuN,GACNhN,QAAS,CACLmN,SAEJzN,KAAM,CACF0N,UAAW,WCPb/L,GAAe,GAyBNgM,GAvBM,WAAkC,IAAjC3L,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC3CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKuN,GAAmB,IACZG,EAAUnN,EAAVmN,MACR,SAAAlO,OAAAmB,OAAA+B,EAAA,EAAA/B,CACOiC,IAAUX,IADjBtB,OAAA+B,EAAA,EAAA/B,CAEO+M,IAIX,KAAKF,GAAsB,IACfE,EAAUnN,EAAVmN,MACR,OAAO9K,IAAUX,GAAO4L,OAAO,SAAAC,GAAM,OAAKJ,EAAMK,SAASD,KAG7D,QACI,OAAO7L,ICtBN+L,GAAgB,GAAAxO,OADJ,cACI,gBAChByO,GAAqB,GAAAzO,OAFT,cAES,kBAcrB0O,GAAsB,SAAAZ,GAAK,MAAK,CACzCtN,KAAMiO,GACN1N,QAAS,CACL+M,SAEJrN,KAAM,CACF0N,UAAW,YACXQ,eAAgB,YClBlBvM,GAAe,GAoCNyK,GAlCO,WAAkC,IAAjCpK,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC5CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKgO,GAAkB,IACXV,EAAkB/M,EAAlB+M,MAAOc,EAAW7N,EAAX6N,OACTC,EAAef,EAAMrI,IAAI,SAAC+E,GAAS,IAC7BsE,EAAiBtE,EAAjBsE,OAAQ1G,EAASoC,EAATpC,KAChB,OAAOjH,OAAAC,EAAA,EAAAD,CAAA,GACF2N,EAAS,CACNF,SACAE,SACA1G,WAIZ,OAAOjH,OAAO4I,OAAP5D,MAAAhF,OAAM,CAAQiC,IAAUX,IAAlBzC,OAAAmB,OAAA+B,EAAA,EAAA/B,CAA6B0N,KAG9C,KAAKJ,GAAuB,IAChBX,EAAU/M,EAAV+M,MACFiB,EAAW3L,IAAUX,GAI3B,OAFAqL,EAAMrI,IAAI,SAAA2E,GAAK,cAAW2E,EAAS3E,KAE5B2E,EAGX,QACI,OAAOtM,ICpCNuM,GAAQ,UACRC,GAAU,GAAAjP,OAAMgP,GAAN,eACVE,GAAa,GAAAlP,OAAMgP,GAAN,kBACbG,GAAa,GAAAnP,OAAMgP,GAAN,kBACbI,GAAW,GAAApP,OAAMgP,GAAN,8BACXK,GAAkB,GAAArP,OAAMgP,GAAN,4BAClBM,GAAY,GAAAtP,OAAMgP,GAAN,uBAEZO,GAAY,SAAAC,GAAM,MAAK,CAChChP,KAAMyO,GACNlO,QAAS,CACLyO,YCCAC,GAAgBhF,GAClBrI,GAAe,GAwDNsN,GAtDM,WAAkC,IAAjCjN,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC3CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKyO,GAAY,IAEPU,EADa5O,EAAXyO,OACiB/J,IAAI,SAAAoF,GAAQ,OAAA1J,OAAAgC,EAAA,EAAAhC,CAAA,GAAUsO,GAAY5E,MAC3D,SAAA7K,OAAAmB,OAAA+B,EAAA,EAAA/B,CACOiC,IAAUX,IADjBtB,OAAA+B,EAAA,EAAA/B,CAEOwO,IAIX,KAAKT,GAAe,IACRU,EAAY7O,EAAZ6O,QACR,OAAOxM,IAAUX,GAAO4L,OAAO,SAAAwB,GAAK,OAAKD,EAAQrB,SAASsB,EAAMpJ,MAGpE,KAAK0I,GAAe,IACRW,EAA0B/O,EAA1B+O,OAAQC,EAAkBhP,EAAlBgP,cAEhB,OAAO3M,IAAUX,GAAOgD,IAAI,SAACoK,GACzB,GAAIA,EAAMpJ,KAAOqJ,EAAOrJ,GAAI,CACxB,IAAMuJ,EAAY7K,EAAa0K,EAAMrI,OAAQuI,GAC7C,OAAO5O,OAAAgC,EAAA,EAAAhC,CAAA,GAAK0O,EAAZ,CAAmBrI,OAAQwI,IAE/B,OAAOH,IAIf,KAAKT,GAAa,IACNU,EAAkB/O,EAAlB+O,OAAQG,EAAUlP,EAAVkP,MAEhB,OAAOxN,EAAMgD,IAAI,SAAAoK,GAAK,OAClBA,EAAMpJ,KAAOqJ,EAAb3O,OAAAgC,EAAA,EAAAhC,CAAA,GACW0O,EADX,CACkB/D,UAAW+D,EAAM/D,UAAYmE,IACzCJ,IAId,KAAKR,GACD,OAAOjM,IAAUX,GAAOgD,IAAI,SAAAoK,GAAK,OAAA1O,OAAAgC,EAAA,EAAAhC,CAAA,GAAU0O,EAAV,CAAiB/D,UAAW+D,EAAM9D,qBAGvE,KAAKuD,GACD,OAAOlN,GAGX,QACI,OAAOK,IChENyN,GAAM,gBACNC,GAAY,GAAAnQ,OAAMkQ,GAAN,iBACZE,GAAS,GAAApQ,OAAMkQ,GAAN,qBCAhB9N,GAAe,CACjBiO,MAAO,EACPC,MAAO,EACP9I,OAAQ,WA2BG+I,GAxBW,WAAkC,IAAjC9N,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAChDxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAK2P,GAAc,IACPE,EAAS5N,EAAT4N,KACAC,EAASvP,EAATuP,KACR,OAAOnP,OAAAgC,EAAA,EAAAhC,CAAA,GACAsB,EADP,CAEI4N,KAAMA,EAAO,EACbC,SAIR,KAAKF,GACD,OAAOhO,GAGX,QACI,OAAOK,IC1BN+N,GAAW,GAAAxQ,OADF,WACE,4BACXyQ,GAAe,GAAAzQ,OAFN,WAEM,iCACf0Q,GAAiB,GAAA1Q,OAHR,WAGQ,8BACjB2Q,GAAY,GAAA3Q,OAJH,WAIG,uBAkBZ4Q,GAAiB,iBAAO,CACjCpQ,KAAMiQ,GACN1P,QAAS,GACTN,KAAM,CACFO,YAAa,cCrBfoB,GAAe,GAoDNyO,GAlDO,WAAkC,IAAjCpO,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC5CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKgQ,GAED,MAAO,CACH1P,MAF0BC,EAAtBD,MAGJgQ,WAH0B/P,EAAf+P,WAIXC,YAAa,EACbC,cAAe,EACfC,cAAe,OACfC,cAAe,IAIvB,KAAKT,GAAiB,IACVU,EAAwBpQ,EAAxBoQ,KAAMC,EAAkBrQ,EAAlBqQ,MAAO5J,EAAWzG,EAAXyG,OACrB,OAAOrG,OAAO4I,OACV,GACA3G,IAAUX,GACV,CACIsO,YAAaI,EACbH,aAAcI,EACdH,cAAezJ,IAK3B,KAAKkJ,GAAmB,IACZW,EAAWtQ,EAAXsQ,OACR,OAAOlQ,OAAO4I,OACV,GACA3G,IAAUX,GACV,CACIyO,cAAeG,IAK3B,KAAKV,GACD,OAAOvO,GAGX,QACI,OAAOK,ICjDN6O,GAAU,GAAAtR,OADG,eACH,eACVuR,GAAS,GAAAvR,OAFI,eAEJ,qBAETwR,GAAY,SAAAC,GAAA,IAAG5B,EAAH4B,EAAG5B,MAAOjN,EAAV6O,EAAU7O,OAAV,MAAwB,CAC7CpC,KAAM8Q,GACNvQ,QAAS,CACL8O,QACAjN,SACA8O,MAAK,OAAA1R,OAASyD,KACdkO,UAAWhO,KAAKiO,SCTlBxP,GAAe,GAmBNyO,GAjBO,WAAkC,IAAjCpO,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EAC5CxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAK8Q,GACD,SAAAtR,OAAAmB,OAAA+B,EAAA,EAAA/B,CAAWiC,IAAUX,IAArB,CAA6B1B,IAEjC,KAAKwQ,GACD,OAAOnP,GAGX,QACI,OAAOK,IChBNoP,GAAY,GAAA7R,OADG,iBACH,6BACZ8R,GAAoB,GAAA9R,OAFL,iBAEK,sCAEpB+R,GAAoB,SAAAlC,GAAK,MAAK,CACvCrP,KAAMqR,GACN9Q,QAAS,CACL8O,SAEJpP,KAAM,CACFuR,YAAa,eCSNC,GAfY,WAAkC,IAAjCxP,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAFxC,GAE6BE,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EACjDxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAKqR,GAED,OADkB9Q,EAAV8O,MAIZ,QACI,OAAOpN,YCbNyP,GAAe,GAAAlS,OADJ,aACI,2BAEfmS,GAAgB,SAAAC,GAAQ,MAAK,CACtC5R,KAAM0R,GACNnR,QAAS,CACLqR,YAEJ3R,KAAM,CACF0N,UAAW,cACXkE,cAAe,UCPjBjQ,GAAe,CACjBkQ,UAAW,MACXC,OAAQ,CACJ9J,EAAG,CACCA,EAAG,SAsCA+J,GAjCY,WAAkC,IAAjC/P,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAAcQ,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAH,EACjDxB,EAAY6B,EAAZ7B,QAER,OAAQ6B,EAAOpC,MACX,KAAK0R,GAAiB,IAEdO,EACA1R,EADA0R,QAASC,EACT3R,EADS2R,QAASlL,EAClBzG,EADkByG,OAAmBmL,EACrC5R,EAD0BuR,UAEtBC,EAAoC9P,EAApC8P,OAAmBK,EAAiBnQ,EAA5B6P,UACVO,EAAgBzP,IAAUmP,GAGhC,GAFAM,EAAcJ,GAASC,GAAWlL,EAE9BmL,GAAiC,kBAAjBA,EAAkC,KAAAG,EACHH,EAAaI,MAAM,KADhBC,EAAA7R,OAAA8R,GAAA,EAAA9R,CAAA2R,EAAA,GAC3CI,EAD2CF,EAAA,GACxBG,EADwBH,EAAA,GAE5CI,EAAcC,SAASH,EAAmB,IAC1CI,EAAcD,SAASF,EAAmB,IAChDN,EAAcO,GAAeP,EAAcO,IAAgB,GAC3DP,EAAcO,GAAaE,GAAe,MAI9C,MAAO,CACHhB,UAHcK,GAAgBC,EAI9BL,OAAQM,GAIhB,QACI,OAAOpQ,ICtCJ8Q,GAAA,eAAC9Q,EAADC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAS,GAAIE,EAAbF,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAsB,GAAtB,OAA8BE,EAAOpC,OAASH,EAAcuC,EAAO7B,QAAQC,YAAcyB,GCAzF+Q,GAAA,eAAC/Q,EAADC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAS,GAAIE,EAAbF,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAsB,GAAtB,OAA8BE,EAAOpC,OAASJ,EAAYwC,EAAO7B,QAAQ6N,OAASnM,GCDpFgR,GAAS,GAAAzT,OADF,SACE,oCCMP0T,GAPE,CACbC,QAAS,IACTC,OAAQ,aACRC,OAAQ,iBACRnN,KAAM,kBCDJtE,GAAe,CACjBoF,QAAQ,EACRmM,SAAU,GAkBCG,GAfS,WAAkC,IAAjCrR,EAAiCC,UAAAC,OAAA,QAAAJ,IAAAG,UAAA,GAAAA,UAAA,GAAzBN,GAC7B,QADsDM,UAAAC,OAAA,EAAAD,UAAA,QAAAH,GACvC/B,MACX,KAAKiT,GACD,MAAO,CACHjM,QAAQ,EACRmM,QAASD,GAASC,SAI1B,QACI,OAAOlR,ICZJsR,eAAgB5S,OAAAgC,EAAA,EAAAhC,CAAA,CAC3B6S,gBAAiBF,IACdG,EACAC,EAHuB,CAI1BC,SAAUnS,KCwBCoS,GA1BY,SAAA3C,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAUC,EAAb7C,EAAa6C,SAAb,OAA4B,SAAAC,GAAI,OAAI,SAAC3R,GAAW,I1BJxC0K,E0BKvBkH,GAAmB5R,EAAOnC,MAAQ,IAAlC+T,eAD+DC,EAEtBH,IAAzCN,gBAAmBxM,EAF4CiN,EAE5CjN,OAAQmM,EAFoCc,EAEpCd,QAEnC,OAAIa,EACOD,EAAK3R,GAGZ4E,GAAWmM,IAAYD,GAASC,QACzBY,EAAK3R,GAGZ4E,GAAWmM,EAAUD,GAASC,QAIvBY,EAAK3R,IAGhByR,EJxBiC,CACjC7T,KAAMiT,GACN1S,QAAS,GACTN,KAAM,CACF0N,UAAW,kBACXqG,gBAAgB,KIoBpBH,ExBSsC,CACtC7T,KAAMkN,GACN3M,QAAS,GACTN,KAAM,CACF0N,UAAW,YACXqG,gBAAgB,KwBbpBH,ElCzBmC,CACnC7T,KAAM+C,EACNxC,QAAS,GACTN,KAAM,CACF0N,UAAW,SACXuG,YAAa,qBkCqBjBL,E1B1B6C,CAC7C7T,KAAMyM,GACNlM,QAAS,CACLuM,aAEJ7M,KAAM,CACF0N,UAAW,oB0BqBfkG,EAAS9T,SC/BPoU,GAAY,GCAZC,GAAU,GCAHC,GAAY,WACrB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,SCHOC,GAAA,CHHY,kBAAM,SAAAb,GAAI,OAAI,SAAC3R,GACtC,IAAMc,EAAOd,EAAOnC,MAAQmC,EAAOnC,KAAK4U,SAExC,OAAK3R,GAKDiR,GAAU/R,EAAOpC,QAIrBmU,GAAU/R,EAAOpC,OAAQ,EAEzB8U,WAAW,WACPX,GAAU/R,EAAOpC,OAAQ,GAC1BkD,GAEI6Q,EAAK3R,IAdD2R,EAAK3R,MCJO,kBAAM,SAAA2R,GAAI,OAAI,SAAC3R,GAAW,IACzC2S,GAAa3S,EAAOnC,MAAQ,IAA5B8U,SAEHA,GAKDX,GAAQhS,EAAOpC,OACfgV,aAAaZ,GAAQhS,EAAOpC,OAGhCoU,GAAQhS,EAAOpC,MAAQ8U,WAAW,kBACvBV,GAAQhS,EAAOpC,MACtB+T,EAAK3R,IACN2S,IAXChB,EAAK3R,MGLa,kBAAM,SAAA2R,GAAI,OAAI,SAAC3R,GAClBA,EAAOnC,MAAQmC,EAAOnC,KAAKgV,SAG1CC,QAAQhS,KAAR,eAAA1D,OAA4B4C,EAAOpC,OACnC+T,EAAK3R,GACL8S,QAAQC,QAAR,eAAA3V,OAA+B4C,EAAOpC,QAEtC+T,EAAK3R,MCNkB,SAAAgT,GAAK,OAAI,SAAArB,GAAI,OAAI,SAAC3R,GAC7C,IAAMuL,EAAYvL,EAAOnC,MAAQmC,EAAOnC,KAAK0N,UAE7C,IAAKA,EACD,OAAOoG,EAAK3R,GAGhB,IAAMiT,EAAgBD,EAAMtB,WAAWnG,GACvCoG,EAAK3R,GACL,IAAMkT,EAAYF,EAAMtB,WAAWnG,GACnC,GAAI2H,IAAcD,EAAe,CAC7B,IAAME,EAAoBlB,MHFT,SAACpS,GACtB,IACI,IAAMqS,EAAkBG,KAAKe,UAAUvT,GACvCsS,aAAakB,QAAQ,QAASnB,GAChC,MAAAoB,KGDEC,CAAUhV,OAAAgC,EAAA,EAAAhC,CAAA,GACH4U,EADE5U,OAAAC,EAAA,EAAAD,CAAA,GAEJgN,EAAY2H,UCoBVM,GAlCgB,SAAA3E,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAUC,EAAb7C,EAAa6C,SAAb,OAA4B,SAAAC,GAAI,OAAI,SAAC3R,GAAW,IACnEpC,EAAkBoC,EAAlBpC,KAAMO,EAAY6B,EAAZ7B,QAERsV,EAAoB,WACtBX,QAAQY,IAAI,yBACZjC,EAAShT,MAGb,OAAQb,GACJ,KAAKa,EAAkB,IACXuN,EAAW7N,EAAX6N,OAER,IADmB0F,IAAXxH,OACI8B,GAAS,CACjByH,IACA,MAEJ9B,EAAK3R,GACL,MAEJ,KAAKvB,EAED,IADwBiT,IAAhBtT,YACU,CACdqV,IACA,MAEJ9B,EAAK3R,GACL,MAEJ,QACI2R,EAAK3R,OCRF2T,GAtBU,SAAA9E,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAH,OAAkB,SAAAE,GAAI,OAAI,SAAC3R,GAAW,IACnDpC,EAAeoC,EAAfpC,KACAE,GADekC,EAATnC,MACgB,IAAtBC,UAER,GAAKA,EAKL,OAAQA,GACJ,IAAK,UACD2T,E5CHyB,CACjC7T,KAAM0B,EACNnB,QAAS,CACLsB,K4CA0B7B,G5CE9BC,KAAM,CACF0N,UAAW,e4CFPoG,EAAK3R,GACL,MAGJ,QACI2R,EAAK3R,QAZT2R,EAAK3R,MCQE4T,GAZU,SAAA/E,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAUC,EAAb7C,EAAa6C,SAAb,OAA4B,SAAAC,GAAI,OAAI,SAAC3R,GAAW,IAC7D8R,GAAgB9R,EAAOnC,MAAQ,IAA/BiU,YAERH,EAAK3R,GACA8R,GAGe,oBAAhBA,GACAL,EAASpG,GAAgB9M,OAAA+B,EAAA,EAAA/B,CAAIA,OAAOqE,KAAK8O,IAAWxH,sBCLtD2J,GAAoBC,aAJR,SAAAjU,GAAK,OAAIA,EAAMmM,QACZ,SAAAnM,GAAK,OAAIA,EAAMqI,WAMhC,SAAC8D,EAAQ9D,GAAT,OACI3J,OAAO6E,OAAO8E,GAAWtG,OAAO,SAACM,EAAKsF,GAElC,OADIA,EAAMwE,SAAWA,GAAU9J,EAAIF,KAAKwF,EAAM0E,QACvChK,GACR,MAUI6R,GANSD,aACpBD,GAdiB,SAAAhU,GAAK,OAAIA,EAAMmU,WAgBhC,SAACC,EAAiBD,GAAlB,OAAgCA,EAAUvI,OAAO,SAAA7D,GAAI,OAAIqM,EAAgBtI,SAAS/D,EAAK/D,QCbnFuD,GAAgBN,GA6DToN,GA3Da,SAAArF,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAUC,EAAb7C,EAAa6C,SAAb,OAA4B,SAAAC,GAAI,OAAI,SAAC3R,GAAW,IAChE7B,EAAkB6B,EAAlB7B,QACA4N,GADkB/L,EAATnC,MACkB,IAA3BkO,eAER,IAAKA,EACD,OAAO4F,EAAK3R,GAYhB,OAAQ+L,GACJ,IAAK,MAAO,IACAb,EAAkB/M,EAAlB+M,MAAOc,EAAW7N,EAAX6N,OAETmI,EADmBC,GAAa1C,KACA7O,IAAI,SAAA+E,GAAI,OAAKR,GAAYQ,KACzDyM,EAAY5S,EAAQ0S,EAAc,QAElCG,EAAgB,GAChBC,EAAgBrJ,EAAMrI,IAAI,SAACqJ,GAC7B,IAGQ1G,EAHkB4B,GAAYsK,IAAWsC,UAAUvI,OACvD,SAAA+I,GAAO,OAAIA,EAAQ3Q,KAAOqI,IAC5B,IACM1G,KAKR,OAJI6O,EAAU7O,IACV8O,EAActS,KAAKqS,EAAU7O,IAG1B,CAAE0G,SAAQ1G,UAGrB,GAAI8O,EAAcvU,OAAQ,CACtB,IAAM0U,EAAcH,EAAczR,IAC9B,SAAA6R,GAAM,OAAIA,EAAO7R,IAAI,SAAA8R,GAAK,OAAIA,EAAM9Q,OAExC4N,EAAS3F,GAAoB2I,EAAY,KAG7C,GAAIF,EAAcxU,OAAQ,CACtB,IAAM6U,EAAYrW,OAAO4I,OACrBnH,EAAQ,CAAE7B,QAAS,CAAE+M,MAAOqJ,EAAevI,YAE/C2F,EAAKiD,GAET,MAGJ,QACIjD,EAAK3R,OCkEF2T,GAxHU,SAAA9E,GAAA,IAAG6C,EAAH7C,EAAG6C,SAAUD,EAAb5C,EAAa4C,SAAb,OAA4B,SAAAE,GAAI,OAAI,SAAC3R,GAAW,I1BQ1CyO,E0BNnBrQ,GADS4B,EAATnC,MACwB,IAAxBO,YAER,GAAKA,EAKL,OAAQA,GACJ,IAAK,OACDuT,EAAK3R,GACLyR,EAASzD,MACT,MAGJ,IAAK,WAAY,IAAA6G,EAGTnD,IAAWoD,OADX5W,EAFS2W,EAET3W,MAAOgQ,EAFE2G,EAEF3G,WAEL6G,EAAU,CACZxG,KALSsG,EAEU1G,YAInBK,MANSqG,EAEuBzG,cAQpC,GADA2G,EAAQvG,OAAS,OACmC7O,IAAhDzB,EAAMqT,SAASwD,EAAQxG,MAAMwG,EAAQvG,SACrCuG,EAAQxG,MAAQ,EAChBwG,EAAQvG,MAAQ,OAEqB7O,IAAjCzB,EAAMqT,SAASwD,EAAQxG,OAAqB,CAC5C,IAAMyG,EAAU9W,EAAM2F,GACtB4N,EAASlC,GAAc,CAAEyF,UAASC,QAAS,SAC3CF,EAAQxG,MAAQ,EAChBwG,EAAQvG,OAAS,EAIzB,IAAsB,IAAlBuG,EAAQxG,KAAe,MAE3B,IAAM2G,EAAYhX,EAAMqT,SAASwD,EAAQxG,MAAMwG,EAAQvG,OAIvD,GAHAuG,EAAQnQ,OAASsQ,EAAUJ,OAAS,SAAW,OAC/CnD,EAAKpT,OAAO4I,OAAO,GAAInH,EAAQ,CAAE7B,QAAS4W,KAEtCG,EAAUzG,OAAQ,CAClBgD,G1BrCehD,E0BqCUyG,EAAUzG,O1BrCT,CACtC7Q,KAAMkQ,GACN3P,QAAS,CAAEsQ,a0BoCCiE,WACI,WACIjB,EAASzD,OAEb,MAEJ,MAGJ,GAAIkH,EAAUC,OAAQ,CAClB1D,EAAS9E,GAAUuB,IACnBuD,EAASzD,MACT,MAGJ,GAAIkH,EAAUE,MACV,MAGJ,GAAIF,EAAUG,QAAS,CACnB5D,EAAS9E,GAAUuI,EAAUG,UAC7B5D,EAASzD,MACT,MAGAkH,EAAUJ,QAEVrD,E9BtCuB,CACnC7T,KAAM6O,GACNtO,QAAS,K8BsCD,MAGJ,IAAK,QACDwT,EAAK3R,GADK,IAAAsV,EAEiB5D,IAAnBoD,EAFEQ,EAEFR,OAAQlI,EAFN0I,EAEM1I,OAFN2I,EAGY9T,EAAQlD,OAAO6E,OAAOwJ,GAAS,WAA7C4I,EAHED,EAGFC,KAAMC,EAHJF,EAGIE,IACOT,EAAcF,EAA3B5W,MAAS2F,GAEjB,GAAI2R,GAAQC,EACR,MAGJ,GAAID,EAAM,CACN/D,EAASzD,MACT,MAGJyD,EAASlC,GAAc,CAAEyF,UAASC,QAAS,UAC3C,MAGJ,IAAK,QACDxD,EAAStC,GAAkB,KAC3BsC,E9B3DsB,CAC9B7T,KAAM8O,GACNvO,QAAS,K8B0DDsT,E5B/F0B,CAClC7T,KAAM4P,GACNrP,QAAS,K4B8FDsT,ExB/FyB,CACjC7T,KAAM+Q,GACNxQ,QAAS,KwB8FDwT,EAAK3R,GACL,MAGJ,IAAK,QACL,IAAK,SACL,IAAK,OACD2R,EAAK3R,GACLyR,EnDpE2B,CACnC7T,KAAMF,EACNG,KAAM,CACFC,UAAW,amDkEP,MAGJ,QACI6T,EAAK3R,QA9GT2R,EAAK3R,MCCP0V,GAAkB,SAACzI,EAAOC,GAAW,IACxByI,EAA+B1I,EAAtC/I,MAAmB2E,EAAmBoE,EAAnBpE,eACZ+M,EAAgC1I,EAAvChJ,MAAoB4E,EAAmBoE,EAAnBpE,eACtB+M,EAAehN,EAAiBtK,OAAO6E,OAAOyF,GAAkB,GAChEiN,EAAehN,EAAiBvK,OAAO6E,OAAO0F,GAAkB,GAC9D1E,EAAWuR,EAAXvR,OACAC,EAAYuR,EAAZvR,QASF0R,EAAY3R,GAPQyR,GAAgBA,EAAa9V,OAAS,EAC1D8V,EAAajU,OAAO,SAACoU,EAAWpN,GAAZ,OAAwBoN,EAAYpN,EAAOnB,OAAQ,GACvE,GAMAwO,EAAa5R,GALQyR,GAAgBA,EAAa/V,OAAS,EAC3D+V,EAAalU,OAAO,SAACsU,EAAYtN,GAAb,OAAyBsN,EAAatN,EAAOnB,OAAQ,GACzE,GAKN,OAAkB,IAAdsO,EACO,EAEQ,IAAfE,EACOF,EAEPA,EAAYE,EACQ,GAAZF,EAAiE,GAAZA,GAAjC,EAAKA,EAAYE,GAE7CF,EAAYE,EACLF,EAAcE,GAAcA,EAAaF,GAAc,EAE9DA,IAAcE,EACK,GAAZF,EAGJ,GAGLI,GAAkB,SAAClJ,EAAOC,EAAQtP,GACpC,OAAQA,GACJ,IAAK,SACL,QACI,MAAO,CAAE6H,OAAQtE,KAAKiV,MAAMV,GAAgBzI,EAAOC,OAKzDmJ,GAAgB,SAACpJ,EAAOL,EAAQwC,GAClC,IAAMiG,EA1DiB,SAACvN,EAAS8E,GACjC,IAAM0J,EAA2B,SAAZxO,EAAqB,MAAQ,OAClD,OAAOrG,EAAQmL,EAAQ,WAAW0J,GAwDlBC,CAAmBtJ,EAAMnF,QAAS8E,GAElD,IAAKyI,EACD,MAAO,CACHzX,KAAM,OACNyP,MAAO,KAGf,IAAMH,EA7De,SAACpF,EAASuN,EAASjG,GACxC,MAAgB,QAAZtH,GACGuN,EAAQ5J,OAAO,SAAA+K,GAAK,OAAIA,EAAM3S,KAAOuL,IA2D7BqH,CAAiBxJ,EAAMnF,QAASuN,EAASjG,GAAa,IAzDlD,SAAAiG,GAAO,OAAIA,EAAQlU,KAAKC,MAAMD,KAAKD,SAAWmU,EAAQtV,SA0DlE2W,CAAerB,GAGtB,MAAO,CACHzX,KAFS,SAGTyP,MAAO,IACPH,SACAC,cAAegJ,GAAgBlJ,EAAOC,EAL7B,YAmBFyJ,GAVS,SAAC/J,EAAQwC,GAC7B,IAAMnC,EAjFW,SAAAL,GAAM,OAAI3K,EAAO2K,EAAQ,aAAa,GAiFzCgK,CAAahK,GAG3B,MAAO,CACHK,QACAjN,OAJWqW,GAAcpJ,EAAOL,EAAQwC,KCZjCyH,GAnEgB,SAAAhI,GAAA,IAAG6C,EAAH7C,EAAG6C,SAAUD,EAAb5C,EAAa4C,SAAb,OAA4B,SAAAE,GAAI,OAAI,SAAC3R,GAAW,IhC+BpDkN,EAAQG,EgC9BvByJ,GAAkB9W,EAAOnC,MAAQ,IAAjCiZ,cAER,GAAKA,EAIL,OAAQA,GACJ,IAAK,YACDnF,EAAK3R,GADS,IAAAsV,EAEkB5D,IAAxB9E,EAFM0I,EAEN1I,OAAQwC,EAFFkG,EAEElG,YAChB,GAAIxC,EAAO7M,OAAS,EAAG,CACnB,IAAMgX,EAAaJ,GAAgB/J,EAAQwC,GACnCnC,EAAU8J,EAAV9J,MAERwE,EAAS7C,GAAUmI,IACnBtF,GhCeWvE,EgCfSD,EAAMpJ,GhCePwJ,EgCfWJ,EAAM/I,MAAMI,KhCeZ,CAC1C1G,KAAM4O,GACNrO,QAAS,CACL+O,SACAG,YgCjBY0J,EAAW/W,OAAOkN,QAClBuE,EhCCQ,SAAAzR,GAAM,MAAK,CACnCpC,KAAM2O,GACNpO,QAAS,CACL+O,OAAQlN,EAAOkN,OACfC,cAAenN,EAAOmN,eAE1BtP,KAAM,CACFiZ,cAAe,UgCRME,CAAaD,EAAW/W,SAGzC,MAGJ,IAAK,QACD2R,EAAK3R,GADK,IAGMiX,EAAkBvF,IAA1B9E,QACa,WACjB,IAWMsK,EAXiBD,EAAcpU,IAAI,SAACoK,GACtC,IAAsBC,EAKtB,OALsBA,EAKLD,GAJgB/I,MAArBC,GAC0B+I,EAAOtI,OAAjCa,QACyB,EAG1BwH,EAEJ,OAEuBxB,OAAO,SAAA0L,GAAE,OAAU,MAANA,IAC/C,GAAID,EAAWnX,OAAS,EAAG,CACvB,IAAMqX,EAAiBF,EAAWrU,IAAI,SAACoK,GAQnC,OAPAwE,EAAS7C,GAAU,CACf3B,QACAjN,OAAQ,CACJkN,OAAQD,EACRrP,KAAM,YAGPqP,EAAMpJ,KAEjB4N,EhC3CoB,CACpC7T,KAAM0O,GACNnO,QAAS,CACL6O,QgCwCkCoK,GhCtCtCvZ,KAAM,CACFO,YAAa,WgCsCDqT,ExB7C2B,CAC3C7T,KAAMsR,GACN/Q,QAAS,GACTN,KAAM,CACFuR,YAAa,iBwB4CTiI,GACA,MAGJ,QACI1F,EAAK3R,QA1DT2R,EAAK3R,MC4BEsX,GAnCe,SAAAzI,GAAA,IAAG6C,EAAH7C,EAAG6C,SAAUD,EAAb5C,EAAa4C,SAAb,OAA4B,SAAAE,GAAI,OAAI,SAAC3R,GAAW,IAElEoP,GADSpP,EAATnC,MACwB,IAAxBuR,YAER,IAAKA,EACD,OAAOuC,EAAK3R,GAGhB,OAAQoP,GACJ,IAAK,YAAa,IACOmI,EAAwB7F,IAArCtC,YACWnC,EAAYjN,EAAvB7B,QAAW8O,MACnB,OAAIA,GAASA,IAAUsK,EACZ9F,EAAStC,GAAkB,KAE/BwC,EAAK3R,GAGhB,IAAK,aAAc,IAAAwX,EACmC9F,IAA7B+F,EADND,EACPpI,YADOoI,EACwB5K,OACVnB,OAAO,SAAAwB,GAAK,OAAIA,EAAMpJ,KAAO4T,IACvC1X,QACf0R,EAAStC,GAAkB,KAE/B,MAGJ,QACI,OAAOwC,EAAK3R,GAIpB,OAAO2R,EAAK3R,MC/BRoJ,GAAmBvB,GA6XZ6P,GA3XA,CACXC,MAAO,CACH9T,GAAI,MACJ+T,MAAO,sBACPrG,SAAU,CACN,CACI,CAAE4D,QAAQ,GACV,CACIC,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,0BAEV,CACI/T,OAAQ,SACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,gDAEV,CACI/T,OAAQ,SACRD,KAAM,iBACN+T,KAAM,QACNC,KAAM,mCAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,wBAIlB,CAAErJ,OAAQ,WACV,CACI4G,QAAS,CACLjM,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,UAG3D,CAAEiR,QAAQ,GACV,CACIO,QAAS,CACLjM,GAAe,MAAOzF,EAAMC,MAAMC,GAAI,OAAQ,YAGtD,CACIuR,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,eAEV,CACI/T,OAAQ,eACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,qEAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,SAEV,CACI/T,OAAQ,eACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,mFAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,SAEV,CACI/T,OAAQ,eACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,mFAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,gIAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,gEAM1BC,OAAQ,CACJC,MAAO,CAAC,WAAY,aAAc,WAAY,WAAY,WAC1DC,OAAQ,CAAC,WAAY,WACrBC,KAAM,CAAC,YAGfC,MAAO,CACHtU,GAAI,MACJ+T,MAAO,oBACPrG,SAAU,CACN,CACI,CACI8D,QAAS,CACLjM,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,QACnDuF,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,UAG3D,CAAEsR,QAAQ,GACV,CACIC,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,kCAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,wDAIlB,CAAErJ,OAAQ,YACV,CAAEqG,QAAQ,IAEd,CACI,CACIM,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,uCAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,+CAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,WAIlB,CACIzC,QAAS,CACLjM,GAAe,MAAOzF,EAAMc,IAAIZ,GAAI,QAAS,UAGrD,CAAE4K,OAAQ,YACV,CAAEqG,QAAQ,GACV,CACIM,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,kEAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,SAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,yEAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,wFAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,aAM1BC,OAAQ,CACJC,MAAO,CAAC,WAAY,WAAY,WAAY,WAC5CC,OAAQ,CAAC,UAAW,WACpBC,KAAM,CAAC,aAGfE,MAAO,CACHvU,GAAI,MACJ0N,SAAU,CACN,CACI,CACI8D,QAAS,CACLjM,GAAe,MAAOzF,EAAMc,IAAIZ,GAAI,QAAS,QAC7CuF,GAAe,MAAOzF,EAAMc,IAAIZ,GAAI,QAAS,UAGrD,CAAEsR,QAAQ,GACV,CAAE1G,OAAQ,WACV,CAAEqG,QAAQ,GACV,CACIO,QAAS,CACLjM,GAAe,MAAOzF,EAAMY,IAAIV,GAAI,SAAU,UAGtD,CACIuR,MAAO,CACH,CACIrR,OAAQ,iCACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,uGAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,SAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,qEAEV,CACI/T,OAAQ,iCACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,wEAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,SAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,8BAM1BC,OAAQ,CACJC,MAAO,CAAC,aAAc,WAAY,aAAc,cAAe,WAAY,UAAW,WAAY,UAAW,YAC7GC,OAAQ,CAAC,WAAY,UAAW,WAChCC,KAAM,CAAC,aAGfG,MAAO,CACHxU,GAAI,MACJ+T,MAAO,aACPrG,SAAU,CACN,CACI,CAAE4D,QAAQ,GACV,CACIE,QAAS,CACLjM,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,QACnDuF,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,UAG3D,CAAE4K,OAAQ,YACV,CAAEqG,QAAQ,IAEd,CACI,CAAErG,OAAQ,YACV,CACI4G,QAAS,CACLjM,GAAe,MAAOzF,EAAMc,IAAIZ,GAAI,QAAS,UAGrD,CAAEiR,QAAQ,IAEd,CACI,CAAErG,OAAQ,2BACV,CACI4G,QAAS,CACLjM,GAAe,MAAOzF,EAAMc,IAAIZ,GAAI,gBAAiB,OAAQ,CAAEqF,WAAY,GAAIhF,MAAO,CAAEC,GAAI,GAAIC,OAAQ,GAAIE,MAAO,KACnH8E,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,QACnDuF,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,QACnDuF,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,QACnDuF,GAAe,MAAOzF,EAAMe,OAAOb,GAAI,WAAY,UAG3D,CAAEiR,QAAQ,KAGlBiD,OAAQ,CACJC,MAAO,CAAC,WAAY,WAAY,UAAW,aAC3CC,OAAQ,CAAC,WAAY,UAAW,YAChCC,KAAM,CAAC,WAAY,UAAW,aAGtCI,MAAO,CACHzU,GAAI,MACJ0N,SAAU,CACN,CACI,CAAE4D,QAAQ,GACV,CACIE,QAAS,CACLjM,GAAe,MAAOzF,EAAMmB,SAASjB,GAAI,aAAc,QACvDuF,GAAe,MAAOzF,EAAMmB,SAASjB,GAAI,aAAc,QACvDuF,GAAe,MAAOzF,EAAMmB,SAASjB,GAAI,aAAc,UAG/D,CAAE4K,OAAQ,eACV,CAAEqG,QAAQ,GACV,CAAErG,OAAQ,YACV,CACI2G,MAAO,CACH,CACIrR,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,uDAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,QACNC,KAAM,oDAEV,CACI/T,OAAQ,eACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,0GAEV,CACI/T,OAAQ,eACRD,KAAM,OACN+T,KAAM,OACNC,KAAM,2FAEV,CACI/T,OAAQ,eACRD,KAAM,SACN+T,KAAM,QACNC,KAAM,uKAM1BC,OAAQ,CACJC,MAAO,CAAC,WAAY,WAAY,YAChCC,OAAQ,CAAC,WAAY,WACrBC,KAAM,CAAC,cClXJK,GAAA,CACX/E,GACAgF,GACA5E,GACAM,GACAP,GACA8E,GACAnB,GCZ0B,SAAAzI,GAAA,IAAG6C,EAAH7C,EAAG6C,SAAUD,EAAb5C,EAAa4C,SAAb,OAA4B,SAAAE,GAAI,OAAI,SAAC3R,GAAW,IAClE7B,EAAkB6B,EAAlB7B,QAGR,KAH0B6B,EAATnC,MACiB,IAA1B4R,cAGJ,OAAOkC,EAAK3R,GAL0D,IAAA0Y,EAQ/Bva,EAAnCqR,SAAYwF,EARsD0D,EAQtD1D,QAASC,EAR6CyD,EAQ7CzD,QAR6C0D,EASnC3D,EAAQ7E,MAAM,KATqByI,EAAAra,OAAA8R,GAAA,EAAA9R,CAAAoa,EAAA,GASnEE,EATmED,EAAA,GASpDE,EAToDF,EAAA,GAUpE/I,EAAUY,SAASoI,EAAe,IAClC/I,EAAUW,SAASqI,EAAe,IAElCzK,EAD8BqD,IAA5BqH,YAAepJ,OACME,GAASC,GAEtC,IAAKzB,EAED,OADAyE,QAAQY,IAAI,cACL,EAGX,ItDJgChU,EsDI1BsZ,EAAqB,CACvBhE,UACAnF,UACAC,UACAmF,QACiB,SAAZA,EACKA,EACmB,YAAlB5G,EAA+B,SAAW,QAErDzJ,OACuB,YAAlByJ,EACKA,EACa,QAAZ4G,EAAqB,UAAY,SAE5CvF,WAAW,GAGf,GACgB,QAAZuF,IAEsB,QAAlB5G,GACqB,WAAlBA,GAET,CACE,IAAMqB,EAAYgI,GAAM,GAAAta,OAAIyS,EAAJ,KAAAzS,OAAe0S,EAAU,KAC1C4H,GAAM,GAAAta,OAAIyS,EAAU,EAAd,IAAmB,KACzB,CAAEhM,GAAI,iBACbmV,EAAmBtJ,UAAYA,EAAU7L,GAK7C,OAFA4N,GtDlCgC/R,EsDkCFsZ,EAAmB/D,QtDlCA,CACjDrX,KAAM2B,EACNpB,QAAS,CACLuB,gBAEJ7B,KAAM,CACFO,YAAasB,EACb6L,UAAW,gBsD6BRoG,EAAKpT,OAAAgC,EAAA,EAAAhC,CAAA,GAAKyB,EAAN,CAAc7B,QAAS6a,SCnDxBC,GAAA,CACVzH,IADJpU,OAAAmB,OAAA+B,EAAA,EAAA/B,CAEO2a,IAFP,CAGIja,GAHJV,OAAA+B,EAAA,EAAA/B,CAIO4a,KCFP,IAAMC,GAAiBnH,KAEjBoH,GAAmBC,YACrBpa,EACAqa,IAAehW,WAAf,EAAAhF,OAAA+B,EAAA,EAAA/B,CAAmBQ,KCTiBya,OAAOC,6BACND,OAAOC,+BAAiC,SAAAzG,GAAK,OAAIA,IDoB3E0G,GARQ,WACnB,IAAM1G,EAAQ2G,YAAYC,GAAaR,GAAgBC,IAIvD,OAFAla,IAEO6T,gCEDI6G,GAhBK,SAACC,GAAU,IACnBC,EAAaD,EAAbC,SACR,OACIC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,QACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,cACVC,IAAMC,SAASvX,IAAIkX,EAAU,SAAAM,GAAK,OAAIA,KAE3CL,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBAAeF,EAAA3X,EAAA4X,cAAA,qCCqB3BK,OA1Bf,WACI,OACIN,EAAA3X,EAAA4X,cAACM,GAAD,KACIP,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,2BACXF,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,2BAAhB,QACAF,EAAA3X,EAAA4X,cAAA,MAAIC,UAAU,eACVF,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,sBAAhB,SACAF,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,mBAAhB,MACAF,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,sBAAhB,SACAF,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,mBAAmBM,KAAK,MAAMC,aAAW,OAAzD,gBACAT,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,oBAAoBM,KAAK,MAAMC,aAAW,WAA1D,gBACAT,EAAA3X,EAAA4X,cAAA,MAAIC,UAAU,sBAAd,kBAEJF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,wBACXF,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GAAI3c,KACtCgc,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,eAAetc,KAAK,UAAtC,UAEJoc,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GAAI5c,KACtCic,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,eAAetc,KAAK,UAAtC,0BC8ETgd,GArGJ,CACPC,KAAM,eACNC,UAAW,CACPxQ,KAAM,CACFjF,KAAM,eAAMvB,KAAM,QAEtByG,MAAO,CACHlF,KAAM,eAAMvB,KAAM,SAEtBiX,KAAM,CACF1V,KAAM,eAAMvB,KAAM,SAG1BkX,KAAM,CACF3V,KAAM,SAAKvB,KAAM,QAErBmX,KAAM,CACF5V,KAAM,SAAKvB,KAAM,QAErBoX,OAAQ,CACJ7V,KAAM,eAAMvB,KAAM,UAEtBqX,OAAQ,CACJ9V,KAAM,eAAMvB,KAAM,UAEtBsX,KAAM,CACF/V,KAAM,qBAAOvB,KAAM,QAEvBuX,UAAW,CACPhW,KAAM,eAAMvB,KAAM,aAEtBwX,KAAM,CACFC,gBAAiB,CACblW,KAAM,SAAKvB,KAAM,iBAErB0X,gBAAiB,CACbnW,KAAM,SAAKvB,KAAM,iBAErB2X,mBAAoB,CAChBpW,KAAM,SAAKvB,KAAM,oBAErB4X,mBAAoB,CAChBrW,KAAM,SAAKvB,KAAM,qBAGzB8W,GAAI,CACAe,KAAM,CACFtW,KAAM,SAAKvB,KAAM,QAErB8X,OAAQ,CACJvW,KAAM,eAAMvB,KAAM,UAEtB+X,MAAO,CACHxW,KAAM,eAAMvB,KAAM,SAEtBgY,SAAU,CACNzW,KAAM,eAAMvB,KAAM,YAEtBiY,SAAU,CACN1W,KAAM,SAAKvB,KAAM,YAErBkY,KAAM,CACF3W,KAAM,SAAKvB,KAAM,QAErBmY,MAAO,CACH5W,KAAM,SAAKvB,KAAM,SAErBoY,QAAS,CACL7W,KAAM,SAAKvB,KAAM,WAErBqY,MAAO,CACH9W,KAAM,SAAKvB,KAAM,UAGzBsY,MAAO,CACHC,QAAS,CACLhX,KAAM,eAAMvB,KAAM,WAEtBwY,SAAU,CACNjX,KAAM,eAAMvB,KAAM,WAEtByY,MAAO,CACHlX,KAAM,eAAMvB,KAAM,YAG1B0Y,SAAU,CACNC,IAAK,CACDpX,KAAM,eAAMvB,KAAM,OAEtB4Y,KAAM,CACFrX,KAAM,eAAMvB,KAAM,QAEtB6Y,MAAO,CACHtX,KAAM,eAAMvB,KAAM,SAEtB8Y,MAAO,CACHvX,KAAM,eAAMvB,KAAM,WChEf+Y,gBAJS,SAAAhd,GAAK,MAAK,CAC9B6K,UAAW7K,EAAM6K,YAGNmS,CA3BO,SAAC/C,GAAU,IACrBpP,EAAcoP,EAAdpP,UACFoS,EAAmBve,OAAOqE,KAAK8H,GAAW7H,IAAI,SAACjF,GAAS,IAAAmf,EACnCnC,GAAGE,UAAUld,GAA5ByH,EADkD0X,EAClD1X,KAAMvB,EAD4CiZ,EAC5CjZ,KACd,OACIkW,EAAA3X,EAAA4X,cAAA,OAAKlY,IAAG,+BAAA3E,OAAiCQ,GAAQga,MAAO9T,EAAMoW,UAAS,iCAAA9c,OAAmCQ,IACtGoc,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,2BAA2B7U,GAC3C2U,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,6BAA6BxP,EAAU9M,OAInE,OACIoc,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBAEV4C,KCIEE,GAnBM,SAAClD,GAAU,IACpBC,EAAaD,EAAbC,SACR,OACIC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,QACXF,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,gBACdF,EAAA3X,EAAA4X,cAACgD,GAAD,OAEJjD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,cACVC,IAAMC,SAASvX,IAAIkX,EAAU,SAAAM,GAAK,OAAIA,KAE3CL,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBAAeF,EAAA3X,EAAA4X,cAAA,qCCF3BiD,GARSpJ,aAFH,SAAAjU,GAAK,OAAIA,EAAM/B,WAIhC,SAACA,GAAc,IACH2B,EAAS3B,EAAT2B,KACR,OAAOlB,OAAA+B,EAAA,EAAA/B,CAAIkB,GAAMiB,OAAO,GAAG,KCqBpBmc,qBAJS,SAAAhd,GAAK,MAAK,CAC9Bsd,aAAcD,GAAgBrd,KAGnBgd,CAvBE,SAAAhO,GAAgC,IAA7BkL,EAA6BlL,EAA7BkL,SACVqD,EAAqB,CACvBxf,KAFyCiR,EAAnBsO,aAGtBtf,KAAM,CACFC,UAAW,YAGnB,OACIkc,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,oBAAoBS,GAAIyC,GACnCjD,IAAMC,SAASvX,IAAIkX,EAAU,SAAAM,GAAK,OAAIA,OCWpCgD,OAtBf,WACI,OACIrD,EAAA3X,EAAA4X,cAACqD,GAAD,KACItD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,+BACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,kBAAkBtc,KAAK,UAAzC,SAEJoc,EAAA3X,EAAA4X,cAAA,uBAEJD,EAAA3X,EAAA4X,cAAA,gCACAD,EAAA3X,EAAA4X,cAAA,UACID,EAAA3X,EAAA4X,cAAA,wBACAD,EAAA3X,EAAA4X,cAAA,sBACAD,EAAA3X,EAAA4X,cAAA,0CACAD,EAAA3X,EAAA4X,cAAA,wCCfZpN,GAAgBhF,GA6CT2V,GA3CE,SAAC1D,GAAU,IAEpB2D,EACA3D,EADA2D,QAASxV,EACT6R,EADS7R,SAAUyV,EACnB5D,EADmB4D,SAAUC,EAC7B7D,EAD6B6D,UAAWC,EACxC9D,EADwC8D,YAFpBC,EAMpBhR,GAAY5E,GADZpE,EALoBga,EAKpBha,GAAIC,EALgB+Z,EAKhB/Z,KAAMC,EALU8Z,EAKV9Z,OAGR+Z,EAAgB,SAACC,EAAO7D,EAAW8D,GAAnB,OAClBhE,EAAA3X,EAAA4X,cAAA,UAAQrc,KAAK,SAASsc,UAAWA,EAAW+D,QAASD,GAChDD,IAIHG,GAAoBT,GAAWC,EAASS,QACxCL,EAAc,aAAS,cAAe,kBAAMJ,EAASM,QAAQna,KAC7D,GACAua,EAAoBT,EAAUQ,QAC9BL,EAAc,oBAAW,GAAI,kBAAMH,EAAUK,QAAQna,KACrD,GACAwa,EAAsBZ,GAAWG,EAAYO,QAC7CL,EAAc,gBAAY,iBAAkB,kBAAMF,EAAYI,QAAQna,KACtE,GAEN,OACImW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,cACVpW,EACAC,EACAqa,EACAF,EACAG,IChCPC,GAAe,SAACxE,GAAU,IAExB5L,EACA4L,EADA5L,WAAYqQ,EACZzE,EADYyE,WAAYC,EACxB1E,EADwB0E,aAAczE,EACtCD,EADsCC,SAG1C,OACIC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,kBACXF,EAAA3X,EAAA4X,cAAA,MAAIC,UAAU,yBACVF,EAAA3X,EAAA4X,cAAA,kCACCE,IAAMC,SAASvX,IAAIkX,EAAU,SAAAM,GAAK,OAAIA,KAG3CL,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,2BAEPhM,EAAWrL,IAAI,SAAAoF,GAAQ,OACnB+R,EAAA3X,EAAA4X,cAACwE,GAAD,CACI1c,IAAKkG,EAASpE,GACd4Z,SAAO,EACPxV,SAAUA,EACVyV,SAAU,CAAES,SAAS,GACrBR,UAAWY,EACXX,YAAaY,SAgBzCF,GAAaI,aAAe,CACxB3E,SAAU,IAGCuE,aCtCTK,GAAqB7K,aALV,SAAAjU,GAAK,OAAIA,EAAM+e,OACd,SAAA/e,GAAK,OAAIA,EAAMqK,QAO7B,SAAC0U,EAAO1U,GAAR,OAAoB3L,OAAO6E,OAAO8G,GAAQuB,OAAO,SAAAzB,GAAI,OAAI4U,EAAMjT,SAAS3B,EAAKnG,QAiBlEgb,GAde/K,aAC1B6K,GAViB,SAAA9e,GAAK,OAAIA,EAAMqI,WACf,SAAArI,GAAK,OAAIA,EAAMmU,WAYhC,SAACpH,EAAQ1E,EAAW8L,GAApB,OAAmCpH,EAAO/J,IAAI,SAACoK,GAC3C,IAAM6R,EAAWvgB,OAAO6E,OAAO8E,GAAWtG,OAAO,SAACM,EAAKsF,GAEnD,OADIA,EAAMwE,SAAWiB,EAAMpJ,IAAM3B,EAAIF,KAAKwF,EAAM0E,QACzChK,GACR,IACGgJ,EAAQ8I,EAAUvI,OAAO,SAAA7D,GAAI,OAAIkX,EAASnT,SAAS/D,EAAK/D,MAC9D,OAAOtF,OAAO4I,OAAO,GAAI8F,EAAO,CAAE/E,UAAWgD,QCEtC6T,GAnBkBjL,aAHV,SAAAjU,GAAK,OAAIA,EAAMkZ,aACpB,kBAAMrB,IAKpB,SAACqB,EAAapJ,GAAW,IACLqP,EAAejG,EAAvBpJ,OACR,OAAOpR,OAAO6E,OAAOuM,GAAQ9M,IAAI,SAAC3E,GAAU,IAAA+gB,EACD/gB,EAAM2F,GAAGsM,MAAM,KADd+O,EAAA3gB,OAAA8R,GAAA,EAAA9R,CAAA0gB,EAAA,GACjCpG,EADiCqG,EAAA,GAClBpG,EADkBoG,EAAA,GAElCrP,EAAUY,SAASoI,EAAe,IAClC/I,EAAUW,SAASqI,EAAe,IAExCkG,EAAWnP,GAAWmP,EAAWnP,IAAY,GAE7C,IAAMjL,EAASoa,EAAWnP,GAASC,KAAY,EAE/C,OAAOvR,OAAAgC,EAAA,EAAAhC,CAAA,GAAKL,EAAZ,CAAmB0G,eCkEhBiY,gBALS,SAAAhd,GAAK,MAAK,CAC9BqO,WAAY2Q,GAAsBhf,GAClC8P,OAAQoP,GAAyBlf,KAGtBgd,CA3EG,SAAAhO,GAA4B,IAAzBX,EAAyBW,EAAzBX,WAAYyB,EAAad,EAAbc,OACvBwP,EAAkBjR,EAAWnO,OAO3B4P,EAAO9M,IAAI,SAAC3E,GAAU,IAEd2F,EACA3F,EADA2F,GAAI+T,EACJ1Z,EADI0Z,MAAOhT,EACX1G,EADW0G,OAETwa,EADFlhB,EADmBqT,SAEKxR,OACtBsf,EAAazH,GAAS/T,EACtByb,EAAyB,WAAX1a,EAAuB,GACvCoV,EAAA3X,EAAA4X,cAAA,OAAKC,UAAS,8BAAA9c,OAAgCwH,IACzCA,GAGT,OAAQA,EACJoV,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CACIN,IAAK8B,EACLqW,UAAS,0BAAA9c,OAA4BwH,GACrC+V,GAAI1c,EAAW4F,IAEdyb,EACDtF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,qBACVmF,GAELrF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBAAf,WAAA9c,OACgBgiB,KAXP,KAhBrBpF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,aAAf,2DAiCR,OACIF,EAAA3X,EAAA4X,cAACqD,GAAD,KACItD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gCACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,kBAAkBtc,KAAK,UAAzC,SAEJoc,EAAA3X,EAAA4X,cAAA,wBAEJD,EAAA3X,EAAA4X,cAACsF,GAAD,CACIrR,WAAYA,EACZqQ,WAAY,CAAEJ,SAAS,GACvBK,aAAc,CAAEL,SAAS,IAEzBnE,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GzElC1B,CAC5B/c,KAAML,EACNM,KAAM,CACFC,UAAW,ayEgCKkc,EAAA3X,EAAA4X,cAAA,UAAQrc,KAAK,UAAb,gBAGRoc,EAAA3X,EAAA4X,cAAA,6BAGAD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,0BACViF,OC/BNK,GAlCO,SAAC1F,GAAU,IAEzB2F,EACA3F,EADA2F,YAAaC,EACb5F,EADa4F,UAAWnB,EACxBzE,EADwByE,WAG5B,OACIvE,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBACXF,EAAA3X,EAAA4X,cAAA,gCAGAD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,4BAEPuF,EAAY5c,IAAI,SAAAoF,GAAQ,OACpB+R,EAAA3X,EAAA4X,cAACwE,GAAD,CACI1c,IAAKkG,EAASpE,GACdoE,SAAUA,EACVwV,SAAS,EACTC,SAAUgC,EACV/B,UAAWY,EACXX,YAAa,CAAEO,SAAS,UCZrCwB,GANqB7L,aAHnB,SAAAjU,GAAK,OAAIA,EAAM+e,OACd,SAAA/e,GAAK,OAAIA,EAAMqK,QAK7B,SAAC0U,EAAO1U,GAAR,OAAoB3L,OAAO6E,OAAO8G,GAAQuB,OAAO,SAAAzB,GAAI,OAAK4U,EAAMjT,SAAS3B,EAAKnG,QCuDnEgZ,qBAXS,SAAAhd,GAAK,MAAK,CAC9BqO,WAAYyQ,GAAmB9e,GAC/B4f,YAAaE,GAA4B9f,KAGlB,SAAA4R,GAAQ,MAAK,CACpCmO,SAAU,SAAA5V,GAAI,OAAIyH,E5EzBa,CAC/B7T,KAAMJ,EACNW,QAAS,CACL6N,O4EsBgChC,G5EpBpCnM,KAAM,CACFC,UAAW,c4EoBf+hB,UAAW,SAAA7V,GAAI,OAAIyH,EAASpG,GAAgB,CAACrB,MAC7C8V,aAAc,SAAA9V,GAAI,OAAIyH,E3D9CkB,CACxC7T,KAAMwN,GACNjN,QAAS,CACLmN,M2D2C8C,CAACtB,I3DzCnDnM,KAAM,CACF0N,UAAW,c2D2CJsR,CAnDD,SAAC/C,GAAU,IAEjB5L,EACA4L,EADA5L,WAAYuR,EACZ3F,EADY2F,YAAaG,EACzB9F,EADyB8F,SAAUC,EACnC/F,EADmC+F,UAAWC,EAC9ChG,EAD8CgG,aAGlD,OACI9F,EAAA3X,EAAA4X,cAACqD,GAAD,KACItD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,4BACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,kBAAkBtc,KAAK,UAAzC,SAEJoc,EAAA3X,EAAA4X,cAAA,yBAEJD,EAAA3X,EAAA4X,cAACsF,GAAD,CACIrR,WAAYA,EACZqQ,WAAY,CAAEJ,SAAS,EAAMH,QAAS4B,GACtCpB,aAAc,CAAEL,SAAS,EAAMH,QAAS8B,KAE5C9F,EAAA3X,EAAA4X,cAAC8F,GAAD,CACIN,YAAaA,EACblB,WAAY,CAAEJ,SAAS,EAAMH,QAAS4B,GACtCF,UAAW,CAAEvB,SAAS,EAAMH,QAAS6B,KAEzC7F,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,iBAAiBtc,KAAK,UAAxC,gCCjCZwJ,GAAgBN,GAsCTkZ,GApCE,SAAClG,GAAU,IACV5S,EAAuC4S,EAA7ClS,KAAgBqY,EAA6BnG,EAA7BmG,WAAYC,EAAiBpG,EAAjBoG,aAE9BtY,EAAOR,GAAYF,GAEnB4W,EAAgB,SAACC,EAAO7D,EAAW8D,GAAnB,OAClBhE,EAAA3X,EAAA4X,cAAA,UAAQrc,KAAK,SAASsc,UAAWA,EAAW+D,QAASD,GAChDD,IAIHoC,EAAqBF,EAAW9B,QAChCL,EAAc,eAAW,cAAe,kBAAMmC,EAAWjC,QAAQ,CAACpW,EAAK/D,OACvE,GACAuc,EAAuBF,EAAa/B,QACpCL,EAAc,gBAAY,iBAAkB,kBAAMoC,EAAalC,QAAQ,CAACpW,EAAK/D,OAC7E,GAEN,OACImW,EAAA3X,EAAA4X,cAAA,OAAKlY,IAAK6F,EAAK/D,GAAIqW,UAAS,0BAAA9c,OAA4BwK,EAAKhK,OACzDoc,EAAA3X,EAAA4X,cAAA,YACKrS,EAAKvC,MAETuC,EAAK9D,KACLqc,EACAC,IC1BLvT,GAAgBhF,GA6ETwY,GA3EK,SAACvG,GAAU,IAEvB7R,EACA6R,EADA7R,SAAUC,EACV4R,EADU5R,UAAWoY,EACrBxG,EADqBwG,cAAeC,EACpCzG,EADoCyG,UAAWC,EAC/C1G,EAD+C0G,YAAaC,EAC5D3G,EAD4D2G,cAFrC5C,EAMvBhR,GAAY5E,GADZnE,EALuB+Z,EAKvB/Z,KAAMC,EALiB8Z,EAKjB9Z,OAAQoE,EALS0V,EAKT1V,KAAMjE,EALG2Z,EAKH3Z,MAAOU,EALJiZ,EAKIjZ,OAGzB8b,EAAU,SAACC,GACb,GAAoB,qBAATA,IAAsC,IAAdJ,EAAsB,MAAO,GAChE,IAAMK,EAAariB,OAAOqE,KAAK+d,GAAM9d,IAAI,SAAAV,GAAS,OAC9C6X,EAAA3X,EAAA4X,cAAA,MAAIlY,IAAKI,GACL6X,EAAA3X,EAAA4X,cAAA,UAAK9X,GACL6X,EAAA3X,EAAA4X,cAAA,UAAK/V,EAAM/B,OAInB,OAAQ6X,EAAA3X,EAAA4X,cAAA,aAAOD,EAAA3X,EAAA4X,cAAA,aAAQ2G,KAuB3B,OACI5G,EAAA3X,EAAA4X,cAAC4G,EAAA,SAAD,KACI7G,EAAA3X,EAAA4X,cAAA,mBAAA7c,OACc0G,IAEdkW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,yBACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBACVnW,GAELiW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,yBACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,uBAAf,GAAA9c,OACQ0G,EADR,MAAA1G,OACiB+K,EADjB,MAGA6R,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,wBACVwG,EAAQxc,MAKpBwc,EAAQ9b,GAtCY,qBAAdsD,IAA+C,IAAlBoY,EAAiC,GAGrEtG,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBACXF,EAAA3X,EAAA4X,cAAA,sBACAD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,+BACVhS,EAAUrF,IAAI,SAAA+E,GAAI,OACfoS,EAAA3X,EAAA4X,cAAC6G,GAAD,CACI/e,IAAK6F,EAAK/D,GACV+D,KAAMA,EACNqY,WAAYO,EACZN,aAAcO,UCT3BM,GAzBU,SAACjH,GAAU,IACxB9F,EAA0C8F,EAA1C9F,UAAWwM,EAA+B1G,EAA/B0G,YAAaC,EAAkB3G,EAAlB2G,cAChC,OACIzG,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBACXF,EAAA3X,EAAA4X,cAAA,wBACAD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,+BACVlG,EAAUnR,IAAI,SAAA+E,GAAI,OACfoS,EAAA3X,EAAA4X,cAAC6G,GAAD,CACI/e,IAAK6F,EAAK/D,GACV+D,KAAMA,EACNqY,WAAYO,EACZN,aAAcO,SCXhCO,GAAuBlN,aAHR,SAAAjU,GAAK,OAAIA,EAAMqI,WAKhC,SAAAA,GAAS,OACL3J,OAAO6E,OAAO8E,GAAWtG,OAAO,SAACM,EAAK0F,GAElC,OADA1F,EAAIF,KAAK4F,EAAKsE,QACPhK,GACR,MAeI+e,GAZWnN,aACtBkN,GAZiB,SAAAnhB,GAAK,OAAIA,EAAMmU,WAchC,SAACkN,EAAmBlN,GAApB,OAAkCA,EAC7BvI,OAAO,SAAAjE,GAAK,OAAK0Z,EAAkBvV,SAASnE,EAAM3D,MAClDzB,KAAK,SAACC,EAAGC,GACN,OAAID,EAAE4E,OAAS3E,EAAE2E,QAAkB,EAC/B5E,EAAE4E,OAAS3E,EAAE2E,OAAiB,EAC3B,MCsDJ4V,qBAXS,SAAAhd,GAAK,MAAK,CAC9BoI,UAvDoB+D,EAuDKnM,EAAMmM,OAvDH9B,EAuDWrK,EAAMqK,OAvDNA,EAAO8B,IAwD9C9D,UAAWkM,GAAavU,GACxBmU,UAAWmN,GAAathB,IAzDL,IAACmM,EAAQ9B,GA4DL,SAAAuH,GAAQ,MAAK,CACpC2P,oBAAqB,SAAClW,EAAOc,GAAR,OAAmByF,E9DpEd,SAACvG,EAAOc,GAAR,MAAoB,CAC9CpO,KAAMgO,GACNzN,QAAS,CACL+M,QACAc,UAEJnO,KAAM,CACF0N,UAAW,YACXQ,eAAgB,Q8D4D6BsV,CAAenW,EAAOc,KACvEsV,YAAa,SAAApW,GAAK,OAAIuG,EAAS3F,GAAoBZ,OAGxC2R,CA/DE,SAAC/C,GAAU,IAEpB7R,EACA6R,EADA7R,SAAUC,EACV4R,EADU5R,UAAW8L,EACrB8F,EADqB9F,UAAWoN,EAChCtH,EADgCsH,oBAAqBE,EACrDxH,EADqDwH,YAE7CtV,EAAW/D,EAAfpE,GAQR,OACImW,EAAA3X,EAAA4X,cAACqD,GAAD,KACItD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,2BACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,kBAAkBtc,KAAK,UAAzC,SAEJoc,EAAA3X,EAAA4X,cAAA,wBAEJD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,iBACXF,EAAA3X,EAAA4X,cAACsH,GAAD,CACItZ,SAAUA,EACVC,UAAWA,EACXoY,eAAa,EACbC,WAAS,EACTC,YAAa,CAAErC,SAAS,GACxBsC,cAAe,CAAEtC,SAAS,EAAMH,QAASsD,KAE7CtH,EAAA3X,EAAA4X,cAACuH,GAAD,CACIxN,UAAWA,EACXwM,YAAa,CAAErC,SAAS,EAAMH,QAtBhC,SAAA9S,GAAK,OAJvB,SAA4BuW,EAAIvW,GAC5B,OAAOuW,EAAGvW,EAAOc,GAGM0V,CAAmBN,EAAqBlW,KAuB/CuV,cAAe,CAAEtC,SAAS,MAGlCnE,EAAA3X,EAAA4X,cAACsD,GAAD,KACIvD,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,iBAAiBtc,KAAK,UAAxC,gCChCL+jB,GAfK,SAAC7H,GAAU,IACnBC,EAAaD,EAAbC,SACR,OACIC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,QACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,cACVC,IAAMC,SAASvX,IAAIkX,EAAU,SAAAM,GAAK,OAAIA,OC2BxCuH,GAhCG,SAAC9H,GAAU,IACjB7M,EAAoC6M,EAApC7M,MAAO4U,EAA6B/H,EAA7B+H,WAAYC,EAAiBhI,EAAjBgI,aAEvBje,EACAoJ,EADApJ,GAAIC,EACJmJ,EADInJ,KAAMC,EACVkJ,EADUlJ,OAAQG,EAClB+I,EADkB/I,MAEhBuB,EADFwH,EADyBrI,OAEPa,QAAU,EAE1ByU,EAAS,eAAA9c,OAAkBykB,EAAa,WAAa,IAE3D,OACI7H,EAAA3X,EAAA4X,cAAA,OAAKC,UAAWA,EAAW+D,QAAS,kBAAM6D,EAAaje,KACnDmW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBAAmBM,KAAK,MAAMC,aAAW,UACnD1W,GAELiW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,qBAAf,IAAA9c,OACS0G,IAETkW,EAAA3X,EAAA4X,cAAA,YACIC,UAAU,+BACVzS,MAAOvD,EAAMC,GAAKsB,EAClBlE,IAAK2C,EAAMC,OCnBrB4d,GAAsB,SAACja,EAAS8E,EAAQoV,EAAeC,GACzD,OAAKrV,EAMDoN,EAAA3X,EAAA4X,cAAA,OAAKC,UAAS,4CAAA9c,OAA8C0K,IACvD8E,EAAO/J,IAAI,SAACoK,GAAU,IACXpJ,EAAOoJ,EAAPpJ,GACFge,EAAaG,IAAkBne,EACrC,OACImW,EAAA3X,EAAA4X,cAACiI,GAAD,CACIngB,IAAKkL,EAAMpJ,GACXoJ,MAAOA,EACP4U,WAAYA,EACZC,aAAcG,OAb1BjI,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,iCAAf,SAuCGiI,GAlBK,SAACrI,GAAU,IACnBsI,EAA8CtI,EAA9CsI,SAAUJ,EAAoClI,EAApCkI,cAAeC,EAAqBnI,EAArBmI,iBACnBI,EAA2BD,EAAjC5M,KAAqB8M,EAAYF,EAAjB3M,IAExB,OACIuE,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,wBACV6H,GAAoB,YAAaM,EAAUL,EAAeC,GAC1DF,GAAoB,WAAYO,EAASN,EAAeC,KCRtDM,GAxBc,SAAA1T,GAAA,IAAG2T,EAAH3T,EAAG2T,WAAYR,EAAfnT,EAAemT,cAAf,OACzBhI,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,yBAEPsI,EAAW3f,IAAI,SAACoK,EAAOwV,GAAU,IAEzB5e,EACAoJ,EADApJ,GAAIiE,EACJmF,EADInF,QAAS/D,EACbkJ,EADalJ,OAEXhC,EAAG,GAAA3E,OAAMyG,EAAN,KAAAzG,OAAYqlB,GACfC,EAAgBV,IAAkBne,EAAK,WAAa,GAC1D,OACImW,EAAA3X,EAAA4X,cAAA,OAAKlY,IAAKA,EAAKmY,UAAS,wBAAA9c,OAA0B0K,EAA1B,KAAA1K,OAAqCslB,IACxD3e,2BCiDV4e,GAhBQ,SAAAC,GAAe,IAAZpb,EAAYob,EAAZpb,MACduH,EAAcvH,EAAduH,UACF8T,EAAoBC,KAAM/T,GAAWgU,OAAO,WAElD,OACI/I,EAAA3X,EAAA4X,cAAA,aAAA7c,OACSylB,EADT,MAhDkB,SAAAhU,GAAuB,IAApB5B,EAAoB4B,EAApB5B,MAAOjN,EAAa6O,EAAb7O,OACxBkN,EAAiBlN,EAAjBkN,OAAQtP,EAASoC,EAATpC,KAChB,IAAKsP,EACD,MAAO,wBAHkC,IAK5B8V,EAAoC9V,EAA7CpF,QAA8Bmb,EAAe/V,EAArBpJ,KAChC,GAAa,UAATlG,EACA,OACIoc,EAAA3X,EAAA4X,cAACD,EAAA3X,EAAM6gB,SAAP,KACIlJ,EAAA3X,EAAA4X,cAAA,QAAMO,KAAK,MAAMC,aAAW,UACvB,iBAELT,EAAA3X,EAAA4X,cAAA,KAAGC,UAAW8I,GACTC,GAEJ,UAIb,IAAME,EAAYlW,EAAMnJ,KAClBsf,EAAenW,EAAMnF,QACnBrC,EAAWzF,EAAOmN,cAAlB1H,OACR,OAAQzF,EAAOpC,MACX,IAAK,SACD,OACIoc,EAAA3X,EAAA4X,cAACD,EAAA3X,EAAM6gB,SAAP,KACIlJ,EAAA3X,EAAA4X,cAAA,KAAGC,UAAWkJ,GACTD,GAEJ,YACDnJ,EAAA3X,EAAA4X,cAAA,KAAGC,UAAW8I,GACTC,GANT,QAAA7lB,OAQaqI,EARb,aAYR,QACI,MAAO,oEAYN4d,CAAkB7b,KCehB8b,GAhEG,SAAAzU,GAAkB,IAAf0U,EAAe1U,EAAf0U,SAAeC,EACMC,oBAAS,GADfC,EAAAnlB,OAAA8R,GAAA,EAAA9R,CAAAilB,EAAA,GACzBG,EADyBD,EAAA,GACZE,EADYF,EAAA,GAE1BG,EAAiBC,iBAAO,MAExBC,EAAmB,WACrB,IAAMC,EAAUH,EAAe9O,QACvBkP,EAA0CD,EAA1CC,aAAcC,EAA4BF,EAA5BE,aAEtB,MAAO,CACHF,UACAC,eACAE,OAAQD,EACRE,UAN8CJ,EAAdI,UAOhCC,aAAcJ,EAAeC,IAYrCI,oBAAU,YARa,WAAM,IAAAC,EACSR,IAA1BC,EADiBO,EACjBP,QAASK,EADQE,EACRF,aAEbV,IACAK,EAAQI,UAAYC,EAAe,EAAIA,EAAe,GAK1DG,KAGJ,IAKMC,EAAsB,WACpBZ,EAAe9O,SAAW6O,EANV,WAAM,IAAAc,EACUX,IACpC,OAF0BW,EAClBN,YADkBM,EACPL,aAK0BM,KAG3CC,EAAsBjS,aAAS,IAAK,WAAQ8R,MAMlD,OACIzK,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,aACXF,EAAA3X,EAAA4X,cAAA,MAAIC,UAAU,oBAAd,eACAF,EAAA3X,EAAA4X,cAAA,OACIC,UAAU,qBACV2K,IAAKhB,EACLiB,SAVa,WACrBF,MAYYrB,EAAS1gB,IAAI,SAAA2E,GAAK,OAAIwS,EAAA3X,EAAA4X,cAAC8K,GAAD,CAAgBhjB,IAAKyF,EAAMsH,MAAOtH,MAAOA,SCzCpEwd,GAbWlR,aAFR,SAAAjU,GAAK,OAAIA,EAAMiV,QAI7B,SAACA,GACG,IAAKA,IAAWA,EAAO5W,MAAS,MAAO,GAD/B,IAGSqT,EAA0CuD,EAAnD5W,MAASqT,SAAYpD,EAA8B2G,EAA9B3G,YAAaC,EAAiB0G,EAAjB1G,aAC1C,OAAsB,IAAlBA,EAA8B,CAAEgH,MAAO,IAEzB7D,EAASpD,GAAaC,GAAhCgH,OACQ,KCiDTyH,gBARS,SAAAhd,GAAK,MAAK,CAC9BuV,MAAO4P,GAAkBnlB,KAGF,SAAA4R,GAAQ,MAAK,CACpCwT,mBAAoB,kBAAMxT,EAASzD,SAGxB6O,CAxDG,SAAC/C,GAAU,IAAA0J,EACSC,mBAAS,GADlBC,EAAAnlB,OAAA8R,GAAA,EAAA9R,CAAAilB,EAAA,GAClB0B,EADkBxB,EAAA,GACPyB,EADOzB,EAAA,GAEjBtO,EAA8B0E,EAA9B1E,MAAO6P,EAAuBnL,EAAvBmL,mBAEXG,EAAgB,GAEdC,EAAc,WAChBF,EAAaD,EAAY,GACpB9P,EAAM8P,EAAY,KACnBC,EAAa,GACbF,MAuBR,KAHK7P,GAASA,EAAMrV,QAAU,KAhBPqlB,EAAiB,IAmBpChQ,GAASA,EAAM8P,GAAY,KAAAI,EAGvBlQ,EAAM8P,IApBd,SAAmBnhB,EAAQD,EAAM+T,EAAMC,GACnCsN,EACIpL,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,YAAY+D,QAAS,kBAAMoH,MACtCrL,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAS,sCAAA9c,OAAwCya,IAClDmC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,qBAAqBnW,GACpCiW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBAAmBpW,IAEtCkW,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBAAmBpC,KAa9CyN,CAJ2BD,EAEvBvhB,OAFuBuhB,EAEfxhB,KAFewhB,EAETzN,KAFSyN,EAEHxN,MAK5B,OAAOsN,cC5BII,GAdO1R,aAFJ,SAAAjU,GAAK,OAAIA,EAAMiV,QAI7B,SAACA,GACG,IAAKA,IAAWA,EAAO5W,MACnB,MAAO,CACHunB,aAAc,WAHd,IAOOA,EAD8B3Q,EAArC5W,MAASqT,SAA4BuD,EAAhB3G,aACrByJ,MACR,OAAOrZ,OAAAgC,EAAA,EAAAhC,CAAA,GAAKuW,EAAZ,CAAoB2Q,mBCqCb5I,qBAXS,SAAAhd,GAAK,MAAK,CAC9B6lB,WAAY7lB,EAAM6lB,WAClBC,WAAYH,GAAc3lB,KAGH,SAAA4R,GAAQ,MAAK,CACpCmU,QAAS,SAAClY,GACN+D,EpE3CmB,SAAA/D,GAAI,MAAK,CAChC9P,KAAM2P,GACNpP,QAAS,CACLuP,QAEJ7P,KAAM,CACFiZ,cAAe,coEqCN+O,CAAYnY,OAIdmP,CA3CK,SAAC/C,GAAU,IACnB8L,EAAgF9L,EAAhF8L,QAAuBnY,EAAyDqM,EAAvE4L,WAAcjY,KAAqCY,EAAoByL,EAAlC6L,WAActX,cAepE,OAdAiW,oBAAU,WACN,IACMwB,EADcC,aAAM,IAAM,KACKC,UAAU,SAACtY,GACtB,WAAlBW,GACAuX,EAAQlY,KAGhB,OAAO,WACHoY,EAAiBG,gBAEtB,CAACL,EAASvX,IAKT2L,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,eACXF,EAAA3X,EAAA4X,cAAA,cAAA7c,OACQqQ,EAAO,OCjBZyY,GALKpS,aAFF,SAAAjU,GAAK,OAAIA,EAAM+M,QAI7B,SAAAA,GAAM,OAAInL,EAAQlD,OAAO6E,OAAOwJ,GAAS,aCkB9BuZ,GALOrS,aAjBJ,SAAAjU,GAAK,OAAIA,EAAM+M,QAmB7B,SAAAA,GAAM,OAAI3K,EAAO1D,OAAO6E,OAjBA,SAACwJ,GAYzB,OAX6BA,EAAO/J,IAAI,SAACoK,GASrC,MAPwB,CAAC1O,OAAAgC,EAAA,EAAAhC,CAAA,GAChB0O,GADe1O,OAAAgC,EAAA,EAAAhC,CAAA,GAEf0O,EAFe,CAER/D,UAAW+D,EAAM/D,UAAY+D,EAAM/I,MAAMI,OAFjC/F,OAAAgC,EAAA,EAAAhC,CAAA,GAGf0O,EAHe,CAGR/D,UAAW+D,EAAM/D,UAAgC,EAAnB+D,EAAM/I,MAAMI,OAHlC/F,OAAAgC,EAAA,EAAAhC,CAAA,GAIf0O,EAJe,CAIR/D,UAAW+D,EAAM/D,UAAgC,EAAnB+D,EAAM/I,MAAMI,OAJlC/F,OAAAgC,EAAA,EAAAhC,CAAA,GAKf0O,EALe,CAKR/D,UAAW+D,EAAM/D,UAAgC,EAAnB+D,EAAM/I,MAAMI,UAIlC8hB,OAKGC,CAAoBzZ,IAAU,eC+FlDiQ,qBAlBS,SAAAhd,GAAK,MAAK,CAC9BuiB,SAAU8D,GAAYrmB,GACtB2iB,WAAY2D,GAActmB,GAC1BymB,UAAWzmB,EAAMymB,UACjBpY,WAAY2Q,GAAsBhf,GAClCiV,OAAQ0Q,GAAc3lB,GACtBzB,YAAayB,EAAMzB,YACnB4jB,cAAeniB,EAAMuP,cAGE,SAAAqC,GAAQ,MAAK,CACpC8U,gBAAiB,SAACrY,EAAYhQ,GAC1BuT,ErEzGkB,SAACvD,EAAYhQ,GAAb,MAAwB,CAC9CN,KAAMgQ,GACNzP,QAAS,CACL+P,aACAhQ,SAEJL,KAAM,CACFO,YAAa,SqEkGJooB,CAAWtY,EAAYhQ,KAEpCuoB,WAAY,kBAAMhV,ErEnFY,CAC9B7T,KAAMmQ,GACN5P,QAAS,GACTN,KAAM,CACFO,YAAa,YqEgFjBsoB,YAAa,SAAAzZ,GAAK,OAAIwE,EAAStC,GAAkBlC,OAGtC4P,CApGA,SAAC/C,GAAU,IAElB5L,EAUA4L,EAVA5L,WACA4G,EASAgF,EATAhF,OACA1W,EAQA0b,EARA1b,YACAgkB,EAOAtI,EAPAsI,SACAJ,EAMAlI,EANAkI,cACAQ,EAKA1I,EALA0I,WACA8D,EAIAxM,EAJAwM,UACAC,EAGAzM,EAHAyM,gBACAE,EAEA3M,EAFA2M,WACAC,EACA5M,EADA4M,YAGEC,EAAYjP,GAAOtZ,GACFihB,EAAevK,EAA9BxG,cAfckV,EAiB0BC,mBAAS,uBAjBnCC,EAAAnlB,OAAA8R,GAAA,EAAA9R,CAAAilB,EAAA,GAiBfoD,EAjBelD,EAAA,GAiBGmD,EAjBHnD,EAAA,GAsCtB,OAnBAY,oBAAU,WAEN,OADAiC,EAAgBrY,EAAYyY,GACrB,WACHF,MAEL,CAACF,EAAiBE,EAAYvY,EAAYyY,IAE7CrC,oBAAU,WACFjF,GAA6B,YAAfA,IACdwH,EAAoB,sDACpBnU,WACI,WACImU,EAAoB,sDAExB,QAGT,CAACxH,IAGArF,EAAA3X,EAAA4X,cAAC6M,GAAD,KACI9M,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,kCACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,sBACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAW0M,GACZ5M,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,8BACVmF,IAGTrF,EAAA3X,EAAA4X,cAAC8M,GAAD,CACI3E,SAAUA,EACVJ,cAAeA,EACfC,iBAAkByE,KAG1B1M,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,oBACXF,EAAA3X,EAAA4X,cAAC+M,GAAD,MACAhN,EAAA3X,EAAA4X,cAACgN,GAAD,CACIzE,WAAYA,EACZR,cAAeA,KAGvBhI,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,mBACXF,EAAA3X,EAAA4X,cAACiN,GAAD,CAAW3D,SAAU+C,KAEzBtM,EAAA3X,EAAA4X,cAACkN,GAAD,UCpEDC,GARStT,aAFH,SAAAjU,GAAK,OAAIA,EAAM/B,WAIhC,SAACA,GAEG,OADyBA,EAAjB4B,eCOD2nB,GAdA,CACXC,OAAQ,CACJ,mGACA,0HAEJpP,KAAM,CACF,qJACA,oHACA,yFACA,uFACA,wHCmCOqP,GAzCG,SAAA1Y,GAAkB,IAAfnJ,EAAemJ,EAAfnJ,SACG8hB,EAAiBH,GAA5B3hB,GACH+hB,EAAcD,EAAaznB,OAAS,EAFVyjB,EAIoBC,mBAChDtiB,KAAKC,MAAMD,KAAKD,SAAWumB,IALC/D,EAAAnlB,OAAA8R,GAAA,EAAA9R,CAAAilB,EAAA,GAIzBkE,EAJyBhE,EAAA,GAILiE,EAJKjE,EAAA,GAAAkE,EAQkBnE,mBAC9C+D,EAAaE,IATeG,EAAAtpB,OAAA8R,GAAA,EAAA9R,CAAAqpB,EAAA,GAQzBE,EARyBD,EAAA,GAQNE,EARMF,EAAA,GAqBhC,OACI7N,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAAA,kBACC6N,EACD9N,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,wBACXF,EAAA3X,EAAA4X,cAAA,UAAQrc,KAAK,SAASsc,UAAU,qBAAqB+D,QAAS,kBAd9C,WACxB,IAAMwE,EAASiF,EAAqB,EAAKD,EACnC,EACAC,EAAqB,EACrB5P,EAAO0P,EAAa/E,GAC1BkF,EAAsBlF,GACtBsF,EAAqBjQ,GAQuDkQ,KAApE,QAGAhO,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,yBAAhB,IAAA9c,OACSsqB,EAAqB,EAD9B,KAAAtqB,OACmCqqB,EAAc,OCElDQ,GApCI,CACfC,OAAQ,CACJriB,EAAG,CACC,YACA,WACA,cAEJC,EAAG,CACC,aAGJC,EAAG,IAEPoiB,MAAO,CACHtiB,EAAG,CACC,aACA,YACA,eACA,YACA,cAEJC,EAAG,CACC,cAEJC,EAAG,IAEPqiB,IAAK,CACD1L,KAAM,CACF,aAEJC,MAAO,CACH,gBCEG0L,GAjCC,CACZ/d,KAAM,CACFxG,KAAM,OACNlG,KAAM,YACN8H,SAAU,YAEd6E,MAAO,CACHzG,KAAM,QACNlG,KAAM,YACN8H,SAAU,YAEd4iB,KAAM,CACFxkB,KAAM,OACNlG,KAAM,SACN8H,SAAU,QAEdwiB,OAAQ,CACJpkB,KAAM,SACNlG,KAAM,YACN8H,SAAU,UAEdyiB,MAAO,CACHrkB,KAAM,QACNlG,KAAM,YACN8H,SAAU,SAEd0iB,IAAK,CACDtkB,KAAM,WACNlG,KAAM,YACN8H,SAAU,QC1BZ6iB,GAAmB,SAACC,GAAiB,IAAAC,EACTD,EAAarY,MAAM,KADVuY,EAAAnqB,OAAA8R,GAAA,EAAA9R,CAAAkqB,EAAA,GAChCE,EADgCD,EAAA,GACpBE,EADoBF,EAAA,GAAAG,EAENR,GAAQM,GAAjC7kB,EAF+B+kB,EAE/B/kB,KAAMlG,EAFyBirB,EAEzBjrB,KAAM8H,EAFmBmjB,EAEnBnjB,SACpB,MAAQ,CACJ7B,GAAE,UAAAzG,OAAYyD,KACdoG,OAAQuhB,EACR1kB,OACAlG,OACA8H,WACAijB,aACAC,YCGAE,GDCc,SAAAN,GAAY,OAAID,GAAiBC,ICA/Czd,GAAgCjE,EAAhBM,GAAgBN,GA6EzB+V,qBACX,KAPuB,SAAApL,GAAQ,MAAK,CACpCsX,SAAU,SAAAhf,GAAS,OAAI0H,EhG5EA,SAAA1H,GAAS,MAAK,CACrCnM,KAAMgD,EACNzC,QAAS,CACL4L,aAEJlM,KAAM,CACF0N,UAAW,WgGsEiByd,CAAYjf,KAC5Ckf,SAAU,SAAAC,GAAS,OAAIzX,EtFpFgB,CACvC7T,KAAM+M,GACNxM,QAAS,CACL+M,MsFiF8Cge,GtF/ElDrrB,KAAM,CACF0N,UAAW,gBsF+Ef4d,aAAc,SAAAze,GAAS,OAAI+G,ExF7ED,SAAA/G,GAAS,MAAK,CACxC9M,KAAMwM,GACNjM,QAAS,CACLuM,aAEJ7M,KAAM,CACF0N,UAAW,cwFuEqB6d,CAAe1e,OAGxCmS,CA3EG,SAAC/C,GAAU,IAErBuP,EACAvP,EADAuP,QAASJ,EACTnP,EADSmP,SAAUE,EACnBrP,EADmBqP,aAAcJ,EACjCjP,EADiCiP,SAG/BO,EAAcD,EAAQxmB,IAAI,SAAC2lB,GAC7B,IAAMe,EAAaT,GAAcN,GAE7B3kB,EACA0lB,EADA1lB,GAAIjG,EACJ2rB,EADI3rB,KAAYmgB,EAChBwL,EADUzlB,KAAa6kB,EACvBY,EADuBZ,WAAYC,EACnCW,EADmCX,QAEjC7Q,EAAS,GAEf,OAAQna,GACJ,IAAK,YACDurB,EAAa5qB,OAAAC,EAAA,EAAAD,CAAA,GAAGoqB,EAAalY,SAASmY,EAAS,MAC/C7Q,EAAO1S,KAAOuV,GAAGE,UAAU6N,GAAYtjB,KACvC0S,EAAOyR,OAAP,GAAApsB,OAAmBwrB,EAAnB,KAAAxrB,OAA8B2gB,GAC9B,MAEJ,IAAK,SACD,IAAM0L,EAAUpgB,GAAOuf,GACvBG,EAAS,CAACU,IAFC,IAGGthB,EAAuBshB,EAA7B7rB,KAAYkG,EAAiB2lB,EAAjB3lB,KAAMiE,EAAW0hB,EAAX1hB,OAC1BgQ,EAAO1S,KAAO1B,EAAMwE,GAAMpE,OAAOgE,GACjCgQ,EAAOyR,OAAP,GAAApsB,OAAmB0G,EAAnB,oBACA,MAEJ,IAAK,YACD,IAAM4lB,EAAmBzB,GAAWU,GAAYC,GAC1Ce,EAAUD,EAAiBvoB,KAAKC,MAClCD,KAAKD,SAAWwoB,EAAiB3pB,SAErCkpB,EAAS,CAACU,IACV,IAAMC,EAAcxiB,GAAY2D,GAAe4e,IACvCtkB,EAAeukB,EAAfvkB,KAAMvB,EAAS8lB,EAAT9lB,KACdiU,EAAO1S,KAAOA,EACd0S,EAAOyR,OAAS1lB,EAQxB,OAAOvF,OAAAgC,EAAA,EAAAhC,CAAA,CAAEsF,MAAOkU,KAGpB,OACIiC,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,oBACVoP,EAAYzmB,IAAI,SAAC+E,GAAS,IACf/D,EAAqB+D,EAArB/D,GAAIwB,EAAiBuC,EAAjBvC,KAAMmkB,EAAW5hB,EAAX4hB,OAClB,OACIxP,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,eAAenY,IAAK8B,GAC/BmW,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,sBAAsB7U,GACtC2U,EAAA3X,EAAA4X,cAAA,QAAMC,UAAU,wBAAwBsP,SCQjD3M,qBALS,SAAAhd,GAAK,MAAK,CAC9BzB,YAAayB,EAAMzB,YACnByrB,OAAQzC,GAAgBvnB,KAGbgd,CAnEM,SAAC/C,GAAU,IAExB1b,EACA0b,EADA1b,YAAayrB,EACb/P,EADa+P,OAIXR,EADY3R,GAAOtZ,GACC2Z,OAAO8R,GANLC,EAQP,WACjB,OAAQD,GACJ,IAAK,QACD,MAAO,CACHE,WAAY,iCACZC,YAAa,sCAGrB,IAAK,SACD,MAAO,CACHD,WAAY,8BACZC,YAAa,yCAGrB,IAAK,OACL,QACI,MAAO,CACHD,WAAY,WACZC,YAAa,wCAKOC,GAA5BF,EA/BoBD,EA+BpBC,WAAYC,EA/BQF,EA+BRE,YAEpB,OACIhQ,EAAA3X,EAAA4X,cAACqD,GAAD,KACItD,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,oCACXF,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,gBACXF,EAAA3X,EAAA4X,cAAA,MAAIC,UAAW8P,GACVD,IAIT/P,EAAA3X,EAAA4X,cAACiQ,GAAD,CAASb,QAASA,IAEJ,SAAXQ,GAAsB7P,EAAA3X,EAAA4X,cAACkQ,GAAD,CAAWzkB,SAAUmkB,IAE9C7P,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GAAI3c,KACtCgc,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,eAAetc,KAAK,UAAtC,sBAEJoc,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GAAIhd,KACtCqc,EAAA3X,EAAA4X,cAAA,UAAQC,UAAU,eAAetc,KAAK,UAAtC,qBC5CLwsB,IAVHC,GAAA,GAAA9rB,OAAAC,EAAA,EAAAD,CAAA8rB,GACP5rB,EAAmBub,EAAA3X,EAAA4X,cAACqQ,GAAD,OADZ/rB,OAAAC,EAAA,EAAAD,CAAA8rB,GAEP5rB,EAAuBub,EAAA3X,EAAA4X,cAACsQ,GAAD,OAFhBhsB,OAAAC,EAAA,EAAAD,CAAA8rB,GAGP5rB,EAAwBub,EAAA3X,EAAA4X,cAACuQ,GAAD,OAHjBjsB,OAAAC,EAAA,EAAAD,CAAA8rB,GAIP5rB,EAAoBub,EAAA3X,EAAA4X,cAACwQ,GAAD,OAJblsB,OAAAC,EAAA,EAAAD,CAAA8rB,GAKP5rB,EAAmBub,EAAA3X,EAAA4X,cAACyQ,GAAD,OALZnsB,OAAAC,EAAA,EAAAD,CAAA8rB,GAMP5rB,EAAqBub,EAAA3X,EAAA4X,cAAC0Q,GAAD,OANdpsB,OAAAC,EAAA,EAAAD,CAAA8rB,GAOP5rB,EAA4Bub,EAAA3X,EAAA4X,cAAC2Q,GAAD,OAPrBP,ICyFGxN,6BAJS,SAAAhd,GAAK,MAAK,CAC9B0R,SAAU1R,EAAM0R,WAGLsL,CA1FH,SAAAhO,GAAkB,IAAf0C,EAAe1C,EAAf0C,SACH3T,EAAS2T,EAAT3T,KACFitB,EAAmB/G,iBAAO,MAC1BgH,EAAcC,SAASC,gBAHH,IAAAxH,EAakBC,mBAAS,CAAEwH,MAAO,EAAG9G,OAAQ,IAb/CT,EAAAnlB,OAAA8R,GAAA,EAAA9R,CAAAilB,EAAA,GAanB0H,EAbmBxH,EAAA,GAaHyH,EAbGzH,EAAA,GAe1BY,oBAAU,WACN,SAAS8G,IACaP,EAAiB9V,QACzBmF,UAAY,uBAEtB,IAJoBmR,EAX5B,WAA+B,IAAAC,EACwB9R,OACnD,MAAO,CACHyR,MAHuBK,EACnBC,WAGJpH,OAJuBmH,EACAE,aAgBWC,GAAnBC,EANKL,EAMZJ,MAAmBU,EANPN,EAMDlH,OAEb8G,EAASS,EAAKC,EAHD,KAIZA,GAAmBD,EAJP,KAKRC,EACAD,EACJC,GARa,EAAI,OAQGD,EAChBC,GATS,EAAI,MAUbD,EAELvH,EAAUuH,EAAKC,EACdD,GAba,EAAI,OAaGC,EAChBD,GAdS,EAAI,MAebC,EAdQ,KAeZD,GAAmBC,EAfP,KAgBRD,EACAC,EAGLC,GADSzH,EAAS8G,EAAQ9G,EAAS8G,GACf,KAE1BE,EAAkB,CAAEF,QAAO9G,WAC3B2G,EAAYe,MAAMD,SAAlB,GAAAxuB,OAAgCwuB,EAAhC,MAEJ,IAAME,EAAyBnZ,aAAS,IAAK,WACzCyY,MAIJ,OAFAA,IACA5R,OAAOuS,iBAAiB,SAAUD,GAC3B,kBAAMtS,OAAOwS,oBAAoB,SAAUF,KACnD,CAAChB,EAAYe,MAAMD,WApDI,IAsDXK,EAAkCf,EAAzCD,MAA0BiB,EAAehB,EAAvB/G,OAEZgI,EAAiB5a,EAAvB3T,KAMFwuB,EAJFD,IAAiBhvB,GACdgvB,IAAiB1uB,EAIlB,GAEEuc,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,wBACXF,EAAA3X,EAAA4X,cAACS,GAAArY,EAAD,CAAM6X,UAAU,sBAAsBS,GAAIhd,KACtCqc,EAAA3X,EAAA4X,cAAA,UAAQrc,KAAK,UAAb,UAKhB,OACIoc,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,cAAc2K,IAAKgG,EAAkBgB,MAAO,CAAEZ,MAAOgB,EAAW9H,OAAQ+H,IACnFlS,EAAA3X,EAAA4X,cAAA,OAAKC,UAAU,eACVkQ,GAAOxsB,IAEXwuB,MC/EPpZ,WAAQ0G,MAEd2S,iBACIrS,EAAA3X,EAAA4X,cAACqS,EAAA,SAAD,CAAUtZ,MAAOA,IACbgH,EAAA3X,EAAA4X,cAACsS,GAAD,OAEJxB,SAASyB,eAAe","file":"static/js/main.c55fde88.chunk.js","sourcesContent":["export const ROUTING = '[ROUTING]'\nexport const GOTO_HOME = `${ROUTING} Go to Home page`\nexport const GOTO_SETTINGS = `${ROUTING} Go to Settings page`\nexport const GOTO_ADVENTURE = `${ROUTING} Go to Adventure page`\nexport const GOTO_SQUAD = `${ROUTING} Go to Squad page`\nexport const GOTO_UNIT = `${ROUTING} Go to Unit page`\nexport const GOTO_BATTLE = `${ROUTING} Go to Battle page`\nexport const GOTO_BATTLE_RESULT = `${ROUTING} Go to Battle Result page`\n\nexport const goToHome = () => ({\n    type: GOTO_HOME,\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToSettings = () => ({\n    type: GOTO_SETTINGS,\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToAdventure = () => ({\n    type: GOTO_ADVENTURE,\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToSquad = () => ({\n    type: GOTO_SQUAD,\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToUnit = target => ({\n    type: GOTO_UNIT,\n    payload: {\n        unitID: target,\n    },\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToBattle = stage => ({\n    type: GOTO_BATTLE,\n    payload: {\n        battleStage: stage,\n    },\n    meta: {\n        gameState: 'routing',\n    },\n})\nexport const goToBattleResult = () => ({\n    type: GOTO_BATTLE_RESULT,\n    meta: {\n        gameState: 'routing',\n    },\n})\n","import * as routes from '../actions/routing/route.actions'\n\nconst routePaths = {\n    [routes.GOTO_HOME]: '/',\n    [routes.GOTO_SETTINGS]: '/settings',\n    [routes.GOTO_ADVENTURE]: '/adventure',\n    [routes.GOTO_SQUAD]: '/squad',\n    [routes.GOTO_UNIT]: '/unit/:unitID',\n    [routes.GOTO_BATTLE]: {\n        path: '/battle/:battleStage',\n        confirmLeave: () => {\n            return 'Coward! Are you sure you want to from the battlefield? Things might break...'\n        }\n    },\n    [routes.GOTO_BATTLE_RESULT]: '/battleResult',\n}\n\nexport default routePaths\n","import { connectRoutes } from 'redux-first-router'\nimport routePaths from './routePaths'\n\nconst {\n    reducer,\n    middleware,\n    enhancer,\n    initialDispatch,\n} = connectRoutes(routePaths, { initialDispatch: false })\n\nexport const routerMiddleware = middleware\nexport const routerEnhancer = enhancer\nexport const initDispatch = initialDispatch\nexport const locationReducer = reducer\n","export const GAMESTATE = '[GAMESTATE]'\nexport const RESET_GAME_STATE = `${GAMESTATE} Reset Game State`\nexport const ADD_PAGE_STATE = `${GAMESTATE} Add current page to Game State`\nexport const SET_BATTLE_RESULT_STATE = `${GAMESTATE} Set current battle result in Game State`\n\nexport const resetGameState = () => ({\n    type: RESET_GAME_STATE,\n    payload: {},\n})\n\nexport const addPageState = page => ({\n    type: ADD_PAGE_STATE,\n    payload: {\n        page,\n    },\n    meta: {\n        persisted: 'gameState',\n    },\n})\n\nexport const setBattleResultState = battleResult => ({\n    type: SET_BATTLE_RESULT_STATE,\n    payload: {\n        battleResult,\n    },\n    meta: {\n        battleStage: battleResult,\n        persisted: 'gameState',\n    },\n})\n\n","import cloneDeep from 'lodash/cloneDeep'\nimport { RESET_GAME_STATE, ADD_PAGE_STATE, SET_BATTLE_RESULT_STATE } from '../../actions/game/gameState.actions'\nimport { GOTO_HOME } from '../../actions/routing/route.actions'\n\nconst initialState = {\n    page: [GOTO_HOME],\n    battleResult: undefined,\n}\n\nconst gameStateReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case RESET_GAME_STATE: {\n            return initialState\n        }\n\n        case ADD_PAGE_STATE: {\n            const { page } = payload\n            const { page: oldPage } = state\n\n            const oldPageIndex = oldPage.findIndex(i => i === page)\n\n            if (oldPageIndex === -1) {\n                const newPage = [...oldPage, page]\n                return { ...cloneDeep(state), page: newPage }\n            }\n            const slicedPage = [...oldPage.slice(0, oldPageIndex + 1)]\n            return { ...cloneDeep(state), page: slicedPage }\n        }\n\n        case SET_BATTLE_RESULT_STATE: {\n            const { battleResult } = payload\n            return { ...cloneDeep(state), battleResult }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default gameStateReducer\n","export const ROSTER = '[ROSTER]'\nexport const INIT_ROSTER = `${ROSTER} Set initial roster members`\nexport const ADD_TO_ROSTER = `${ROSTER} Add new roster members`\n\nexport const initialiseRoster = () => ({\n    type: INIT_ROSTER,\n    payload: {},\n    meta: {\n        persisted: 'roster',\n        checkRoster: 'initialiseSquad',\n    },\n})\n\nexport const addToRoster = baseUnits => ({\n    type: ADD_TO_ROSTER,\n    payload: {\n        baseUnits,\n    },\n    meta: {\n        persisted: 'roster',\n    },\n})\n","export const randomFixedInt = (length) => {\n    const { random, floor } = Math\n    const min = 10 ** (length - 1)\n    const max = min * 9\n    return floor(min + random() * max)\n}\n\nexport const createUniqueId = () => {\n    const date = new Date()\n    const time = date.getTime()\n    const randomNumber = randomFixedInt(4)\n    return `${time}_${Math.floor(time / randomNumber)}`\n}\n\nexport const groupBy = (objectArray, property) => objectArray.reduce((acc, obj) => {\n    const key = obj[property]\n    if (!acc[key]) {\n        acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n}, {})\n\nexport const sortBy = (arr, attribute) => {\n    const compare = (a, b) => {\n        if (a[attribute] < b[attribute]) { return -1 }\n        if (a[attribute] > b[attribute]) { return 1 }\n        return 0\n    }\n    return [].concat(arr).sort(compare)\n}\n\nconst mergeNumbers = (numA, numB) => {\n    const numAVal = numA || 0\n    const numBVal = numB || 0\n    return numAVal + numBVal\n}\nconst mergeStrings = (textA, textB) => textB || textA\nconst mergeMixedValues = (keyObject, values) => {\n    switch (typeof keyObject) {\n        case 'number': {\n            return mergeNumbers(...values)\n        }\n        case 'string': {\n            return mergeStrings(...values)\n        }\n        case 'object': {\n            return mergeObjects(...values) // eslint-disable-line no-use-before-define\n        }\n        default: {\n            return undefined\n        }\n    }\n}\nexport const mergeObjects = (objA, objB) => {\n    const sumObjects = {}\n    const mergedObj = {\n        ...objA,\n        ...objB,\n    }\n    Object.keys(mergedObj).map((key) => {\n        const oldValue = objA[key]\n        const newValue = objB[key]\n        const valueTypesDiffer = typeof oldValue !== typeof newValue\n        const oldValueIsUndefined = typeof oldValue === 'undefined'\n        const newValueIsUndefined = typeof newValue === 'undefined'\n\n        if (newValue === false) {\n            return false\n        }\n        if (oldValueIsUndefined) {\n            sumObjects[key] = newValue\n        } else\n        if (newValueIsUndefined) {\n            sumObjects[key] = oldValue\n        } else\n        if (valueTypesDiffer) {\n            sumObjects[key] = newValue\n        } else {\n            sumObjects[key] = mergeMixedValues(mergedObj[key], [oldValue, newValue])\n        }\n        return true\n    })\n    return sumObjects\n}\n","const RACES = {\n    HUMAN: {\n        ID: 'HUMAN',\n        name: 'Human',\n        avatar: { male: '👨', female: '👩' },\n        stats: {\n            hp: 100, attack: 40, defense: 30, rate: 50,\n        },\n    },\n    ELF: {\n        ID: 'ELF',\n        name: 'Elf',\n        avatar: { male: '🧝‍♂️', female: '🧝‍♀️' },\n        stats: {\n            hp: 80, attack: 35, defense: 20, rate: 35,\n        },\n    },\n    FAIRY: {\n        ID: 'FAIRY',\n        name: 'Fairy',\n        avatar: {\n            male: '🧚‍♂️', female: '🧚‍♀️',\n        },\n        stats: {\n            hp: 60, attack: 25, defense: 10, rate: 25,\n        },\n    },\n    ORC: {\n        ID: 'ORC',\n        name: 'Orc',\n        avatar: { male: '👹', female: '👹' },\n        stats: {\n            hp: 140, attack: 30, defense: 30, rate: 50,\n        },\n    },\n    GOBLIN: {\n        ID: 'GOBLIN',\n        name: 'Goblin',\n        avatar: { male: '👺', female: '👺' },\n        stats: {\n            hp: 60, attack: 30, defense: 10, rate: 35,\n        },\n    },\n    GHOST: {\n        ID: 'GHOST',\n        name: 'Ghost',\n        avatar: {\n            male: '👻', female: '👻',\n        },\n        stats: {\n            hp: 30, attack: 20, defense: 80, rate: 60,\n        },\n        status: {\n            undead: true,\n        },\n    },\n    SKELETON: {\n        ID: 'SKELETON',\n        name: 'Skeleton',\n        avatar: {\n            male: '☠️', female: '💀',\n        },\n        stats: {\n            hp: 80, attack: 15, defense: 15, rate: 40,\n        },\n        status: {\n            undead: true,\n        },\n    },\n    DRAGON: {\n        ID: 'DRAGON',\n        name: 'Skeleton',\n        avatar: {\n            male: '🐲', female: '🐲',\n        },\n        stats: {\n            hp: 1200, attack: 80, defense: 60, rate: 120,\n        },\n    },\n    VAMPIRE: {\n        ID: 'VAMPIRE',\n        name: 'Vampire',\n        avatar: {\n            male: '🧛‍♂️', female: '🧛‍♀️',\n        },\n        stats: {\n            hp: 250, attack: 40, defense: 25, rate: 80,\n        },\n        status: {\n            undead: true,\n        },\n    },\n    GENIE: {\n        ID: 'GENIE',\n        name: 'Genie',\n        avatar: {\n            male: '🧞‍♂️', female: '🧞‍♀️',\n        },\n        stats: {\n            hp: 120, attack: 50, defense: 10, rate: 70,\n        },\n    },\n    ZOMBIE: {\n        ID: 'ZOMBIE',\n        name: 'Zombie',\n        avatar: {\n            male: '🧟‍♂️', female: '🧟‍♀️',\n        },\n        stats: {\n            hp: 140, attack: 30, defense: 50, rate: 120,\n        },\n    },\n    status: {\n        undead: true,\n    },\n}\n\nexport default RACES\n","const ITEMS = {\n    SWORD_001: {\n        ID: 'SWORD_001',\n        name: 'gladius',\n        type: 'sword',\n        icon: '🗡',\n        range: 10,\n        rate: 20,\n        slots: 1,\n        slot: 'hand',\n        damage: [\n            {\n                category: 'physical',\n                element: 'slashing',\n                tier: {\n                    1: 10,\n                    2: 12,\n                    3: 15,\n                    4: 19,\n                    5: 24,\n                },\n            },\n        ],\n    },\n    SWORD_011: {\n        ID: '011',\n        name: 'flame blade',\n        type: 'sword',\n        icon: '🗡🔥',\n        range: 10,\n        rate: 20,\n        slots: 1,\n        slot: 'hand',\n        damage: [\n            {\n                category: 'physical',\n                element: 'slashing',\n                tier: {\n                    1: 8,\n                    2: 10,\n                    3: 13,\n                    4: 17,\n                    5: 22,\n                },\n            },\n            {\n                category: 'magical',\n                element: 'fire',\n                tier: {\n                    1: 4,\n                    2: 6,\n                    3: 9,\n                    4: 13,\n                    5: 18,\n                },\n            },\n        ],\n        stats: {\n            rate: -10,\n        },\n    },\n    MACE_001: {\n        ID: 'MACE_001',\n        name: 'hammer',\n        type: 'mace',\n        icon: '🔨',\n        range: 15,\n        rate: 25,\n        slots: 1,\n        slot: 'hand',\n        damage: [\n            {\n                category: 'physical',\n                element: 'blunt',\n                tier: {\n                    1: 12,\n                    2: 14,\n                    3: 17,\n                    4: 21,\n                    5: 26,\n                },\n            },\n        ],\n    },\n    DAGGER_001: {\n        ID: 'DAGGER_001',\n        name: 'kitchen knife',\n        type: 'dagger',\n        icon: '🔪',\n        range: 10,\n        rate: 10,\n        slots: 1,\n        slot: 'hand',\n        damage: [\n            {\n                category: 'physical',\n                element: 'piercing',\n                tier: {\n                    1: 7,\n                    2: 9,\n                    3: 12,\n                    4: 16,\n                    5: 21,\n                },\n            },\n        ],\n    },\n    BOW_001: {\n        ID: 'BOW_001',\n        name: 'wooden bow',\n        type: 'bow',\n        icon: '🏹',\n        range: 100,\n        rate: 35,\n        slots: 2,\n        slot: 'twohanded',\n        damage: [\n            {\n                category: 'physical',\n                element: 'piercing',\n                tier: {\n                    1: 18,\n                    2: 21,\n                    3: 25,\n                    4: 30,\n                    5: 36,\n                },\n            },\n        ],\n    },\n    SHIELD_001: {\n        ID: 'SHIELD_001',\n        name: 'simple shield',\n        type: 'shield',\n        icon: '🛡',\n        range: 10,\n        rate: 15,\n        slots: 1,\n        slot: 'offhand',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 10,\n                    2: 13,\n                    3: 16,\n                    4: 19,\n                    5: 22,\n                },\n            },\n        ],\n    },\n    SHIELD_011: {\n        ID: 'SHIELD_011',\n        name: 'earth shield',\n        type: 'shield',\n        icon: '🛡🥔',\n        range: 10,\n        rate: 25,\n        slots: 1,\n        slot: 'offhand',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 15,\n                    2: 18,\n                    3: 21,\n                    4: 24,\n                    5: 27,\n                },\n            },\n            {\n                category: 'magical',\n                element: 'earth',\n                tier: {\n                    1: 4,\n                    2: 6,\n                    3: 9,\n                    4: 13,\n                    5: 18,\n                },\n            },\n        ],\n        stats: {\n            hp: 25,\n        },\n    },\n    TORSO_001: {\n        ID: 'TORSO_001',\n        name: 'protective shirt',\n        type: 'heavy armor chest',\n        slot: 'torso',\n        icon: '👕',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 20,\n                    2: 23,\n                    3: 26,\n                    4: 29,\n                    5: 32,\n                },\n            },\n        ],\n    },\n    TROUSERS_001: {\n        ID: 'TROUSERS_001',\n        name: 'protective pants',\n        type: 'heavy armor legs',\n        slot: 'legs',\n        icon: '👖',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 14,\n                    2: 17,\n                    3: 20,\n                    4: 23,\n                    5: 26,\n                },\n            },\n        ],\n    },\n    BOOTS_001: {\n        ID: 'BOOTS_001',\n        name: 'protective boots',\n        type: 'heavy armor feet',\n        slot: 'feet',\n        icon: '👞',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 14,\n                    2: 17,\n                    3: 20,\n                    4: 23,\n                    5: 26,\n                },\n            },\n        ],\n    },\n    GLOVES_001: {\n        ID: 'GLOVES_001',\n        name: 'protective gauntlets',\n        type: 'heavy armor hands',\n        slot: 'hands',\n        icon: '🧤',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 14,\n                    2: 17,\n                    3: 20,\n                    4: 23,\n                    5: 26,\n                },\n            },\n        ],\n    },\n    HELMET_001: {\n        ID: 'HELMET_001',\n        name: 'protective Helmet',\n        type: 'heavy armor helmet',\n        slot: 'head',\n        icon: '⛑',\n        protection: [\n            {\n                category: 'physical',\n                element: 'all',\n                tier: {\n                    1: 14,\n                    2: 17,\n                    3: 20,\n                    4: 23,\n                    5: 26,\n                },\n            },\n        ],\n    },\n}\n\nexport default ITEMS\n","import { createUniqueId } from './helper'\nimport ITEMS from '../constants/ITEMS'\n\nconst createItemBase = (itemSource, tier, modifiers, name) => ({\n    ID: `item_${createUniqueId()}`,\n    source: itemSource,\n    tier: tier || 1,\n    modifiers: modifiers || undefined,\n    name: name || ITEMS[itemSource].name,\n})\n\nconst getItemData = (itemBase) => {\n    const { source } = itemBase\n    return Object.assign({}, ITEMS[source], itemBase)\n}\n\nexport default {\n    createItemBase,\n    getItemData,\n}\n","import { createUniqueId, mergeObjects } from './helper'\nimport RACES from '../constants/RACES'\nimport itemHelper from './itemHelper'\n\nconst { getItemData } = itemHelper\n\nconst createBaseUnit = (faction, type, name, gender, mods) => ({\n    ID: `unit_${createUniqueId()}`,\n    name,\n    type,\n    gender,\n    faction,\n    mods,\n})\n\nconst getValueForTier = (currentTier, array) => array.map((entry) => {\n    const { category, element, tier } = entry\n    return { category, element, value: tier[currentTier] }\n})\n\nconst getEquippedItemEffects = (effects, item) => {\n    const {\n        tier, damage, protection, stats,\n    } = item\n    if (damage) { effects.damage.push(getValueForTier(tier, damage)) }\n    if (protection) { effects.protection.push(getValueForTier(tier, protection)) }\n    if (stats) { effects.stats.push(stats) }\n    return effects\n}\n\nconst calculateEffectiveData = (baseStats, mods = {}, equipment) => {\n    const { stats: modStats = {} } = mods\n    const moddedStats = modStats.length ? mergeObjects(baseStats, modStats) : baseStats\n\n    if (!equipment || equipment.length === 0) {\n        return { moddedStats }\n    }\n\n    const items = equipment.map(item => getItemData(item))\n    const equippedItemEffects = items.reduce(\n        getEquippedItemEffects,\n        { damage: [], protection: [], stats: [] }\n    )\n\n    const mergeEffects = (accumulator, effect) => (mergeObjects(accumulator, effect))\n\n    const offenseEffects = equippedItemEffects.damage.reduce(mergeEffects, {})\n    const defenseEffects = equippedItemEffects.protection.reduce(mergeEffects, {})\n    const statsEffects = equippedItemEffects.stats.reduce(mergeEffects, {})\n\n    const equippedStats = mergeObjects(moddedStats, statsEffects)\n\n    return {\n        moddedStats,\n        equippedStats,\n        offenseEffects,\n        defenseEffects,\n    }\n}\n\nconst getUnitData = (baseUnit) => {\n    const {\n        type, gender, mods, equipment,\n    } = baseUnit\n    const race = RACES[type].name\n    const avatar = RACES[type].avatar[gender]\n    const baseStats = RACES[type].stats\n    const {\n        moddedStats,\n        equippedStats,\n        offenseEffects,\n        defenseEffects,\n    } = calculateEffectiveData(baseStats, mods, equipment)\n    const timeframe = (mods && mods.timeframe) || moddedStats.rate\n\n    return ({\n        ...baseUnit,\n        avatar,\n        race,\n        stats: equippedStats || moddedStats,\n        baseStats: moddedStats,\n        status: RACES[type].status || {},\n        offenseEffects,\n        defenseEffects,\n        timeframe,\n        initialTimeframe: timeframe,\n    })\n}\n\nexport default {\n    createBaseUnit,\n    getUnitData,\n}\n","import entityHelper from '../utils/entityHelper'\nimport RACES from './RACES'\n\nconst { createBaseUnit } = entityHelper\n\nconst HEROES = {\n    XY001: {\n        sourceID: 'XY001',\n        ...createBaseUnit('good', RACES.HUMAN.ID, 'Hans', 'male', { timeframe: 20 }),\n    },\n    XY002: {\n        sourceID: 'XY002',\n        ...createBaseUnit('good', RACES.HUMAN.ID, 'Olga', 'female', { timeframe: 20, stats: { hp: -15, attack: 10, rate: -5 } }),\n    },\n    XY003: {\n        sourceID: 'XY003',\n        ...createBaseUnit('good', RACES.ELF.ID, 'Tingle', 'male', { timeframe: 10 }),\n    },\n    XY004: {\n        sourceID: 'XY004',\n        ...createBaseUnit('good', RACES.ELF.ID, 'Zelda', 'female', { timeframe: 10 }),\n    },\n    XY005: {\n        sourceID: 'XY005',\n        ...createBaseUnit('good', RACES.FAIRY.ID, 'Peter', 'male', { timeframe: 0 }),\n    },\n    XY006: {\n        sourceID: 'XY006',\n        ...createBaseUnit('good', RACES.FAIRY.ID, 'Navi', 'female', { timeframe: 0 }),\n    },\n}\n\nexport default HEROES\n","import cloneDeep from 'lodash/cloneDeep'\nimport { ADD_TO_ROSTER, INIT_ROSTER } from '../../actions/game/roster.actions'\nimport HEROES from '../../../constants/HEROES'\n\nconst initialState = {}\nconst initialRoster = [\n    HEROES.XY001,\n]\n\nconst getUnitsWithIDs = baseUnits => (\n    baseUnits.map(unit => ({\n        [unit.ID]: unit,\n    }))\n)\n\nconst rosterReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case INIT_ROSTER: {\n            const roster = getUnitsWithIDs(initialRoster)\n            return Object.assign({}, ...roster)\n        }\n        case ADD_TO_ROSTER: {\n            const { baseUnits } = payload\n            const newUnits = getUnitsWithIDs(baseUnits)\n            return Object.assign(cloneDeep(state), ...newUnits)\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default rosterReducer\n","export const RESOURCES = '[RESOURCES]'\nexport const INCREASE_RESOURCES = `${RESOURCES} Increase amount of resources`\nexport const INIT_RESOURCES = `${RESOURCES} Set initial amount of resources`\n\nexport const initialiseResources = resources => ({\n    type: INIT_RESOURCES,\n    payload: {\n        resources,\n    },\n    meta: {\n        persisted: 'resources',\n    },\n})\n\nexport const addToResources = resources => ({\n    type: INCREASE_RESOURCES,\n    payload: {\n        resources,\n    },\n    meta: {\n        persisted: 'resources',\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport { INIT_RESOURCES, INCREASE_RESOURCES } from '../../actions/game/resources.actions'\nimport { mergeObjects } from '../../../utils/helper'\n\nconst initialState = {\n    GOLD: 0,\n    CRYST: 0,\n}\nconst initialResources = {\n    GOLD: 100,\n    CRYST: 0,\n}\n\nconst resourcesReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case INIT_RESOURCES: {\n            return initialResources\n        }\n\n        case INCREASE_RESOURCES: {\n            const { resources } = payload\n            return mergeObjects(cloneDeep(state), resources)\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default resourcesReducer\n","export const INVENTORY = '[INVENTORY]'\nexport const ADD_INVENTORY_ITEMS = `${INVENTORY} Add Items to Inventory`\nexport const DELETE_INVENTORY_ITEMS = `${INVENTORY} Delete Items from Inventory`\nexport const UPDATE_INVENTORY_ITEM = `${INVENTORY} Update Item in Inventory`\nexport const INIT_INVENTORY = `${INVENTORY} Initialise Items in Inventory`\n\nexport const addInventoryItems = items => ({\n    type: ADD_INVENTORY_ITEMS,\n    payload: {\n        items,\n    },\n    meta: {\n        persisted: 'inventory',\n    },\n})\n\nexport const deleteInventoryItems = targets => ({\n    type: DELETE_INVENTORY_ITEMS,\n    payload: {\n        targets,\n    },\n    meta: {\n        persisted: 'inventory',\n    },\n})\n\nexport const updateInventoryItem = action => ({\n    type: UPDATE_INVENTORY_ITEM,\n    payload: {\n        target: action.target,\n        changedStatus: action.changedStatus,\n    },\n    meta: {\n        persisted: 'inventory',\n    },\n})\n\nexport const initialiseInventory = () => ({\n    type: INIT_INVENTORY,\n    payload: {},\n    meta: {\n        persisted: 'inventory',\n        initGameAction: true,\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport {\n    ADD_INVENTORY_ITEMS, DELETE_INVENTORY_ITEMS, UPDATE_INVENTORY_ITEM, INIT_INVENTORY,\n} from '../../actions/game/inventory.actions'\nimport itemHelper from '../../../utils/itemHelper'\n\nconst { createItemBase } = itemHelper\n\nconst initialState = []\nconst initialInventory = [\n    createItemBase('DAGGER_001'),\n]\n\nconst rosterReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADD_INVENTORY_ITEMS: {\n            const { items } = payload\n            const newItems = items.map(item => (createItemBase(item)))\n            return [...cloneDeep(state), ...newItems]\n        }\n\n        case DELETE_INVENTORY_ITEMS: {\n            return state // ToDo\n        }\n\n        case UPDATE_INVENTORY_ITEM: {\n            return state // ToDo\n        }\n\n        case INIT_INVENTORY: {\n            return initialInventory\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default rosterReducer\n","export const SQUAD = '[SQUAD]'\nexport const ADD_SQUAD_MEMBERS = `${SQUAD} Add Squad Members`\nexport const DELETE_SQUAD_MEMBERS = `${SQUAD} Delete Squad Members`\n\nexport const addSquadMembers = units => ({\n    type: ADD_SQUAD_MEMBERS,\n    payload: {\n        units,\n    },\n    meta: {\n        persisted: 'squad',\n    },\n})\n\nexport const deleteSquadMembers = units => ({\n    type: DELETE_SQUAD_MEMBERS,\n    payload: {\n        units,\n    },\n    meta: {\n        persisted: 'squad',\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport { ADD_SQUAD_MEMBERS, DELETE_SQUAD_MEMBERS } from '../../actions/game/squad.actions'\n\nconst initialState = []\n\nconst squadReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADD_SQUAD_MEMBERS: {\n            const { units } = payload\n            return [\n                ...cloneDeep(state),\n                ...units,\n            ]\n        }\n\n        case DELETE_SQUAD_MEMBERS: {\n            const { units } = payload\n            return cloneDeep(state).filter(member => !units.includes(member))\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default squadReducer\n","export const EQUIPMENT = '[EQUIPMENT]'\nexport const ADD_TO_EQUIPMENT = `${EQUIPMENT} Equip Items`\nexport const REMOVE_FROM_EQUIPMENT = `${EQUIPMENT} Unequip Items`\n\nexport const addToEquipment = (items, unitID) => ({\n    type: ADD_TO_EQUIPMENT,\n    payload: {\n        items,\n        unitID,\n    },\n    meta: {\n        persisted: 'equipment',\n        checkEquipment: 'add',\n    },\n})\n\nexport const removeFromEquipment = items => ({\n    type: REMOVE_FROM_EQUIPMENT,\n    payload: {\n        items,\n    },\n    meta: {\n        persisted: 'equipment',\n        checkEquipment: 'remove',\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport {\n    ADD_TO_EQUIPMENT, REMOVE_FROM_EQUIPMENT,\n} from '../../actions/game/equipment.actions'\n\nconst initialState = {}\n\nconst rosterReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADD_TO_EQUIPMENT: {\n            const { items, unitID } = payload\n            const newEquipment = items.map((item) => {\n                const { itemID, slot } = item\n                return {\n                    [itemID]: {\n                        unitID,\n                        itemID,\n                        slot,\n                    },\n                }\n            })\n            return Object.assign(cloneDeep(state), ...newEquipment)\n        }\n\n        case REMOVE_FROM_EQUIPMENT: {\n            const { items } = payload\n            const newState = cloneDeep(state)\n\n            items.map(entry => delete newState[entry])\n\n            return newState\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default rosterReducer\n","export const ACTOR = '[ACTOR]'\nexport const ADD_ACTORS = `${ACTOR} Add Actors`\nexport const DELETE_ACTORS = `${ACTOR} Delete Actors`\nexport const UPDATE_ACTORS = `${ACTOR} Update Actors`\nexport const DELAY_ACTOR = `${ACTOR} Delay Actor's next action`\nexport const RESET_ACTORS_DELAY = `${ACTOR} Reset all Actors' delay`\nexport const RESET_ACTORS = `${ACTOR} Reset Actors State`\n\nexport const addActors = actors => ({\n    type: ADD_ACTORS,\n    payload: {\n        actors,\n    },\n})\n\nexport const deleteActors = targets => ({\n    type: DELETE_ACTORS,\n    payload: {\n        targets,\n    },\n    meta: {\n        battleStage: 'check',\n    },\n})\n\nexport const updateActors = action => ({\n    type: UPDATE_ACTORS,\n    payload: {\n        target: action.target,\n        changedStatus: action.changedStatus,\n    },\n    meta: {\n        processBattle: 'check',\n    },\n})\n\nexport const delayActor = (target, delay) => ({\n    type: DELAY_ACTOR,\n    payload: {\n        target,\n        delay,\n    },\n})\n\nexport const resetActorsDelay = () => ({\n    type: RESET_ACTORS_DELAY,\n    payload: {},\n})\n\nexport const resetActors = () => ({\n    type: RESET_ACTORS,\n    payload: {},\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport {\n    ADD_ACTORS,\n    DELETE_ACTORS,\n    UPDATE_ACTORS,\n    DELAY_ACTOR,\n    RESET_ACTORS_DELAY,\n    RESET_ACTORS,\n} from '../../actions/game/actor.actions'\nimport entityHelper from '../../../utils/entityHelper'\nimport { mergeObjects } from '../../../utils/helper'\n\nconst { getUnitData } = entityHelper\nconst initialState = []\n\nconst actorReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADD_ACTORS: {\n            const { actors } = payload\n            const newActors = actors.map(baseUnit => ({ ...getUnitData(baseUnit) }))\n            return [\n                ...cloneDeep(state),\n                ...newActors,\n            ]\n        }\n\n        case DELETE_ACTORS: {\n            const { targets } = payload\n            return cloneDeep(state).filter(actor => !targets.includes(actor.ID))\n        }\n\n        case UPDATE_ACTORS: {\n            const { target, changedStatus } = payload\n\n            return cloneDeep(state).map((actor) => {\n                if (actor.ID === target.ID) {\n                    const newStatus = mergeObjects(actor.status, changedStatus)\n                    return { ...actor, status: newStatus }\n                }\n                return actor\n            })\n        }\n\n        case DELAY_ACTOR: {\n            const { target, delay } = payload\n\n            return state.map(actor => (\n                actor.ID === target\n                    ? { ...actor, timeframe: actor.timeframe + delay }\n                    : actor\n            ))\n        }\n\n        case RESET_ACTORS_DELAY: {\n            return cloneDeep(state).map(actor => ({ ...actor, timeframe: actor.initialTimeframe }))\n        }\n\n        case RESET_ACTORS: {\n            return initialState\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default actorReducer\n","export const ATF = '[ACTIVE TIME]'\nexport const ADVANCE_TURN = `${ATF} Advance Turn`\nexport const RESET_ATF = `${ATF} Reset Turn State`\n\nexport const advanceTurn = tick => ({\n    type: ADVANCE_TURN,\n    payload: {\n        tick,\n    },\n    meta: {\n        processBattle: 'calculate',\n    },\n})\n\nexport const resetActiveTime = () => ({\n    type: RESET_ATF,\n    payload: {},\n})\n","import { ADVANCE_TURN, RESET_ATF } from '../../actions/game/activeTime.actions'\n\nconst initialState = {\n    turn: -1,\n    tick: -1,\n    status: 'running',\n}\n\nconst activeTimeReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADVANCE_TURN: {\n            const { turn } = state\n            const { tick } = payload\n            return {\n                ...state,\n                turn: turn + 1,\n                tick,\n            }\n        }\n\n        case RESET_ATF: {\n            return initialState\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default activeTimeReducer\n","export const BATTLE = '[BATTLE]'\nexport const INIT_BATTLE = `${BATTLE} Initialise Battle Stage`\nexport const PROGRESS_BATTLE = `${BATTLE} Progress to next Battle Step`\nexport const SET_BATTLE_BANNER = `${BATTLE} Set current Battle Banner`\nexport const RESET_BATTLE = `${BATTLE} Reset Battle Stage`\n\nexport const initBattle = (squadUnits, stage) => ({\n    type: INIT_BATTLE,\n    payload: {\n        squadUnits,\n        stage,\n    },\n    meta: {\n        battleStage: 'init',\n    },\n})\n\nexport const setBattleBanner = banner => ({\n    type: SET_BATTLE_BANNER,\n    payload: { banner },\n})\n\nexport const progressBattle = () => ({\n    type: PROGRESS_BATTLE,\n    payload: {},\n    meta: {\n        battleStage: 'nextStep',\n    },\n})\n\nexport const resetBattle = () => ({\n    type: RESET_BATTLE,\n    payload: {},\n    meta: {\n        battleStage: 'reset',\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport {\n    INIT_BATTLE, PROGRESS_BATTLE, SET_BATTLE_BANNER, RESET_BATTLE,\n} from '../../actions/game/battle.actions'\n\nconst initialState = {}\n\nconst battleReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case INIT_BATTLE: {\n            const { stage, squadUnits } = payload\n            return {\n                stage,\n                squadUnits,\n                currentStep: 0,\n                currentPhase: -1,\n                currentStatus: 'hold',\n                currentBanner: '',\n            }\n        }\n\n        case PROGRESS_BATTLE: {\n            const { step, phase, status } = payload\n            return Object.assign(\n                {},\n                cloneDeep(state),\n                {\n                    currentStep: step,\n                    currentPhase: phase,\n                    currentStatus: status,\n                }\n            )\n        }\n\n        case SET_BATTLE_BANNER: {\n            const { banner } = payload\n            return Object.assign(\n                {},\n                cloneDeep(state),\n                {\n                    currentBanner: banner,\n                }\n            )\n        }\n\n        case RESET_BATTLE: {\n            return initialState\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default battleReducer\n","import { createUniqueId } from '../../../utils/helper'\n\nexport const BATTLE_LOG = '[BATTLE LOG]'\nexport const LOG_BATTLE = `${BATTLE_LOG} Log Battle`\nexport const RESET_LOG = `${BATTLE_LOG} Reset Battle Log`\n\nexport const logBattle = ({ actor, action }) => ({\n    type: LOG_BATTLE,\n    payload: {\n        actor,\n        action,\n        logID: `log_${createUniqueId()}`,\n        timestamp: Date.now(),\n    },\n})\nexport const resetBattleLog = () => ({\n    type: RESET_LOG,\n    payload: {},\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport { LOG_BATTLE, RESET_LOG } from '../../actions/game/battleLog.actions'\n\nconst initialState = []\n\nconst battleReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case LOG_BATTLE: {\n            return [...cloneDeep(state), payload]\n        }\n        case RESET_LOG: {\n            return initialState\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default battleReducer\n","export const TARGET_ACTOR = '[TARGET ACTOR]'\nexport const SELECT_ACTOR = `${TARGET_ACTOR} Select actor from battle`\nexport const CHECK_SELECTED_ACTOR = `${TARGET_ACTOR} Check selected actor for validity`\n\nexport const selectTargetActor = actor => ({\n    type: SELECT_ACTOR,\n    payload: {\n        actor,\n    },\n    meta: {\n        targetActor: 'checkSame',\n    },\n})\n\nexport const checkSelectedTargetActor = () => ({\n    type: CHECK_SELECTED_ACTOR,\n    payload: {},\n    meta: {\n        targetActor: 'checkDeath',\n    },\n})\n","import { SELECT_ACTOR } from '../../actions/game/targetActor.actions'\n\nconst initialState = ''\n\nconst targetActorReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case SELECT_ACTOR: {\n            const { actor } = payload\n            return actor\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default targetActorReducer\n","export const PROGRESS = '[PROGRESS]'\nexport const ADD_TO_PROGRESS = `${PROGRESS} Progress in Story Mode`\n\nexport const addToProgress = progress => ({\n    type: ADD_TO_PROGRESS,\n    payload: {\n        progress,\n    },\n    meta: {\n        persisted: 'progression',\n        checkProgress: 'true',\n    },\n})\n","import cloneDeep from 'lodash/cloneDeep'\nimport { ADD_TO_PROGRESS } from '../../actions/game/progression.actions'\n\nconst initialState = {\n    nextStage: '1-1',\n    stages: {\n        1: {\n            1: 'new',\n        },\n    },\n}\n\nconst progressionReducer = (state = initialState, action) => {\n    const { payload } = action\n\n    switch (action.type) {\n        case ADD_TO_PROGRESS: {\n            const {\n                chapter, section, status, nextStage: newNextStage,\n            } = payload\n            const { stages, nextStage: oldNextStage } = state\n            const updatedStages = cloneDeep(stages)\n            updatedStages[chapter][section] = status\n\n            if (newNextStage && newNextStage !== 'ToBeContinued') {\n                const [nextChapterString, nextSectionString] = newNextStage.split('-')\n                const nextChapter = parseInt(nextChapterString, 10)\n                const nextSection = parseInt(nextSectionString, 10)\n                updatedStages[nextChapter] = updatedStages[nextChapter] || {}\n                updatedStages[nextChapter][nextSection] = 'new'\n            }\n            const nextStage = newNextStage || oldNextStage\n\n            return {\n                nextStage,\n                stages: updatedStages,\n            }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default progressionReducer\n","import { GOTO_BATTLE } from '../../actions/routing/route.actions'\n\nexport default (state = '', action = {}) => (action.type === GOTO_BATTLE ? action.payload.battleStage : state)\n","import { GOTO_UNIT } from '../../actions/routing/route.actions'\n\nexport default (state = '', action = {}) => (action.type === GOTO_UNIT ? action.payload.unitID : state)\n","export const INIT = '[INIT]'\nexport const INIT_GAME = `${INIT} Set Initial values for the game`\n\nexport const initialiseGame = () => ({\n    type: INIT_GAME,\n    payload: {},\n    meta: {\n        persisted: 'gameInitialised',\n        initGameAction: true,\n    },\n})\n","const MANIFEST = {\n    version: 0.42,\n    author: 'Konrad Abe',\n    studio: 'All Bits Equal',\n    name: 'Clash of Emoji',\n}\n\nexport default MANIFEST\n","import { INIT_GAME } from '../actions/initGame.actions'\nimport MANIFEST from '../../constants/MANIFEST'\n\nconst initialState = {\n    status: false,\n    version: -1,\n}\n\nconst initGameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INIT_GAME: {\n            return {\n                status: true,\n                version: MANIFEST.version,\n            }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default initGameReducer\n","import { combineReducers } from 'redux'\nimport { locationReducer } from '../router/router'\nimport * as gameReducer from './game'\nimport * as routingReducer from './routing'\nimport initGameReducer from './initGame.reducer'\n\nexport default combineReducers({\n    gameInitialised: initGameReducer,\n    ...gameReducer,\n    ...routingReducer,\n    location: locationReducer,\n})\n","/* eslint-disable consistent-return */\nimport { initialiseGame } from '../actions/initGame.actions'\nimport { initialiseInventory } from '../actions/game/inventory.actions'\nimport { initialiseRoster } from '../actions/game/roster.actions'\nimport { initialiseResources } from '../actions/game/resources.actions'\nimport { goToHome } from '../actions/routing/route.actions'\nimport MANIFEST from '../../constants/MANIFEST'\n\nconst initGameMiddleware = ({ dispatch, getState }) => next => (action) => {\n    const { initGameAction } = action.meta || {}\n    const { gameInitialised: { status, version } } = getState()\n\n    if (initGameAction) {\n        return next(action)\n    }\n\n    if (status && (version === MANIFEST.version)) {\n        return next(action)\n    }\n\n    if (status && (version < MANIFEST.version)) {\n        // console.log('old version detected')\n        // ToDo: implement code to check for breaking changes and update player data before\n        //  increasing the current game version number in state\n        return next(action)\n    }\n\n    dispatch(initialiseGame())\n    dispatch(initialiseInventory())\n    dispatch(initialiseRoster())\n    dispatch(initialiseResources())\n    dispatch(goToHome())\n}\n\nexport default initGameMiddleware\n","const throttled = {}\n\nconst throttleMiddleware = () => next => (action) => {\n    const time = action.meta && action.meta.throttle\n\n    if (!time) {\n        return next(action)\n    }\n\n    // Just ignore the action if its already throttled\n    if (throttled[action.type]) {\n        return false\n    }\n\n    throttled[action.type] = true\n\n    setTimeout(() => {\n        throttled[action.type] = false\n    }, time)\n\n    return next(action)\n}\n\nexport default throttleMiddleware\n","const pending = {}\n\nconst debounceMiddleware = () => next => (action) => {\n    const { debounce } = action.meta || {}\n\n    if (!debounce) {\n        next(action)\n        return\n    }\n\n    if (pending[action.type]) {\n        clearTimeout(pending[action.type])\n    }\n\n    pending[action.type] = setTimeout(() => {\n        delete pending[action.type]\n        next(action)\n    }, debounce)\n}\n\nexport default debounceMiddleware\n","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state')\n        if (serializedState === null) {\n            return undefined\n        }\n        return JSON.parse(serializedState)\n    } catch (err) {\n        return undefined\n    }\n}\n\nexport const saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state)\n        localStorage.setItem('state', serializedState)\n    } catch {\n        // ignore write errors\n    }\n}\n","import throttleMiddleware from './throttle.middleware'\nimport debounceMiddleware from './debounce.middleware'\nimport measureMiddleware from './measure.middleware'\nimport localStorageMiddleware from './localStorage.middleware'\n\nexport default [\n    throttleMiddleware,\n    debounceMiddleware,\n    measureMiddleware,\n    localStorageMiddleware,\n]\n","/* eslint no-console: [\"error\", { allow: [\"time\", \"timeEnd\", \"log\"] }] */\nconst measureMiddleware = () => next => (action) => {\n    const isMeasured = action.meta && action.meta.measure\n\n    if (isMeasured) {\n        console.time(`# Measured: ${action.type}`)\n        next(action)\n        console.timeEnd(`# Measured: ${action.type}`)\n    } else {\n        next(action)\n    }\n}\n\nexport default measureMiddleware\n","/* eslint-disable consistent-return */\nimport { loadState, saveState } from '../../../utils/localStorage'\n\nconst localStorageMiddleware = store => next => (action) => {\n    const persisted = action.meta && action.meta.persisted\n\n    if (!persisted) {\n        return next(action)\n    }\n\n    const previousState = store.getState()[persisted]\n    next(action)\n    const nextState = store.getState()[persisted]\n    if (nextState !== previousState) {\n        const localStorageState = loadState()\n        saveState({\n            ...localStorageState,\n            [persisted]: nextState,\n        })\n    }\n}\n\nexport default localStorageMiddleware\n","/* eslint-disable consistent-return */\nimport * as routes from '../../actions/routing/route.actions'\n\nconst routingCheckMiddleware = ({ dispatch, getState }) => next => (action) => {\n    const { type, payload } = action\n\n    const goHomeYouAreDrunk = () => {\n        console.log('# ILLEGAL PAGE LOAD #')\n        dispatch(routes.goToHome())\n    }\n\n    switch (type) {\n        case routes.GOTO_UNIT: {\n            const { unitID } = payload\n            const { roster } = getState()\n            if (!roster[unitID]) {\n                goHomeYouAreDrunk()\n                break\n            }\n            next(action)\n            break\n        }\n        case routes.GOTO_BATTLE_RESULT: {\n            const { battleStage } = getState()\n            if (!battleStage) {\n                goHomeYouAreDrunk()\n                break\n            }\n            next(action)\n            break\n        }\n        default: {\n            next(action)\n        }\n    }\n}\n\nexport default routingCheckMiddleware\n","import { addPageState } from '../../actions/game/gameState.actions'\n\nconst battleMiddleware = ({ dispatch }) => next => (action) => {\n    const { type, meta } = action\n    const { gameState } = meta || {}\n\n    if (!gameState) {\n        next(action)\n        return\n    }\n\n    switch (gameState) {\n        case 'routing': {\n            dispatch(addPageState(type))\n            next(action)\n            break\n        }\n\n        default: {\n            next(action)\n        }\n    }\n}\n\nexport default battleMiddleware\n","/* eslint-disable consistent-return */\nimport { addSquadMembers } from '../../actions/game/squad.actions'\n\nconst rosterMiddleware = ({ dispatch, getState }) => next => (action) => {\n    const { checkRoster } = action.meta || {}\n\n    next(action)\n    if (!checkRoster) {\n        return\n    }\n    if (checkRoster === 'initialiseSquad') {\n        dispatch(addSquadMembers([...Object.keys(getState().roster)]))\n    }\n}\n\nexport default rosterMiddleware\n","import { createSelector } from 'reselect'\n\nconst getUnitID = state => state.unitID\nconst getEquipment = state => state.equipment\nconst getInventory = state => state.inventory\n\nconst getEquipedItemIDs = createSelector(\n    getUnitID,\n    getEquipment,\n    (unitID, equipment) => (\n        Object.values(equipment).reduce((arr, entry) => {\n            if (entry.unitID === unitID) { arr.push(entry.itemID) }\n            return arr\n        }, [])\n    )\n)\n\nconst getEquipedItems = createSelector(\n    getEquipedItemIDs,\n    getInventory,\n    (equippedItemIDs, inventory) => inventory.filter(item => equippedItemIDs.includes(item.ID))\n)\n\nexport default getEquipedItems\n","/* eslint-disable consistent-return */\n\nimport { removeFromEquipment } from '../../actions/game/equipment.actions'\nimport getEquipment from '../../selectors/getEquipment'\nimport itemHelper from '../../../utils/itemHelper'\nimport { groupBy } from '../../../utils/helper'\n\nconst { getItemData } = itemHelper\n\nconst equipmentMiddleware = ({ dispatch, getState }) => next => (action) => {\n    const { payload, meta } = action\n    const { checkEquipment } = meta || {}\n\n    if (!checkEquipment) {\n        return next(action)\n    }\n\n    /*\n        const checkTargetForRequirements = (item, unitID) => true\n        const checkTargetForConflictingEquipment = (\n            itemFromInventory,\n            unitFromRoster,\n            usedSlots,\n        ) => false\n     */\n\n    switch (checkEquipment) {\n        case 'add': {\n            const { items, unitID } = payload\n            const currentEquipment = getEquipment(getState())\n            const equipedItems = currentEquipment.map(item => (getItemData(item)))\n            const usedSlots = groupBy(equipedItems, 'slot')\n\n            const itemsToRemove = []\n            const filteredItems = items.map((itemID) => {\n                const itemFromInventory = getItemData(getState().inventory.filter(\n                    invItem => invItem.ID === itemID\n                )[0])\n                const { slot } = itemFromInventory\n                if (usedSlots[slot]) {\n                    itemsToRemove.push(usedSlots[slot])\n                }\n\n                return { itemID, slot }\n            })\n\n            if (itemsToRemove.length) {\n                const IDsToRemove = itemsToRemove.map(\n                    things => things.map(thing => thing.ID)\n                )\n                dispatch(removeFromEquipment(IDsToRemove[0]))\n            }\n\n            if (filteredItems.length) {\n                const newAction = Object.assign(\n                    action, { payload: { items: filteredItems, unitID } }\n                )\n                next(newAction)\n            }\n            break\n        }\n\n        default: {\n            next(action)\n        }\n    }\n}\n\nexport default equipmentMiddleware\n","import { addActors, resetActors, resetActorsDelay } from '../../actions/game/actor.actions'\nimport { resetActiveTime } from '../../actions/game/activeTime.actions'\nimport { resetBattleLog } from '../../actions/game/battleLog.actions'\nimport { progressBattle, setBattleBanner } from '../../actions/game/battle.actions'\nimport { groupBy } from '../../../utils/helper'\nimport { goToBattleResult } from '../../actions/routing/route.actions'\nimport { addToProgress } from '../../actions/game/progression.actions'\nimport { selectTargetActor } from '../../actions/game/targetActor.actions'\n\nconst battleMiddleware = ({ getState, dispatch }) => next => (action) => {\n    const { meta } = action\n    const { battleStage } = meta || {}\n\n    if (!battleStage) {\n        next(action)\n        return\n    }\n\n    switch (battleStage) {\n        case 'init': {\n            next(action)\n            dispatch(progressBattle())\n            break\n        }\n\n        case 'nextStep': {\n            const {\n                stage, squadUnits, currentStep, currentPhase,\n            } = getState().battle\n            const current = {\n                step: currentStep,\n                phase: currentPhase,\n            }\n\n            current.phase += 1\n            if (stage.location[current.step][current.phase] === undefined) {\n                current.step += 1\n                current.phase = 0\n\n                if (stage.location[current.step] === undefined) {\n                    const stageID = stage.ID\n                    dispatch(addToProgress({ stageID, outcome: 'won' }))\n                    current.step = -1\n                    current.phase = -1\n                }\n            }\n\n            if (current.step === -1) { break }\n\n            const nextPhase = stage.location[current.step][current.phase]\n            current.status = nextPhase.battle ? 'active' : 'hold'\n            next(Object.assign({}, action, { payload: current }))\n\n            if (nextPhase.banner) {\n                dispatch(setBattleBanner(nextPhase.banner))\n                setTimeout(\n                    () => {\n                        dispatch(progressBattle())\n                    },\n                    2800\n                )\n                break\n            }\n\n            if (nextPhase.player) {\n                dispatch(addActors(squadUnits))\n                dispatch(progressBattle())\n                break\n            }\n\n            if (nextPhase.story) {\n                break\n            }\n\n            if (nextPhase.enemies) {\n                dispatch(addActors(nextPhase.enemies))\n                dispatch(progressBattle())\n                break\n            }\n\n            if (nextPhase.battle) {\n                // ToDo: create logic to start and pause the battle timer\n                dispatch(resetActorsDelay())\n            }\n            break\n        }\n\n        case 'check': {\n            next(action)\n            const { battle, actors } = getState()\n            const { good, bad } = groupBy(Object.values(actors), 'faction')\n            const { stage: { ID: stageID } } = battle\n\n            if (good && bad) {\n                break\n            }\n\n            if (good) {\n                dispatch(progressBattle())\n                break\n            }\n\n            dispatch(addToProgress({ stageID, outcome: 'lost' }))\n            break\n        }\n\n        case 'reset': {\n            dispatch(selectTargetActor(''))\n            dispatch(resetActors())\n            dispatch(resetActiveTime())\n            dispatch(resetBattleLog())\n            next(action)\n            break\n        }\n\n        case 'first':\n        case 'repeat':\n        case 'lost': {\n            next(action)\n            dispatch(goToBattleResult())\n            break\n        }\n\n        default: {\n            next(action)\n        }\n    }\n}\n\nexport default battleMiddleware\n","import { groupBy, sortBy } from './helper'\n\nconst getNextActor = actors => sortBy(actors, 'timeframe')[0]\n\nconst getPossibleEnemies = (faction, actors) => {\n    const enemyFaction = faction === 'good' ? 'bad' : 'good'\n    return groupBy(actors, 'faction')[enemyFaction]\n}\n\nconst getTargetedEnemy = (faction, enemies, targetActor) => {\n    if (faction === 'bad') { return false }\n    return enemies.filter(enemy => enemy.ID === targetActor)\n}\nconst getRandomEnemy = enemies => enemies[Math.floor(Math.random() * enemies.length)]\n\nconst calculateDamage = (actor, target) => {\n    const { stats: actorStats, offenseEffects } = actor\n    const { stats: targetStats, defenseEffects } = target\n    const offenceArray = offenseEffects ? Object.values(offenseEffects) : []\n    const defenseArray = defenseEffects ? Object.values(defenseEffects) : []\n    const { attack } = actorStats\n    const { defense } = targetStats\n\n    const additionalAttack = (offenceArray && offenceArray.length > 0)\n        ? offenceArray.reduce((attackAcc, effect) => (attackAcc + effect.value), 0)\n        : 0\n    const additionalDefense = (defenseArray && defenseArray.length > 0)\n        ? defenseArray.reduce((defenseAcc, effect) => (defenseAcc + effect.value), 0)\n        : 0\n\n    const attackSum = attack + additionalAttack\n    const defenseSum = defense + additionalDefense\n\n    if (attackSum === 0) {\n        return 0\n    }\n    if (defenseSum === 0) {\n        return attackSum\n    }\n    if (attackSum < defenseSum) {\n        return (attackSum * 0.5) - (1 - (attackSum / defenseSum)) * (attackSum * 0.5)\n    }\n    if (attackSum > defenseSum) {\n        return attackSum - ((defenseSum * (defenseSum / attackSum)) / 2)\n    }\n    if (attackSum === defenseSum) {\n        return attackSum * 0.5\n    }\n\n    return 0\n}\n\nconst getActionEffect = (actor, target, type) => {\n    switch (type) {\n        case 'attack':\n        default: {\n            return { damage: Math.round(calculateDamage(actor, target)) }\n        }\n    }\n}\n\nconst getNextAction = (actor, actors, targetActor) => {\n    const enemies = getPossibleEnemies(actor.faction, actors)\n\n    if (!enemies) {\n        return {\n            type: 'idle',\n            delay: 50000,\n        }\n    }\n    const target = getTargetedEnemy(actor.faction, enemies, targetActor)[0]\n        || getRandomEnemy(enemies)\n    // ToDo: write real code for 'ai' later, default to attack for now\n    const type = 'attack'\n    return {\n        type,\n        delay: 3000,\n        target,\n        changedStatus: getActionEffect(actor, target, type),\n    }\n}\n\nconst calculateAction = (actors, targetActor) => {\n    const actor = getNextActor(actors)\n    const action = getNextAction(actor, actors, targetActor)\n\n    return {\n        actor,\n        action,\n    }\n}\n\nexport default calculateAction\n","import { updateActors, delayActor, deleteActors } from '../../actions/game/actor.actions'\nimport { logBattle } from '../../actions/game/battleLog.actions'\nimport calculateAction from '../../../utils/calculateAction'\nimport { checkSelectedTargetActor } from '../../actions/game/targetActor.actions'\n\nconst battleStatusMiddleware = ({ getState, dispatch }) => next => (action) => {\n    const { processBattle } = action.meta || {}\n\n    if (!processBattle) {\n        next(action)\n        return\n    }\n    switch (processBattle) {\n        case 'calculate': {\n            next(action)\n            const { actors, targetActor } = getState()\n            if (actors.length > 0) {\n                const nextAction = calculateAction(actors, targetActor)\n                const { actor } = nextAction\n\n                dispatch(logBattle(nextAction))\n                dispatch(delayActor(actor.ID, actor.stats.rate))\n\n                if (nextAction.action.target) {\n                    dispatch(updateActors(nextAction.action))\n                }\n            }\n            break\n        }\n\n        case 'check': {\n            next(action)\n\n            const { actors: actorsToCheck } = getState()\n            const realityCheck = () => {\n                const affectedActors = actorsToCheck.map((actor) => {\n                    const targetIsDead = (target) => {\n                        const { hp: hpMax } = target.stats\n                        const { damage: damageCurrent } = target.status\n                        return (hpMax - damageCurrent <= 0)\n                    }\n                    if (targetIsDead(actor)) {\n                        return actor\n                    }\n                    return null\n                })\n                const deadActors = affectedActors.filter(el => el != null)\n                if (deadActors.length > 0) {\n                    const actorsToDelete = deadActors.map((actor) => {\n                        dispatch(logBattle({\n                            actor,\n                            action: {\n                                target: actor,\n                                type: 'death',\n                            },\n                        }))\n                        return actor.ID\n                    })\n                    dispatch(deleteActors(actorsToDelete))\n                    dispatch(checkSelectedTargetActor())\n                }\n            }\n            realityCheck()\n            break\n        }\n\n        default: {\n            next(action)\n        }\n    }\n}\n\nexport default battleStatusMiddleware\n","import { selectTargetActor } from '../../actions/game/targetActor.actions'\n\nconst targetActorMiddleware = ({ getState, dispatch }) => next => (action) => {\n    const { meta } = action\n    const { targetActor } = meta || {}\n\n    if (!targetActor) {\n        return next(action)\n    }\n\n    switch (targetActor) {\n        case 'checkSame': {\n            const { targetActor: oldTargetActorState } = getState()\n            const { payload: { actor } } = action\n            if (actor && actor === oldTargetActorState) {\n                return dispatch(selectTargetActor(''))\n            }\n            return next(action)\n        }\n\n        case 'checkDeath': {\n            const { targetActor: targetActorState, actors } = getState()\n            const selectedActor = actors.filter(actor => actor.ID === targetActorState)\n            if (!selectedActor.length) {\n                dispatch(selectTargetActor(''))\n            }\n            break\n        }\n\n        default: {\n            return next(action)\n        }\n    }\n\n    return next(action)\n}\n\nexport default targetActorMiddleware\n","import RACES from './RACES'\nimport entityHelper from '../utils/entityHelper'\n\nconst { createBaseUnit } = entityHelper\n\nconst STAGES = {\n    '1-1': {\n        ID: '1-1',\n        title: 'The Beginning (1-1)',\n        location: [\n            [\n                { player: true },\n                {\n                    story: [\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Halt, who goes there?!',\n                        },\n                        {\n                            avatar: '❓',\n                            name: '❔',\n                            side: 'right',\n                            text: '*sounds of combat are coming from the woods*',\n                        },\n                        {\n                            avatar: '❓',\n                            name: '*female voice*',\n                            side: 'right',\n                            text: 'GET OFF ME, YA DIRTY BARSTUD!!!',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Damn, gotta hurry!',\n                        },\n                    ],\n                },\n                { banner: 'Prelude' },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin A', 'male'),\n                    ],\n                },\n                { battle: true },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.HUMAN.ID, 'Olga', 'female'),\n                    ],\n                },\n                {\n                    story: [\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Are you ok?',\n                        },\n                        {\n                            avatar: '👩',\n                            name: '❔',\n                            side: 'right',\n                            text: 'Don\\'t you think for one second that I\\'m gonna smooch ya for that.',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                        {\n                            avatar: '👩',\n                            name: '❔',\n                            side: 'right',\n                            text: 'I\\'m not some damsel in distress that needs saving. I can hold my own in battle!',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                        {\n                            avatar: '👩',\n                            name: '❔',\n                            side: 'right',\n                            text: 'I was about to whoop his sorry buttock when you showed up and stole the show...',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Yeah, I could see that... I just wanted to lend a hand. I mean, it\\'s not like we get exp for killing random enemies, right?!',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'Yeah, right... whatev. I\\'m Olga. Thanks for the \"help\".',\n                        },\n                    ],\n                },\n            ],\n        ],\n        reward: {\n            first: ['CRYST_10', 'HERO_XY002', 'GOLD_100', 'WEAPON_1', 'ARMOR_1'],\n            repeat: ['WEAPON_1', 'GOLD_15'],\n            lost: ['GOLD_5'],\n        },\n    },\n    '1-2': {\n        ID: '1-2',\n        title: 'First Waves (1-2)',\n        location: [\n            [\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin A', 'male'),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin B', 'male'),\n                    ],\n                },\n                { player: true },\n                {\n                    story: [\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Wanna help *me* out this time?',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'You sure look like you need help, that\\'s for sure.',\n                        },\n                    ],\n                },\n                { banner: 'Wave 1/2' },\n                { battle: true },\n            ],\n            [\n                {\n                    story: [\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'There\\'s one more. That\\'s a big one.',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'No problem, we can handle that! ... *KIAI!*',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: '. . .',\n                        },\n                    ],\n                },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.ORC.ID, 'Orc A', 'male'),\n                    ],\n                },\n                { banner: 'Wave 2/2' },\n                { battle: true },\n                {\n                    story: [\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'You\\'re not *that* bad, after all. Mind if I tag along for now?',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Yeah, why not. The more, the merrier. I\\'m just headed to town anyway.',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'Great. And maybe we pass a river and you can do something about that smell of yours.',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                    ],\n                },\n            ],\n        ],\n        reward: {\n            first: ['CRYST_10', 'GOLD_200', 'WEAPON_1', 'ARMOR_1'],\n            repeat: ['ARMOR_1', 'GOLD_20'],\n            lost: ['GOLD_10'],\n        },\n    },\n    '1-3': {\n        ID: '1-3',\n        location: [\n            [\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.ORC.ID, 'Orc A', 'male'),\n                        createBaseUnit('bad', RACES.ORC.ID, 'Orc B', 'male'),\n                    ],\n                },\n                { player: true },\n                { banner: 'GUARDS!' },\n                { battle: true },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.ELF.ID, 'Tinkle', 'male'),\n                    ],\n                },\n                {\n                    story: [\n                        {\n                            avatar: '🧝‍♂️',\n                            name: 'Tinkle',\n                            side: 'right',\n                            text: 'My name is Tinkle. You seem to be totally trustworthy and you killed my captors. I owe you my life!',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'left',\n                            text: 'Ooooookay. So now you want to follow us and do our every bidding?',\n                        },\n                        {\n                            avatar: '🧝‍♂️',\n                            name: 'Tinkle',\n                            side: 'right',\n                            text: 'If that is your command, I will do exactly that. No questions asked.',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: '. . .',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'I\\'m out, this is bull!',\n                        },\n                    ],\n                },\n            ],\n        ],\n        reward: {\n            first: ['HERO_XY003', 'CRYST_10', 'SET_FIRE_1', 'SET_EARTH_1', 'WEAPON_1', 'ARMOR_1', 'WEAPON_2', 'ARMOR_2', 'GOLD_300'],\n            repeat: ['WEAPON_1', 'ARMOR_1', 'GOLD_30'],\n            lost: ['GOLD_15'],\n        },\n    },\n    '1-4': {\n        ID: '1-4',\n        title: 'BOSS STAGE',\n        location: [\n            [\n                { player: true },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin A', 'male'),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin B', 'male'),\n                    ],\n                },\n                { banner: 'Wave 1/3' },\n                { battle: true },\n            ],\n            [\n                { banner: 'Wave 2/3' },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.ORC.ID, 'Orc A', 'male'),\n                    ],\n                },\n                { battle: true },\n            ],\n            [\n                { banner: 'The Orc Chieftain (3/3)' },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.ORC.ID, 'Orc Chieftain', 'male', { timeframe: -10, stats: { hp: 25, attack: 15, rate: -5 } }),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin A', 'male'),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin B', 'male'),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin C', 'male'),\n                        createBaseUnit('bad', RACES.GOBLIN.ID, 'Goblin D', 'male'),\n                    ],\n                },\n                { battle: true },\n            ],\n        ],\n        reward: {\n            first: ['CRYST_50', 'WEAPON_2', 'ARMOR_2', 'GOLD_1200'],\n            repeat: ['WEAPON_2', 'ARMOR_2', 'GOLD_120'],\n            lost: ['WEAPON_1', 'ARMOR_1', 'GOLD_50'],\n        },\n    },\n    '2-1': {\n        ID: '2-1',\n        location: [\n            [\n                { player: true },\n                {\n                    enemies: [\n                        createBaseUnit('bad', RACES.SKELETON.ID, 'Skeleton A', 'male'),\n                        createBaseUnit('bad', RACES.SKELETON.ID, 'Skeleton B', 'male'),\n                        createBaseUnit('bad', RACES.SKELETON.ID, 'Skeleton C', 'male'),\n                    ],\n                },\n                { banner: 'A new enemy' },\n                { battle: true },\n                { banner: 'The Wall' },\n                {\n                    story: [\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'There seems to be an invisible wall in front of us!',\n                        },\n                        {\n                            avatar: '👩',\n                            name: 'Olga',\n                            side: 'right',\n                            text: 'That\\'s funny... is that some sort of evil spell?',\n                        },\n                        {\n                            avatar: '🧝',\n                            name: 'Tinkle',\n                            side: 'right',\n                            text: 'I think I can debunk this. It seems, the dev was lazy and didn\\'t create enough levels for us to clear.',\n                        },\n                        {\n                            avatar: '👨',\n                            name: 'Hans',\n                            side: 'left',\n                            text: 'Friend, you are talking in strange tongues. I hear the words but the meaning eludes me!',\n                        },\n                        {\n                            avatar: '🧝',\n                            name: 'Tinkle',\n                            side: 'right',\n                            text: 'Ok, in more simple words: We can\\'t continue for now and need to wait till the way is clear again. Let\\'s just kill some more undead for now and try again later.',\n                        },\n                    ],\n                },\n            ],\n        ],\n        reward: {\n            first: ['CRYST_10', 'GOLD_300', 'WEAPON_2'],\n            repeat: ['WEAPON_2', 'GOLD_30'],\n            lost: ['GOLD_15'],\n        },\n    },\n}\n\nexport default STAGES\n","import routingCheckMiddleware from './routingCheck.middleware'\nimport gameStateMiddleware from './gameState.middleware'\nimport rosterMiddleware from './roster.middleware'\nimport equipmentMiddleware from './equipment.middleware'\nimport battleMiddleware from './battle.middleware'\nimport battleCalculationMiddleware from './battleCalculation.middleware'\nimport targetActorMiddleware from './targetActor.middleware'\nimport progressionMiddleware from './progression.middleware'\n\nexport default [\n    routingCheckMiddleware,\n    gameStateMiddleware,\n    rosterMiddleware,\n    equipmentMiddleware,\n    battleMiddleware,\n    battleCalculationMiddleware,\n    targetActorMiddleware,\n    progressionMiddleware,\n]\n","/* eslint-disable consistent-return */\nimport { setBattleResultState } from '../../actions/game/gameState.actions'\nimport STAGES from '../../../constants/STAGES'\n\nconst progressionMiddleware = ({ getState, dispatch }) => next => (action) => {\n    const { payload, meta } = action\n    const { checkProgress } = meta || {}\n\n    if (!checkProgress) {\n        return next(action)\n    }\n\n    const { progress: { stageID, outcome } } = payload\n    const [chapterString, sectionString] = stageID.split('-')\n    const chapter = parseInt(chapterString, 10)\n    const section = parseInt(sectionString, 10)\n    const { progression: { stages } } = getState()\n    const currentStatus = stages[chapter][section]\n\n    if (!currentStatus) {\n        console.log('catch 23!')\n        return false\n    }\n\n    const calculatedProgress = {\n        stageID,\n        chapter,\n        section,\n        outcome: (\n            (outcome === 'lost')\n                ? outcome\n                : (currentStatus === 'cleared') ? 'repeat' : 'first'\n        ),\n        status: (\n            (currentStatus === 'cleared')\n                ? currentStatus\n                : (outcome === 'won') ? 'cleared' : 'failed'\n        ),\n        nextStage: false,\n    }\n\n    if (\n        outcome === 'won'\n        && (\n            currentStatus === 'new'\n            || currentStatus === 'failed'\n        )\n    ) {\n        const nextStage = STAGES[`${chapter}-${section + 1}`]\n            || STAGES[`${chapter + 1}-${1}`]\n            || { ID: 'ToBeContinued' }\n        calculatedProgress.nextStage = nextStage.ID\n    }\n\n    dispatch(setBattleResultState(calculatedProgress.outcome))\n\n    return next({ ...action, payload: calculatedProgress })\n}\n\nexport default progressionMiddleware\n","import initGameMiddleware from './initGame.middleware'\nimport coreMiddleware from './core'\nimport { routerMiddleware } from '../router/router'\nimport gameMiddleware from './game'\n\nexport default [\n    initGameMiddleware,\n    ...coreMiddleware,\n    routerMiddleware,\n    ...gameMiddleware,\n]\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport middleware from './middleware'\nimport applyDevtoolExtension from './redux-devtools-extension'\nimport { initDispatch, routerEnhancer } from './router/router'\nimport { loadState } from '../utils/localStorage'\n\nconst persistedState = loadState()\n\nconst composeEnhancers = compose(\n    routerEnhancer,\n    applyMiddleware(...middleware),\n    applyDevtoolExtension(),\n)\n\nconst configureStore = () => {\n    const store = createStore(rootReducer, persistedState, composeEnhancers)\n\n    initDispatch()\n\n    return store\n}\n\nexport default configureStore\n","export default function applyDevtoolExtension() {\n    /* eslint-disable no-underscore-dangle */\n    const browserExtensionIsInstalled = window.__REDUX_DEVTOOLS_EXTENSION__\n    return browserExtensionIsInstalled ? window.__REDUX_DEVTOOLS_EXTENSION__() : store => store\n    /* eslint-enable */\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst SimpleFrame = (props) => {\n    const { children } = props\n    return (\n        <div className=\"game\">\n            <div className=\"game__body\">\n                {React.Children.map(children, child => child)}\n            </div>\n            <div className=\"game__footer\"><em>made by AllBitsEqual</em></div>\n        </div>\n    )\n}\n\nSimpleFrame.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default SimpleFrame\n","import React from 'react'\nimport Link from 'redux-first-router-link'\nimport SimpleFrame from '../components/frame/SimpleFrame'\nimport { goToAdventure, goToSettings } from '../redux/actions/routing/route.actions'\n\nfunction Home() {\n    return (\n        <SimpleFrame>\n            <div className=\"scene--base scene__home\">\n                <span className=\"game__title--background\">test</span>\n                <h1 className=\"game__title\">\n                    <span className=\"game__title--clash\">Clash</span>\n                    <span className=\"game__title--of\">of</span>\n                    <span className=\"game__title--emoji\">Emoji</span>\n                    <span className=\"game__title--poo\" role=\"img\" aria-label=\"poo\">💩</span>\n                    <span className=\"game__title--bomb\" role=\"img\" aria-label=\"da bomb\">💣</span>\n                    <em className=\"game__title--alpha\"> (αlpha)</em>\n                </h1>\n                <div className=\"game__title--buttons\">\n                    <Link className=\"buttonLink--wrapper\" to={goToAdventure()}>\n                        <button className=\"button--base\" type=\"button\">Start</button>\n                    </Link>\n                    <Link className=\"buttonLink--wrapper\" to={goToSettings()}>\n                        <button className=\"button--base\" type=\"button\">Settings</button>\n                    </Link>\n                </div>\n            </div>\n        </SimpleFrame>\n    )\n}\n\nexport default Home\n","const UI = {\n    POOP: '💩',\n    RESOURCES: {\n        GOLD: {\n            icon: '💰', name: 'Gold',\n        },\n        CRYST: {\n            icon: '💠', name: 'Cryst',\n        },\n        GEMS: {\n            icon: '💎', name: 'Gems',\n        },\n    },\n    MENU: {\n        icon: '☰', name: 'Menu',\n    },\n    MORE: {\n        icon: '…', name: 'More',\n    },\n    CASINO: {\n        icon: '🎰', name: 'Casino',\n    },\n    GAMBLE: {\n        icon: '🎲', name: 'Gamble',\n    },\n    SHOP: {\n        icon: '🛍️', name: 'Shop',\n    },\n    INVENTORY: {\n        icon: '🎒', name: 'Inventory',\n    },\n    MISC: {\n        QUESTION_MARK_1: {\n            icon: '❓', name: 'Question Mark',\n        },\n        QUESTION_MARK_2: {\n            icon: '❔', name: 'Question Mark',\n        },\n        EXCLAMATION_MARK_1: {\n            icon: '❗', name: 'Exclamation Mark',\n        },\n        EXCLAMATION_MARK_2: {\n            icon: '❕', name: 'Exclamation Mark',\n        },\n    },\n    UI: {\n        SKIP: {\n            icon: '⏩', name: 'Skip',\n        },\n        REPEAT: {\n            icon: '🔁', name: 'Repeat',\n        },\n        CHECK: {\n            icon: '✔️', name: 'Check',\n        },\n        MULTIPLY: {\n            icon: '✖️', name: 'Multiply',\n        },\n        DIVISION: {\n            icon: '➗', name: 'Division',\n        },\n        PLUS: {\n            icon: '➕', name: 'Plus',\n        },\n        MINUS: {\n            icon: '➖', name: 'Minus',\n        },\n        CORRECT: {\n            icon: '⭕', name: 'Correct',\n        },\n        WRONG: {\n            icon: '❌', name: 'Wrong',\n        },\n    },\n    STATS: {\n        BELIEVE: {\n            icon: '🛐', name: 'Believe',\n        },\n        PHYSICAL: {\n            icon: '🛐', name: 'Believe',\n        },\n        MAGIC: {\n            icon: '🔯', name: 'Believe',\n        },\n    },\n    ELEMENTS: {\n        AIR: {\n            icon: '🌪', name: 'Air',\n        },\n        FIRE: {\n            icon: '🔥', name: 'Fire',\n        },\n        EARTH: {\n            icon: '🥔', name: 'Earth',\n        },\n        WATER: {\n            icon: '💧', name: 'Water',\n        },\n    },\n}\n\nexport default UI\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport UI from '../../../constants/UI'\n\nconst TopBarDefault = (props) => {\n    const { resources } = props\n    const resourceElements = Object.keys(resources).map((type) => {\n        const { icon, name } = UI.RESOURCES[type]\n        return (\n            <div key={`topBar__resources--item res_${type}`} title={name} className={`resources__bar--item resource_${type}`}>\n                <span className=\"topBar__resources--icon\">{icon}</span>\n                <span className=\"topBar__resources--amount\">{resources[type]}</span>\n            </div>\n        )\n    })\n    return (\n        <div className=\"topBar__default\">\n            {/* <button type=\"button\" className=\"topBar__button\">Menu</button> */}\n            {resourceElements}\n        </div>\n    )\n}\n\nTopBarDefault.propTypes = {\n    resources: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    resources: state.resources,\n})\n\nexport default connect(\n    mapStateToProps,\n)(TopBarDefault)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ResourceBar from '../ui/other/TopBarDefault'\n\nconst DefaultFrame = (props) => {\n    const { children } = props\n    return (\n        <div className=\"game\">\n            <header className=\"game__header\">\n                <ResourceBar />\n            </header>\n            <div className=\"game__body\">\n                {React.Children.map(children, child => child)}\n            </div>\n            <div className=\"game__footer\"><em>made by AllBitsEqual</em></div>\n        </div>\n    )\n}\n\nDefaultFrame.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default DefaultFrame\n","import { createSelector } from 'reselect'\n\nconst getGameState = state => state.gameState\n\nconst getPreviousPage = createSelector(\n    getGameState,\n    (gameState) => {\n        const { page } = gameState\n        return [...page].slice(-2)[0]\n    }\n)\n\nexport default getPreviousPage\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Link from 'redux-first-router-link'\nimport { connect } from 'react-redux'\nimport getPreviousPage from '../../../redux/selectors/getPreviousPage'\n\nconst BackLink = ({ children, previousPage }) => {\n    const previousPageAction = {\n        type: previousPage,\n        meta: {\n            gameState: 'routing',\n        },\n    }\n    return (\n        <Link className=\"backLink--wrapper\" to={previousPageAction}>\n            {React.Children.map(children, child => child)}\n        </Link>\n    )\n}\n\nBackLink.propTypes = {\n    children: PropTypes.node.isRequired,\n    previousPage: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    previousPage: getPreviousPage(state),\n})\n\nexport default connect(\n    mapStateToProps,\n)(BackLink)\n","import React from 'react'\nimport DefaultFrame from '../components/frame/DefaultFrame'\nimport BackLink from '../components/ui/navigation/BackLink'\n\nfunction Settings() {\n    return (\n        <DefaultFrame>\n            <div className=\"scene--base scene__settings\">\n                <div className=\"scene--title\">\n                    <BackLink>\n                        <button className=\"backLink--title\" type=\"button\">Back</button>\n                    </BackLink>\n                    <h1>Settings</h1>\n                </div>\n                <h2>Here be Dragons...</h2>\n                <ul>\n                    <li>Difficulty</li>\n                    <li>Language</li>\n                    <li>Link Account to Social Media</li>\n                    <li>Link Account to OpenID</li>\n                </ul>\n            </div>\n        </DefaultFrame>\n    )\n}\n\nexport default Settings\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport entityHelper from '../../utils/entityHelper'\n\nconst { getUnitData } = entityHelper\n\nconst UnitCard = (props) => {\n    const {\n        inSquad, baseUnit, clickAdd, clickEdit, clickDelete,\n    } = props\n    const {\n        ID, name, avatar,\n    } = getUnitData(baseUnit)\n\n    const handlerButton = (label, className, handler) => (\n        <button type=\"button\" className={className} onClick={handler}>\n            {label}\n        </button>\n    )\n\n    const clickAddHandler = (!inSquad && clickAdd.enabled)\n        ? handlerButton('➕ ADD', 'button--add', () => clickAdd.handler(ID))\n        : ''\n    const clickEditHandler = (clickEdit.enabled)\n        ? handlerButton('⚙️ EDIT', '', () => clickEdit.handler(ID))\n        : ''\n    const clickDeleteHandler = (inSquad && clickDelete.enabled)\n        ? handlerButton('➖ DELETE', 'button--delete', () => clickDelete.handler(ID))\n        : ''\n\n    return (\n        <div className=\"unit__card\">\n            {name}\n            {avatar}\n            {clickEditHandler}\n            {clickAddHandler}\n            {clickDeleteHandler}\n        </div>\n    )\n}\n\nUnitCard.propTypes = {\n    inSquad: PropTypes.bool.isRequired,\n    baseUnit: PropTypes.object.isRequired,\n    clickAdd: PropTypes.object.isRequired,\n    clickEdit: PropTypes.object.isRequired,\n    clickDelete: PropTypes.object.isRequired,\n}\n\nexport default UnitCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport UnitCard from './UnitCard'\n\nconst SquadMonitor = (props) => {\n    const {\n        squadUnits, handleEdit, handleDelete, children,\n    } = props\n\n    return (\n        <div className=\"squad__monitor\">\n            <h2 className=\"squad__monitor--title\">\n                <span>Your current Squad</span>\n                {React.Children.map(children, child => child)}\n            </h2>\n\n            <div className=\"squad__monitor--listing\">\n                {\n                    squadUnits.map(baseUnit => (\n                        <UnitCard\n                            key={baseUnit.ID}\n                            inSquad\n                            baseUnit={baseUnit}\n                            clickAdd={{ enabled: false }}\n                            clickEdit={handleEdit}\n                            clickDelete={handleDelete}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nSquadMonitor.propTypes = {\n    squadUnits: PropTypes.array.isRequired,\n    handleEdit: PropTypes.object.isRequired,\n    handleDelete: PropTypes.object.isRequired,\n    children: PropTypes.node,\n}\n\nSquadMonitor.defaultProps = {\n    children: [],\n}\n\nexport default SquadMonitor\n","import { createSelector } from 'reselect'\n\nconst getSquad = state => state.squad\nconst getRoster = state => state.roster\nconst getEquipment = state => state.equipment\nconst getInventory = state => state.inventory\n\nconst getSquadFromRoster = createSelector(\n    getSquad,\n    getRoster,\n    (squad, roster) => (Object.values(roster).filter(unit => squad.includes(unit.ID)))\n)\n\nconst getSquadWithEquipment = createSelector(\n    getSquadFromRoster,\n    getEquipment,\n    getInventory,\n    (actors, equipment, inventory) => (actors.map((actor) => {\n        const itemList = Object.values(equipment).reduce((arr, entry) => {\n            if (entry.unitID === actor.ID) { arr.push(entry.itemID) }\n            return arr\n        }, [])\n        const items = inventory.filter(item => itemList.includes(item.ID))\n        return Object.assign({}, actor, { equipment: items })\n    }))\n)\n\nexport default getSquadWithEquipment\n\n","import { createSelector } from 'reselect'\nimport STAGES from '../../constants/STAGES'\n\nconst getProgression = state => state.progression\nconst getStages = () => STAGES\n\nconst getStagesFromProgression = createSelector(\n    getProgression,\n    getStages,\n    (progression, stages) => {\n        const { stages: progStages } = progression\n        return Object.values(stages).map((stage) => {\n            const [chapterString, sectionString] = stage.ID.split('-')\n            const chapter = parseInt(chapterString, 10)\n            const section = parseInt(sectionString, 10)\n\n            progStages[chapter] = progStages[chapter] || {}\n\n            const status = progStages[chapter][section] || false\n\n            return { ...stage, status }\n        })\n    }\n)\n\nexport default getStagesFromProgression\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Link from 'redux-first-router-link'\nimport connect from 'react-redux/es/connect/connect'\nimport DefaultFrame from '../components/frame/DefaultFrame'\nimport SquadMonitor from '../components/entity/SquadMonitor'\nimport { goToSquad, goToBattle } from '../redux/actions/routing/route.actions'\nimport getSquadWithEquipment from '../redux/selectors/getSquadWithEquipment'\nimport getStagesFromProgression from '../redux/selectors/getStagesFromProgression'\nimport BackLink from '../components/ui/navigation/BackLink'\n\nconst Adventure = ({ squadUnits, stages }) => {\n    const stageSelection = !squadUnits.length\n        ? (\n            <div className=\"no__units\">\n                Please select at least one unit for your current squad!\n            </div>\n        )\n        : (\n            stages.map((stage) => {\n                const {\n                    ID, title, status, location,\n                } = stage\n                const stageCount = location.length\n                const stageTitle = title || ID\n                const StageBadge = (status === 'failed') ? '' : (\n                    <div className={`stage__badge stage__badge--${status}`}>\n                        {status}\n                    </div>\n                )\n                return !status ? '' : (\n                    <Link\n                        key={ID}\n                        className={`stage__box stage__box--${status}`}\n                        to={goToBattle(ID)}\n                    >\n                        {StageBadge}\n                        <div className=\"stage__box--title\">\n                            {stageTitle}\n                        </div>\n                        <div className=\"stage__box--stages\">\n                            {`Stages: ${stageCount}`}\n                        </div>\n                    </Link>\n                )\n            })\n        )\n    return (\n        <DefaultFrame>\n            <div className=\"scene--base scene__adventure\">\n                <div className=\"scene--title\">\n                    <BackLink>\n                        <button className=\"backLink--title\" type=\"button\">Back</button>\n                    </BackLink>\n                    <h1>Adventure</h1>\n                </div>\n                <SquadMonitor\n                    squadUnits={squadUnits}\n                    handleEdit={{ enabled: false }}\n                    handleDelete={{ enabled: false }}\n                >\n                    <Link className=\"buttonLink--wrapper\" to={goToSquad()}>\n                        <button type=\"button\">Edit Squad</button>\n                    </Link>\n                </SquadMonitor>\n                <h2>\n                    Select a stage:\n                </h2>\n                <div className=\"adventure__stage--list\">\n                    {stageSelection}\n                </div>\n            </div>\n        </DefaultFrame>\n    )\n}\n\nAdventure.propTypes = {\n    squadUnits: PropTypes.array.isRequired,\n    stages: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    squadUnits: getSquadWithEquipment(state),\n    stages: getStagesFromProgression(state),\n})\n\nexport default connect(\n    mapStateToProps,\n)(Adventure)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport UnitCard from './UnitCard'\n\nconst RosterMonitor = (props) => {\n    const {\n        rosterUnits, handleAdd, handleEdit,\n    } = props\n\n    return (\n        <div className=\"roster__monitor\">\n            <h3>\n                Hire more members:\n            </h3>\n            <div className=\"roster__monitor--listing\">\n                {\n                    rosterUnits.map(baseUnit => (\n                        <UnitCard\n                            key={baseUnit.ID}\n                            baseUnit={baseUnit}\n                            inSquad={false}\n                            clickAdd={handleAdd}\n                            clickEdit={handleEdit}\n                            clickDelete={{ enabled: false }}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nRosterMonitor.propTypes = {\n    rosterUnits: PropTypes.array.isRequired,\n    handleEdit: PropTypes.object.isRequired,\n    handleAdd: PropTypes.object.isRequired,\n}\n\nexport default RosterMonitor\n","import { createSelector } from 'reselect'\n\nconst getSquad = state => state.squad\nconst getRoster = state => state.roster\n\nconst getAvailableUnitsFromRoster = createSelector(\n    getSquad,\n    getRoster,\n    (squad, roster) => (Object.values(roster).filter(unit => !squad.includes(unit.ID)))\n)\n\nexport default getAvailableUnitsFromRoster\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addSquadMembers, deleteSquadMembers } from '../redux/actions/game/squad.actions'\nimport DefaultFrame from '../components/frame/DefaultFrame'\nimport SquadMonitor from '../components/entity/SquadMonitor'\nimport RosterMonitor from '../components/entity/RosterMonitor'\nimport BackLink from '../components/ui/navigation/BackLink'\nimport { goToUnit } from '../redux/actions/routing/route.actions'\nimport getSquadFromRoster from '../redux/selectors/getSquadWithEquipment'\nimport getAvailableUnitsFromRoster from '../redux/selectors/getAvailableUnitsFromRoster'\n\nconst Squad = (props) => {\n    const {\n        squadUnits, rosterUnits, editUnit, addMember, deleteMember,\n    } = props\n\n    return (\n        <DefaultFrame>\n            <div className=\"scene--base scene__squad\">\n                <div className=\"scene--title\">\n                    <BackLink>\n                        <button className=\"backLink--title\" type=\"button\">Back</button>\n                    </BackLink>\n                    <h1>Squad Page</h1>\n                </div>\n                <SquadMonitor\n                    squadUnits={squadUnits}\n                    handleEdit={{ enabled: true, handler: editUnit }}\n                    handleDelete={{ enabled: true, handler: deleteMember }}\n                />\n                <RosterMonitor\n                    rosterUnits={rosterUnits}\n                    handleEdit={{ enabled: true, handler: editUnit }}\n                    handleAdd={{ enabled: true, handler: addMember }}\n                />\n                <BackLink>\n                    <button className=\"backLink--base\" type=\"button\">Back to previous screen</button>\n                </BackLink>\n            </div>\n        </DefaultFrame>\n    )\n}\n\nSquad.propTypes = {\n    squadUnits: PropTypes.array.isRequired,\n    rosterUnits: PropTypes.array.isRequired,\n    editUnit: PropTypes.func.isRequired,\n    addMember: PropTypes.func.isRequired,\n    deleteMember: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    squadUnits: getSquadFromRoster(state),\n    rosterUnits: getAvailableUnitsFromRoster(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n    editUnit: unit => dispatch(goToUnit(unit)),\n    addMember: unit => dispatch(addSquadMembers([unit])),\n    deleteMember: unit => dispatch(deleteSquadMembers([unit])),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Squad)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport itemHelper from '../../utils/itemHelper'\n\nconst { getItemData } = itemHelper\n\nconst ItemCard = (props) => {\n    const { item: itemBase, clickEquip, clickUnequip } = props\n\n    const item = getItemData(itemBase)\n\n    const handlerButton = (label, className, handler) => (\n        <button type=\"button\" className={className} onClick={handler}>\n            {label}\n        </button>\n    )\n\n    const clickEquipHandler = (clickEquip.enabled)\n        ? handlerButton('➕ EQUIP', 'button--add', () => clickEquip.handler([item.ID]))\n        : ''\n    const clickUnequipHandler = (clickUnequip.enabled)\n        ? handlerButton('➖ REMOVE', 'button--delete', () => clickUnequip.handler([item.ID]))\n        : ''\n\n    return (\n        <div key={item.ID} className={`item__card item__card--${item.type}`}>\n            <span>\n                {item.icon}\n            </span>\n            {item.name}\n            {clickEquipHandler}\n            {clickUnequipHandler}\n        </div>\n    )\n}\n\nItemCard.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickEquip: PropTypes.object.isRequired,\n    clickUnequip: PropTypes.object.isRequired,\n}\n\nexport default ItemCard\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport ItemCard from './ItemCard'\nimport entityHelper from '../../utils/entityHelper'\n\nconst { getUnitData } = entityHelper\n\nconst UnitDisplay = (props) => {\n    const {\n        baseUnit, equipment, showEquipment, showStats, handleEquip, handleUnequip,\n    } = props\n    const {\n        name, avatar, race, stats, status,\n    } = getUnitData(baseUnit)\n\n    const dataBox = (data) => {\n        if (typeof data === 'undefined' || showStats !== true) { return '' }\n        const attributes = Object.keys(data).map(attribute => (\n            <tr key={attribute}>\n                <td>{attribute}</td>\n                <td>{stats[attribute]}</td>\n            </tr>\n        ))\n\n        return (<table><tbody>{attributes}</tbody></table>)\n    }\n\n    const inventoryBox = () => {\n        if (typeof equipment === 'undefined' || showEquipment !== true) { return '' }\n\n        return (\n            <div className=\"equipment__monitor\">\n                <h2>Equipped</h2>\n                <div className=\"equipment__monitor--listing\">\n                    {equipment.map(item => (\n                        <ItemCard\n                            key={item.ID}\n                            item={item}\n                            clickEquip={handleEquip}\n                            clickUnequip={handleUnequip}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <Fragment>\n            <h1>\n                {`Unit: ${name}`}\n            </h1>\n            <div className=\"unit__monitor--member\">\n                <div className=\"unit__monitor--img\">\n                    {avatar}\n                </div>\n                <div className=\"unit__monitor--detail\">\n                    <div className=\"unit__monitor--name\">\n                        {`${name} (${race})`}\n                    </div>\n                    <div className=\"unit__monitor--stats\">\n                        {dataBox(stats)}\n                    </div>\n                </div>\n            </div>\n\n            {dataBox(status)}\n            {inventoryBox(equipment)}\n\n        </Fragment>\n    )\n}\n\nUnitDisplay.propTypes = {\n    baseUnit: PropTypes.object.isRequired,\n    equipment: PropTypes.array.isRequired,\n    showEquipment: PropTypes.bool.isRequired,\n    showStats: PropTypes.bool.isRequired,\n    handleEquip: PropTypes.object.isRequired,\n    handleUnequip: PropTypes.object.isRequired,\n}\n\nexport default UnitDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ItemCard from './ItemCard'\n\nconst InventoryDisplay = (props) => {\n    const { inventory, handleEquip, handleUnequip } = props\n    return (\n        <div className=\"inventory__monitor\">\n            <h2>Inventory:</h2>\n            <div className=\"inventory__monitor--listing\">\n                {inventory.map(item => (\n                    <ItemCard\n                        key={item.ID}\n                        item={item}\n                        clickEquip={handleEquip}\n                        clickUnequip={handleUnequip}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nInventoryDisplay.propTypes = {\n    inventory: PropTypes.array.isRequired,\n    handleEquip: PropTypes.object.isRequired,\n    handleUnequip: PropTypes.object.isRequired,\n}\n\nexport default InventoryDisplay\n","import { createSelector } from 'reselect'\n\nconst getEquipment = state => state.equipment\nconst getInventory = state => state.inventory\n\nconst getAllEquipedItemIDs = createSelector(\n    getEquipment,\n    equipment => (\n        Object.values(equipment).reduce((arr, item) => {\n            arr.push(item.itemID)\n            return arr\n        }, [])\n    )\n)\nconst getAvailableItems = createSelector(\n    getAllEquipedItemIDs,\n    getInventory,\n    (allEquipedItemIDs, inventory) => inventory\n        .filter(entry => !allEquipedItemIDs.includes(entry.ID))\n        .sort((a, b) => {\n            if (a.source < b.source) { return -1 }\n            if (a.source > b.source) { return 1 }\n            return 0\n        })\n)\n\nexport default getAvailableItems\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport UnitDisplay from '../components/entity/UnitDisplay'\nimport InventoryDisplay from '../components/entity/InventoryDisplay'\nimport DefaultFrame from '../components/frame/DefaultFrame'\nimport BackLink from '../components/ui/navigation/BackLink'\nimport { addToEquipment, removeFromEquipment } from '../redux/actions/game/equipment.actions'\nimport getEquipment from '../redux/selectors/getEquipment'\nimport getInventory from '../redux/selectors/getInventory'\n\nconst getCurrentUnit = (unitID, roster) => roster[unitID]\n\nconst UnitPage = (props) => {\n    const {\n        baseUnit, equipment, inventory, equipItemWithTarget, unequipItem,\n    } = props\n    const { ID: unitID } = baseUnit\n\n    function dispatchWithTarget(fn, items) {\n        return fn(items, unitID)\n    }\n\n    const equipItem = items => dispatchWithTarget(equipItemWithTarget, items)\n\n    return (\n        <DefaultFrame>\n            <div className=\"scene--base scene__unit\">\n                <div className=\"scene--title\">\n                    <BackLink>\n                        <button className=\"backLink--title\" type=\"button\">Back</button>\n                    </BackLink>\n                    <h1>Unit Page</h1>\n                </div>\n                <div className=\"unit__monitor\">\n                    <UnitDisplay\n                        baseUnit={baseUnit}\n                        equipment={equipment}\n                        showEquipment\n                        showStats\n                        handleEquip={{ enabled: false }}\n                        handleUnequip={{ enabled: true, handler: unequipItem }}\n                    />\n                    <InventoryDisplay\n                        inventory={inventory}\n                        handleEquip={{ enabled: true, handler: equipItem }}\n                        handleUnequip={{ enabled: false }}\n                    />\n                </div>\n                <BackLink>\n                    <button className=\"backLink--base\" type=\"button\">Back to previous screen</button>\n                </BackLink>\n            </div>\n        </DefaultFrame>\n    )\n}\n\nUnitPage.propTypes = {\n    baseUnit: PropTypes.object.isRequired,\n    equipment: PropTypes.array.isRequired,\n    inventory: PropTypes.array.isRequired,\n    equipItemWithTarget: PropTypes.func.isRequired,\n    unequipItem: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    baseUnit: getCurrentUnit(state.unitID, state.roster),\n    equipment: getEquipment(state),\n    inventory: getInventory(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n    equipItemWithTarget: (items, unitID) => dispatch(addToEquipment(items, unitID)),\n    unequipItem: items => dispatch(removeFromEquipment(items)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(UnitPage)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst BattleFrame = (props) => {\n    const { children } = props\n    return (\n        <div className=\"game\">\n            <div className=\"game__body\">\n                {React.Children.map(children, child => child)}\n            </div>\n        </div>\n    )\n}\n\nBattleFrame.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default BattleFrame\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ActorCard = (props) => {\n    const { actor, isSelected, clickHandler } = props\n    const {\n        ID, name, avatar, stats, status,\n    } = actor\n    const damage = status.damage || 0\n\n    const className = `actor__card ${isSelected ? 'selected' : ''}`\n\n    return (\n        <div className={className} onClick={() => clickHandler(ID)}>\n            <div className=\"actor__card--img\" role=\"img\" aria-label=\"avatar\">\n                {avatar}\n            </div>\n            <div className=\"actor__card--name\">\n                {` ${name}`}\n            </div>\n            <progress\n                className=\"actor__card--bar health__bar\"\n                value={stats.hp - damage}\n                max={stats.hp}\n            />\n        </div>\n    )\n}\n\nActorCard.propTypes = {\n    actor: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n}\n\nexport default ActorCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ActorCard from '../entity/ActorCard'\n\nconst displayFactionBoard = (faction, actors, selectedActor, unitClickHandler) => {\n    if (!actors) {\n        return (\n            <div className=\"battleStage__actors no__units\">&nbsp;</div>\n        )\n    }\n    return (\n        <div className={`battleStage__actors battleStage__actors--${faction}`}>\n            {actors.map((actor) => {\n                const { ID } = actor\n                const isSelected = selectedActor === ID\n                return (\n                    <ActorCard\n                        key={actor.ID}\n                        actor={actor}\n                        isSelected={isSelected}\n                        clickHandler={unitClickHandler}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nconst BattleStage = (props) => {\n    const { factions, selectedActor, unitClickHandler } = props\n    const { good: goodGuys, bad: badGuys } = factions\n\n    return (\n        <div className=\"battleStage__monitor\">\n            {displayFactionBoard('good-guys', goodGuys, selectedActor, unitClickHandler)}\n            {displayFactionBoard('bad-guys', badGuys, selectedActor, unitClickHandler)}\n        </div>\n    )\n}\n\nBattleStage.propTypes = {\n    factions: PropTypes.object.isRequired,\n    selectedActor: PropTypes.string.isRequired,\n    unitClickHandler: PropTypes.func.isRequired,\n}\n\nexport default BattleStage\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst InteractiveActionBar = ({ nextActors, selectedActor }) => (\n    <div className=\"interactiveActionsBar\">\n        {\n            nextActors.map((actor, index) => {\n                const {\n                    ID, faction, avatar,\n                } = actor\n                const key = `${ID}_${index}`\n                const selectedClass = selectedActor === ID ? 'selected' : ''\n                return (\n                    <div key={key} className={`iab__slot iab__slot--${faction} ${selectedClass}`}>\n                        {avatar}\n                    </div>\n                )\n            })\n        }\n    </div>\n)\n\nInteractiveActionBar.propTypes = {\n    nextActors: PropTypes.array.isRequired,\n    selectedActor: PropTypes.string.isRequired,\n}\n\nexport default InteractiveActionBar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport dayjs from 'dayjs'\n\nconst getActionTemplate = ({ actor, action }) => {\n    const { target, type } = action\n    if (!target) {\n        return 'No available targets.'\n    }\n    const { faction: targetFaction, name: targetName } = target\n    if (type === 'death') {\n        return (\n            <React.Fragment>\n                <span role=\"img\" aria-label=\"status\">\n                    {'☠️ '}\n                </span>\n                <b className={targetFaction}>\n                    {targetName}\n                </b>\n                {' died.'}\n            </React.Fragment>\n        )\n    }\n    const actorName = actor.name\n    const actorFaction = actor.faction\n    const { damage } = action.changedStatus\n    switch (action.type) {\n        case 'attack': {\n            return (\n                <React.Fragment>\n                    <b className={actorFaction}>\n                        {actorName}\n                    </b>\n                    {' attacks '}\n                    <b className={targetFaction}>\n                        {targetName}\n                    </b>\n                    {` for ${damage} damage.`}\n                </React.Fragment>\n            )\n        }\n        default: {\n            return 'Something strange happened and we weren\\'t able to log it. Sorry!'\n        }\n    }\n}\n\nconst BattleLogEntry = ({ entry }) => {\n    const { timestamp } = entry\n    const formatedTimestamp = dayjs(timestamp).format('H:mm:ss')\n\n    return (\n        <p>\n            {`[${formatedTimestamp}] `}\n            {getActionTemplate(entry)}\n        </p>\n    )\n}\n\nBattleLogEntry.propTypes = {\n    entry: PropTypes.object.isRequired,\n}\n\nexport default BattleLogEntry\n","import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { debounce } from 'throttle-debounce'\nimport BattleLogEntry from './BattleLogEntry'\n\nconst BattleLog = ({ eventLog }) => {\n    const [scrollMaxed, setScrollMaxed] = useState(true)\n    const chatLogDOMNode = useRef(null)\n\n    const getCurrentScroll = () => {\n        const chatLog = chatLogDOMNode.current\n        const { scrollHeight, clientHeight, scrollTop } = chatLog\n\n        return {\n            chatLog,\n            scrollHeight,\n            height: clientHeight,\n            scrollTop,\n            maxScrollTop: scrollHeight - clientHeight,\n        }\n    }\n\n    const scrollToBottom = () => {\n        const { chatLog, maxScrollTop } = getCurrentScroll()\n\n        if (scrollMaxed) {\n            chatLog.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0\n        }\n    }\n\n    useEffect(() => {\n        scrollToBottom()\n    })\n\n    const isScrolledToMax = () => {\n        const { scrollTop, maxScrollTop } = getCurrentScroll()\n        return scrollTop === maxScrollTop\n    }\n\n    const updateScrolledToMax = () => {\n        if (chatLogDOMNode.current) { setScrollMaxed(isScrolledToMax()) }\n    }\n\n    const debouncedUserScroll = debounce(200, () => { updateScrolledToMax() })\n\n    const handleUserScroll = () => {\n        debouncedUserScroll()\n    }\n\n    return (\n        <div className=\"battleLog\">\n            <h5 className=\"battleLog__label\">Battle Log:</h5>\n            <div\n                className=\"battleLog__display\"\n                ref={chatLogDOMNode}\n                onScroll={handleUserScroll}\n            >\n                {\n                    eventLog.map(entry => <BattleLogEntry key={entry.logID} entry={entry} />)\n                }\n            </div>\n        </div>\n    )\n}\n\nBattleLog.propTypes = {\n    eventLog: PropTypes.array.isRequired,\n}\n\nexport default BattleLog\n","import { createSelector } from 'reselect'\n\nconst getBattle = state => state.battle\n\nconst getStoryFromStage = createSelector(\n    getBattle,\n    (battle) => {\n        if (!battle || !battle.stage) { return [] }\n\n        const { stage: { location }, currentStep, currentPhase } = battle\n        if (currentPhase === -1) { return { story: [] } }\n\n        const { story } = location[currentStep][currentPhase]\n        return story || []\n    }\n)\n\nexport default getStoryFromStage\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport getStoryFromStage from '../../../redux/selectors/getStoryFromStage'\nimport { progressBattle } from '../../../redux/actions/game/battle.actions'\n\nconst StoryMode = (props) => {\n    const [storyStep, setStoryStep] = useState(0)\n    const { story, progressAfterStory } = props\n\n    let storyTemplate = ''\n\n    const handleClick = () => {\n        setStoryStep(storyStep + 1)\n        if (!story[storyStep + 1]) {\n            setStoryStep(0)\n            progressAfterStory()\n        }\n    }\n\n    function hideStory() { storyTemplate = ('') }\n\n    function showStory(avatar, name, side, text) {\n        storyTemplate = (/* eslint-disable-next-line */\n            <div className=\"storyMode\" onClick={() => handleClick()}>\n                <div className=\"storyMode__wrapper\">\n                    <div className={`storyMode__actor storyMode__actor--${side}`}>\n                        <div className=\"storyMode__avatar\">{avatar}</div>\n                        <div className=\"storyMode__name\">{name}</div>\n                    </div>\n                    <div className=\"storyMode__text\">{text}</div>\n                </div>\n            </div>\n        )\n    }\n\n    if (!story || story.length <= 0) {\n        hideStory()\n    }\n    if (story && story[storyStep]) {\n        const {\n            avatar, name, side, text,\n        } = story[storyStep]\n        showStory(avatar, name, side, text)\n    }\n\n    return storyTemplate\n}\n\nStoryMode.propTypes = {\n    story: PropTypes.array.isRequired,\n    progressAfterStory: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    story: getStoryFromStage(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n    progressAfterStory: () => dispatch(progressBattle()),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StoryMode)\n","import { createSelector } from 'reselect'\n\nconst getBattle = state => state.battle\n\nconst getBattleData = createSelector(\n    getBattle,\n    (battle) => {\n        if (!battle || !battle.stage) {\n            return {\n                currentTitle: 'loading',\n            }\n        }\n        const { stage: { location }, currentStep } = battle\n        const { title: currentTitle } = location[currentStep]\n        return { ...battle, currentTitle }\n    }\n)\n\nexport default getBattleData\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { timer } from 'rxjs'\n\nimport { advanceTurn } from '../../../redux/actions/game/activeTime.actions'\nimport getBattleData from '../../../redux/selectors/getBattleData'\n\nconst TurnCounter = (props) => {\n    const { advance, activeTime: { turn /* , status */ }, battleData: { currentStatus } } = props\n    useEffect(() => {\n        const battleTimer = timer(1000, 2000)\n        const tickSubscription = battleTimer.subscribe((tick) => {\n            if (currentStatus === 'active') {\n                advance(tick)\n            }\n        })\n        return () => {\n            tickSubscription.unsubscribe()\n        }\n    }, [advance, currentStatus])\n\n    // const statusIcon = status === 'running' ? '⏩' : '⏹'\n\n    return (\n        <div className=\"turnCounter\">\n            <div>\n                {`${turn + 1}`}\n            </div>\n            {/* `Status: ${statusIcon}` */}\n        </div>\n    )\n}\n\nTurnCounter.propTypes = {\n    activeTime: PropTypes.object.isRequired,\n    battleData: PropTypes.object.isRequired,\n    advance: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    activeTime: state.activeTime,\n    battleData: getBattleData(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n    advance: (tick) => {\n        dispatch(advanceTurn(tick))\n    },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TurnCounter)\n","import { createSelector } from 'reselect'\nimport { groupBy } from '../../utils/helper'\n\nconst getActors = state => state.actors\n\nconst getFactions = createSelector(\n    getActors,\n    actors => groupBy(Object.values(actors), 'faction')\n)\n\nexport default getFactions\n","import { createSelector } from 'reselect'\nimport { sortBy } from '../../utils/helper'\n\nconst getActors = state => state.actors\n\nconst getNextActorsByRate = (actors) => {\n    const activeTimeActorRates = actors.map((actor) => {\n        // ToDo: implement more sophisticated solution including status and duration\n        const actorsNextRates = [\n            { ...actor },\n            { ...actor, timeframe: actor.timeframe + actor.stats.rate },\n            { ...actor, timeframe: actor.timeframe + (actor.stats.rate * 2) },\n            { ...actor, timeframe: actor.timeframe + (actor.stats.rate * 3) },\n            { ...actor, timeframe: actor.timeframe + (actor.stats.rate * 4) },\n        ]\n        return actorsNextRates\n    })\n    return activeTimeActorRates.flat()\n}\n\nconst getNextActors = createSelector(\n    getActors,\n    actors => sortBy(Object.values(getNextActorsByRate(actors)), 'timeframe')\n)\n\nexport default getNextActors\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport BattleFrame from '../components/frame/BattleFrame'\nimport BattleStage from '../components/stage/BattleStage'\nimport InteractiveActionBar from '../components/ui/atf/InteractiveActionBar'\nimport BattleLog from '../components/ui/chat/BattleLog'\nimport StoryMode from '../components/ui/other/StoryMode'\nimport TurnCounter from '../components/ui/atf/TurnCounter'\nimport getFactions from '../redux/selectors/getFactions'\nimport getBattleData from '../redux/selectors/getBattleData'\nimport getNextActors from '../redux/selectors/getNextActors'\nimport { initBattle, resetBattle } from '../redux/actions/game/battle.actions'\nimport { selectTargetActor } from '../redux/actions/game/targetActor.actions'\nimport STAGES from '../constants/STAGES'\nimport getSquadWithEquipment from '../redux/selectors/getSquadWithEquipment'\n\nconst Battle = (props) => {\n    const {\n        squadUnits,\n        battle,\n        battleStage,\n        factions,\n        selectedActor,\n        nextActors,\n        battleLog,\n        initialiseStage,\n        clearStage,\n        selectActor,\n    } = props\n\n    const stageData = STAGES[battleStage]\n    const { currentBanner: stageTitle } = battle\n\n    const [stageHeaderClass, setStageHeaderClass] = useState('battleStage__header')\n\n    useEffect(() => {\n        initialiseStage(squadUnits, stageData)\n        return () => {\n            clearStage()\n        }\n    }, [initialiseStage, clearStage, squadUnits, stageData])\n\n    useEffect(() => {\n        if (stageTitle && stageTitle !== 'loading') {\n            setStageHeaderClass('battleStage__header battleStage__header--animating')\n            setTimeout(\n                () => {\n                    setStageHeaderClass('battleStage__header battleStage__header--animated')\n                },\n                2500\n            )\n        }\n    }, [stageTitle])\n\n    return (\n        <BattleFrame>\n            <div className=\"scene--base scene__battleStage\">\n                <div className=\"battleStage__stage\">\n                    <div className={stageHeaderClass}>\n                        <div className=\"battleStage__header--title\">\n                            {stageTitle}\n                        </div>\n                    </div>\n                    <BattleStage\n                        factions={factions}\n                        selectedActor={selectedActor}\n                        unitClickHandler={selectActor}\n                    />\n                </div>\n                <div className=\"battleStage__iab\">\n                    <TurnCounter />\n                    <InteractiveActionBar\n                        nextActors={nextActors}\n                        selectedActor={selectedActor}\n                    />\n                </div>\n                <div className=\"battleStage__ui\">\n                    <BattleLog eventLog={battleLog} />\n                </div>\n                <StoryMode />\n            </div>\n        </BattleFrame>\n    )\n}\n\nBattle.propTypes = {\n    factions: PropTypes.object.isRequired,\n    selectedActor: PropTypes.string.isRequired,\n    nextActors: PropTypes.array.isRequired,\n    battleLog: PropTypes.array.isRequired,\n    squadUnits: PropTypes.array.isRequired,\n    battle: PropTypes.object.isRequired,\n    battleStage: PropTypes.string.isRequired,\n    initialiseStage: PropTypes.func.isRequired,\n    clearStage: PropTypes.func.isRequired,\n    selectActor: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    factions: getFactions(state),\n    nextActors: getNextActors(state),\n    battleLog: state.battleLog,\n    squadUnits: getSquadWithEquipment(state),\n    battle: getBattleData(state),\n    battleStage: state.battleStage,\n    selectedActor: state.targetActor,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialiseStage: (squadUnits, stage) => {\n        dispatch(initBattle(squadUnits, stage))\n    },\n    clearStage: () => dispatch(resetBattle()),\n    selectActor: actor => dispatch(selectTargetActor(actor)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Battle)\n","import { createSelector } from 'reselect'\n\nconst getGameState = state => state.gameState\n\nconst getBattleResult = createSelector(\n    getGameState,\n    (gameState) => {\n        const { battleResult } = gameState\n        return battleResult\n    }\n)\n\nexport default getBattleResult\n","const ADVICE = {\n    global: [\n        'Some enemies have an elemental weakness. Try to exploit those with the right spells and weapons.',\n        'If an enemy deals too much damage with an elemental attack, try to find something to raise your respective resistance.',\n    ],\n    lost: [\n        'Always make sure, you are using the best units for each battle. Recruit new units or check if new recruits are better suited for the task at hand.',\n        'You will often get useful equipment after battles. Check your squad for possible improvements every now and then.',\n        'If you want to take down one enemy first, you can focus attacks on it by selecting it.',\n        'Some enemies deal more damage than others. Try to focus your attacks on those first.',\n        'If you can\\'t beat a certain enemy, try searching in old and cleared regions for some stuff to get better equipment.',\n    ],\n}\n\nexport default ADVICE\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport ADVICE from '../../constants/ADVICE'\n\nconst AdviceBox = ({ category }) => {\n    const { [category]: listOfAdvice } = ADVICE\n    const adviceCount = listOfAdvice.length - 1\n\n    const [currentAdviceIndex, setCurrentAdviceIndex] = useState(\n        Math.floor(Math.random() * adviceCount)\n    )\n\n    const [currentAdviceText, setCurrentAdviceText] = useState(\n        listOfAdvice[currentAdviceIndex]\n    )\n\n    const increaseAdviceIndex = () => {\n        const index = (currentAdviceIndex + 1) > adviceCount\n            ? 0\n            : currentAdviceIndex + 1\n        const text = listOfAdvice[index]\n        setCurrentAdviceIndex(index)\n        setCurrentAdviceText(text)\n    }\n\n    return (\n        <div className=\"result__tips\">\n            <h3>Tip:</h3>\n            {currentAdviceText}\n            <div className=\"result__tips--paging\">\n                <button type=\"button\" className=\"result__tips--next\" onClick={() => increaseAdviceIndex()}>\n                    next\n                </button>\n                <span className=\"result__tips--counter\">\n                    {` ${currentAdviceIndex + 1}/${adviceCount + 1}`}\n                </span>\n            </div>\n        </div>\n    )\n}\n\nAdviceBox.propTypes = {\n    category: PropTypes.string.isRequired,\n}\n\nexport default AdviceBox\n","const ITEMGROUPS = {\n    WEAPON: {\n        1: [\n            'SWORD_001',\n            'MACE_001',\n            'DAGGER_001',\n        ],\n        2: [\n            'SWORD_011',\n            // 'BOW_001', // ToDo: implement 1hand, 2hand, dual wield logic first\n        ],\n        3: [],\n    },\n    ARMOR: {\n        1: [\n            'SHIELD_001',\n            'TORSO_001',\n            'TROUSERS_001',\n            'BOOTS_001',\n            'GLOVES_001',\n        ],\n        2: [\n            'SHIELD_011',\n        ],\n        3: [],\n    },\n    SET: {\n        FIRE: [\n            'SWORD_011',\n        ],\n        EARTH: [\n            'SHIELD_011',\n        ],\n    },\n}\n\nexport default ITEMGROUPS\n","const REWARDS = {\n    GOLD: {\n        name: 'Gold',\n        type: 'resources',\n        category: 'currency',\n    },\n    CRYST: {\n        name: 'Cryst',\n        type: 'resources',\n        category: 'currency',\n    },\n    HERO: {\n        name: 'Hero',\n        type: 'roster',\n        category: 'unit',\n    },\n    WEAPON: {\n        name: 'Weapon',\n        type: 'inventory',\n        category: 'weapon',\n    },\n    ARMOR: {\n        name: 'Armor',\n        type: 'inventory',\n        category: 'armor',\n    },\n    SET: {\n        name: 'Set Item',\n        type: 'inventory',\n        category: 'set',\n    },\n}\n\nexport default REWARDS\n","import { createUniqueId } from './helper'\nimport REWARDS from '../constants/REWARDS'\n\nconst createRewardBase = (rewardString) => {\n    const [identifier, details] = rewardString.split('_')\n    const { name, type, category } = REWARDS[identifier]\n    return ({\n        ID: `reward_${createUniqueId()}`,\n        source: rewardString,\n        name,\n        type,\n        category,\n        identifier,\n        details,\n    })\n}\n\nconst getRewardData = rewardString => createRewardBase(rewardString)\n\nexport default {\n    createRewardBase,\n    getRewardData,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport UI from '../../constants/UI'\nimport HEROES from '../../constants/HEROES'\nimport RACES from '../../constants/RACES'\nimport ITEMGROUPS from '../../constants/ITEMGROUPS'\n\nimport { addToRoster } from '../../redux/actions/game/roster.actions'\nimport { addInventoryItems } from '../../redux/actions/game/inventory.actions'\nimport { addToResources } from '../../redux/actions/game/resources.actions'\n\nimport rewardHelper from '../../utils/rewardHelper'\nimport itemHelper from '../../utils/itemHelper'\n\nconst { getRewardData } = rewardHelper\nconst { createItemBase, getItemData } = itemHelper\n\nconst RewardBox = (props) => {\n    const {\n        rewards, addItems, addResources, addUnits,\n    } = props\n\n    const rewardItems = rewards.map((rewardString) => {\n        const rewardData = getRewardData(rewardString)\n        const {\n            ID, type, name: label, identifier, details,\n        } = rewardData\n        const reward = {}\n\n        switch (type) {\n            case 'resources': {\n                addResources({ [identifier]: parseInt(details, 10) })\n                reward.icon = UI.RESOURCES[identifier].icon\n                reward.detail = `${details} ${label}`\n                break\n            }\n            case 'roster': {\n                const newHero = HEROES[details]\n                addUnits([newHero])\n                const { type: race, name, gender } = newHero\n                reward.icon = RACES[race].avatar[gender]\n                reward.detail = `${name} joins the team!`\n                break\n            }\n            case 'inventory': {\n                const newItemSelection = ITEMGROUPS[identifier][details]\n                const newItem = newItemSelection[Math.floor(\n                    Math.random() * newItemSelection.length\n                )]\n                addItems([newItem])\n                const itemPreview = getItemData(createItemBase(newItem))\n                const { icon, name } = itemPreview\n                reward.icon = icon\n                reward.detail = name\n                break\n            }\n            default: {\n                // nothing to do here.\n            }\n        }\n\n        return { ID, ...reward }\n    })\n\n    return (\n        <div className=\"rewards--listing\">\n            {rewardItems.map((item) => {\n                const { ID, icon, detail } = item\n                return (\n                    <div className=\"reward__card\" key={ID}>\n                        <span className=\"reward__card--icon\">{icon}</span>\n                        <span className=\"reward__card--detail\">{detail}</span>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nRewardBox.propTypes = {\n    rewards: PropTypes.array.isRequired,\n    addUnits: PropTypes.func.isRequired,\n    addItems: PropTypes.func.isRequired,\n    addResources: PropTypes.func.isRequired,\n}\n\nconst mapDispatchToProps = dispatch => ({\n    addUnits: baseUnits => dispatch(addToRoster(baseUnits)),\n    addItems: baseItems => dispatch(addInventoryItems(baseItems)),\n    addResources: resources => dispatch(addToResources(resources)),\n})\n\nexport default connect(\n    null,\n    mapDispatchToProps,\n)(RewardBox)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Link from 'redux-first-router-link'\n\nimport { goToAdventure, goToHome } from '../redux/actions/routing/route.actions'\n\nimport STAGES from '../constants/STAGES'\n\nimport DefaultFrame from '../components/frame/DefaultFrame'\nimport getBattleResult from '../redux/selectors/getBattleResult'\nimport AdviceBox from '../components/other/AdviceBox'\nimport Rewards from '../components/other/RewardBox'\n\nconst BattleResult = (props) => {\n    const {\n        battleStage, result,\n    } = props\n\n    const stageData = STAGES[battleStage]\n    const rewards = stageData.reward[result]\n\n    const resultHeader = () => {\n        switch (result) {\n            case 'first': {\n                return {\n                    headerText: 'Stage cleared, congratulation!',\n                    headerClass: 'result__header result__header--won',\n                }\n            }\n            case 'repeat': {\n                return {\n                    headerText: 'Stage cleared again, great!',\n                    headerClass: 'result__header result__header--repeat',\n                }\n            }\n            case 'lost':\n            default: {\n                return {\n                    headerText: 'YOU DIED',\n                    headerClass: 'result__header result__header--lost',\n                }\n            }\n        }\n    }\n    const { headerText, headerClass } = resultHeader()\n\n    return (\n        <DefaultFrame>\n            <div className=\"scene--base scene__battle-result\">\n                <div className=\"scene--title\">\n                    <h1 className={headerClass}>\n                        {headerText}\n                    </h1>\n                </div>\n\n                <Rewards rewards={rewards} />\n\n                { (result === 'lost') && <AdviceBox category={result} /> }\n\n                <Link className=\"buttonLink--wrapper\" to={goToAdventure()}>\n                    <button className=\"button--base\" type=\"button\">Back to Adventure</button>\n                </Link>\n                <Link className=\"buttonLink--wrapper\" to={goToHome()}>\n                    <button className=\"button--base\" type=\"button\">Back to Home</button>\n                </Link>\n            </div>\n        </DefaultFrame>\n    )\n}\n\nBattleResult.propTypes = {\n    battleStage: PropTypes.string.isRequired,\n    result: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    battleStage: state.battleStage,\n    result: getBattleResult(state),\n})\n\nexport default connect(\n    mapStateToProps,\n)(BattleResult)\n","import React from 'react'\nimport * as routes from '../redux/actions/routing/route.actions'\nimport Home from './Home'\nimport Settings from './Settings'\nimport Adventure from './Adventure'\nimport Squad from './Squad'\nimport Unit from './UnitPage'\nimport Battle from './Battle'\nimport BattleResult from './BattleResult'\n\nconst scenes = {\n    [routes.GOTO_HOME]: <Home />,\n    [routes.GOTO_SETTINGS]: <Settings />,\n    [routes.GOTO_ADVENTURE]: <Adventure />,\n    [routes.GOTO_SQUAD]: <Squad />,\n    [routes.GOTO_UNIT]: <Unit />,\n    [routes.GOTO_BATTLE]: <Battle />,\n    [routes.GOTO_BATTLE_RESULT]: <BattleResult />,\n}\n\nexport default scenes\n","import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Link from 'redux-first-router-link'\nimport { debounce } from 'throttle-debounce'\nimport scenes from './scenes'\nimport { GOTO_BATTLE, GOTO_HOME, goToHome } from './redux/actions/routing/route.actions'\nimport './App.scss'\n\nconst App = ({ location }) => {\n    const { type } = location\n    const gameOuterDOMNode = useRef(null)\n    const rootElement = document.documentElement\n\n    function getWindowDimensions() {\n        const { innerWidth: width, innerHeight: height } = window\n        return {\n            width,\n            height,\n        }\n    }\n\n    const [gameDimensions, setGameDimensions] = useState({ width: 0, height: 0 })\n\n    useEffect(() => {\n        function adjustScreen() {\n            const gameOuter = gameOuterDOMNode.current\n            gameOuter.className = 'game__outer adjusted'\n\n            const ratioHeight = 1 / 1.78\n            const ratioWidth = 1.78\n            const { width: vw, height: vh } = getWindowDimensions()\n\n            const width = (vw > vh)\n                ? (vh * ratioWidth <= vw)\n                    ? (vh * ratioWidth)\n                    : (vw)\n                : (vh * ratioHeight <= vw)\n                    ? (vh * ratioHeight)\n                    : (vw)\n\n            const height = (vw > vh)\n                ? (vw * ratioHeight <= vh)\n                    ? (vw * ratioHeight)\n                    : (vh)\n                : (vw * ratioWidth <= vh)\n                    ? (vw * ratioWidth)\n                    : (vh)\n\n            const longer = height > width ? height : width\n            const fontSize = longer / 37.5\n\n            setGameDimensions({ width, height })\n            rootElement.style.fontSize = `${fontSize}px`\n        }\n        const debouncedResizeHandler = debounce(200, () => {\n            adjustScreen()\n        })\n        adjustScreen()\n        window.addEventListener('resize', debouncedResizeHandler)\n        return () => window.removeEventListener('resize', debouncedResizeHandler)\n    }, [rootElement.style.fontSize])\n\n    const { width: gameWidth, height: gameHeight } = gameDimensions\n\n    const { type: locationType } = location\n    const hideButton = (\n        locationType === GOTO_HOME\n        || locationType === GOTO_BATTLE\n    )\n\n    const homeLink = hideButton\n        ? ''\n        : (\n            <div className=\"TEMP_DEV_HOME_BUTTON\">\n                <Link className=\"buttonLink--wrapper\" to={goToHome()}>\n                    <button type=\"button\">Home</button>\n                </Link>\n            </div>\n        )\n\n    return (\n        <div className=\"game__outer\" ref={gameOuterDOMNode} style={{ width: gameWidth, height: gameHeight }}>\n            <div className=\"game__inner\">\n                {scenes[type]}\n            </div>\n            {homeLink}\n        </div>\n    )\n}\n\nApp.propTypes = {\n    location: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    location: state.location,\n})\n\nexport default connect(mapStateToProps)(App)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store'\nimport App from './App'\nimport './index.scss'\n\nconst store = configureStore()\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}